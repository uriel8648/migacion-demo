{"version":3,"file":"upgrade.d.ts","sources":["upgrade.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Angular v12.2.17\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { HashLocationStrategy } from '@angular/common';\r\nimport { InjectionToken } from '@angular/core';\r\nimport { Location as Location_2 } from '@angular/common';\r\nimport { LocationStrategy } from '@angular/common';\r\nimport { ModuleWithProviders } from '@angular/core';\r\nimport { PathLocationStrategy } from '@angular/common';\r\nimport { PlatformLocation } from '@angular/common';\r\nimport { UpgradeModule } from '@angular/upgrade/static';\r\n\r\n/**\r\n * Location service that provides a drop-in replacement for the $location service\r\n * provided in AngularJS.\r\n *\r\n * @see [Using the Angular Unified Location Service](guide/upgrade#using-the-unified-angular-location-service)\r\n *\r\n * @publicApi\r\n */\r\nexport declare class $locationShim {\r\n    private location;\r\n    private platformLocation;\r\n    private urlCodec;\r\n    private locationStrategy;\r\n    private initalizing;\r\n    private updateBrowser;\r\n    private $$absUrl;\r\n    private $$url;\r\n    private $$protocol;\r\n    private $$host;\r\n    private $$port;\r\n    private $$replace;\r\n    private $$path;\r\n    private $$search;\r\n    private $$hash;\r\n    private $$state;\r\n    private $$changeListeners;\r\n    private cachedState;\r\n    private urlChanges;\r\n    constructor($injector: any, location: Location_2, platformLocation: PlatformLocation, urlCodec: UrlCodec, locationStrategy: LocationStrategy);\r\n    private initialize;\r\n    private resetBrowserUpdate;\r\n    private lastHistoryState;\r\n    private lastBrowserUrl;\r\n    private browserUrl;\r\n    private lastCachedState;\r\n    private cacheState;\r\n    /**\r\n     * This function emulates the $browser.state() function from AngularJS. It will cause\r\n     * history.state to be cached unless changed with deep equality check.\r\n     */\r\n    private browserState;\r\n    private stripBaseUrl;\r\n    private getServerBase;\r\n    private parseAppUrl;\r\n    /**\r\n     * Registers listeners for URL changes. This API is used to catch updates performed by the\r\n     * AngularJS framework. These changes are a subset of the `$locationChangeStart` and\r\n     * `$locationChangeSuccess` events which fire when AngularJS updates its internally-referenced\r\n     * version of the browser URL.\r\n     *\r\n     * It's possible for `$locationChange` events to happen, but for the browser URL\r\n     * (window.location) to remain unchanged. This `onChange` callback will fire only when AngularJS\r\n     * actually updates the browser URL (window.location).\r\n     *\r\n     * @param fn The callback function that is triggered for the listener when the URL changes.\r\n     * @param err The callback function that is triggered when an error occurs.\r\n     */\r\n    onChange(fn: (url: string, state: unknown, oldUrl: string, oldState: unknown) => void, err?: (e: Error) => void): void;\r\n    /**\r\n     * Parses the provided URL, and sets the current URL to the parsed result.\r\n     *\r\n     * @param url The URL string.\r\n     */\r\n    $$parse(url: string): void;\r\n    /**\r\n     * Parses the provided URL and its relative URL.\r\n     *\r\n     * @param url The full URL string.\r\n     * @param relHref A URL string relative to the full URL string.\r\n     */\r\n    $$parseLinkUrl(url: string, relHref?: string | null): boolean;\r\n    private setBrowserUrlWithFallback;\r\n    private composeUrls;\r\n    /**\r\n     * Retrieves the full URL representation with all segments encoded according to\r\n     * rules specified in\r\n     * [RFC 3986](https://tools.ietf.org/html/rfc3986).\r\n     *\r\n     *\r\n     * ```js\r\n     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\r\n     * let absUrl = $location.absUrl();\r\n     * // => \"http://example.com/#/some/path?foo=bar&baz=xoxo\"\r\n     * ```\r\n     */\r\n    absUrl(): string;\r\n    /**\r\n     * Retrieves the current URL, or sets a new URL. When setting a URL,\r\n     * changes the path, search, and hash, and returns a reference to its own instance.\r\n     *\r\n     * ```js\r\n     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\r\n     * let url = $location.url();\r\n     * // => \"/some/path?foo=bar&baz=xoxo\"\r\n     * ```\r\n     */\r\n    url(): string;\r\n    url(url: string): this;\r\n    /**\r\n     * Retrieves the protocol of the current URL.\r\n     *\r\n     * ```js\r\n     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\r\n     * let protocol = $location.protocol();\r\n     * // => \"http\"\r\n     * ```\r\n     */\r\n    protocol(): string;\r\n    /**\r\n     * Retrieves the protocol of the current URL.\r\n     *\r\n     * In contrast to the non-AngularJS version `location.host` which returns `hostname:port`, this\r\n     * returns the `hostname` portion only.\r\n     *\r\n     *\r\n     * ```js\r\n     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\r\n     * let host = $location.host();\r\n     * // => \"example.com\"\r\n     *\r\n     * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo\r\n     * host = $location.host();\r\n     * // => \"example.com\"\r\n     * host = location.host;\r\n     * // => \"example.com:8080\"\r\n     * ```\r\n     */\r\n    host(): string;\r\n    /**\r\n     * Retrieves the port of the current URL.\r\n     *\r\n     * ```js\r\n     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\r\n     * let port = $location.port();\r\n     * // => 80\r\n     * ```\r\n     */\r\n    port(): number | null;\r\n    /**\r\n     * Retrieves the path of the current URL, or changes the path and returns a reference to its own\r\n     * instance.\r\n     *\r\n     * Paths should always begin with forward slash (/). This method adds the forward slash\r\n     * if it is missing.\r\n     *\r\n     * ```js\r\n     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\r\n     * let path = $location.path();\r\n     * // => \"/some/path\"\r\n     * ```\r\n     */\r\n    path(): string;\r\n    path(path: string | number | null): this;\r\n    /**\r\n     * Retrieves a map of the search parameters of the current URL, or changes a search\r\n     * part and returns a reference to its own instance.\r\n     *\r\n     *\r\n     * ```js\r\n     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo\r\n     * let searchObject = $location.search();\r\n     * // => {foo: 'bar', baz: 'xoxo'}\r\n     *\r\n     * // set foo to 'yipee'\r\n     * $location.search('foo', 'yipee');\r\n     * // $location.search() => {foo: 'yipee', baz: 'xoxo'}\r\n     * ```\r\n     *\r\n     * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or\r\n     * hash object.\r\n     *\r\n     * When called with a single argument the method acts as a setter, setting the `search` component\r\n     * of `$location` to the specified value.\r\n     *\r\n     * If the argument is a hash object containing an array of values, these values will be encoded\r\n     * as duplicate search parameters in the URL.\r\n     *\r\n     * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number,\r\n     *     then `paramValue`\r\n     * will override only a single search property.\r\n     *\r\n     * If `paramValue` is an array, it will override the property of the `search` component of\r\n     * `$location` specified via the first argument.\r\n     *\r\n     * If `paramValue` is `null`, the property specified via the first argument will be deleted.\r\n     *\r\n     * If `paramValue` is `true`, the property specified via the first argument will be added with no\r\n     * value nor trailing equal sign.\r\n     *\r\n     * @return {Object} The parsed `search` object of the current URL, or the changed `search` object.\r\n     */\r\n    search(): {\r\n        [key: string]: unknown;\r\n    };\r\n    search(search: string | number | {\r\n        [key: string]: unknown;\r\n    }): this;\r\n    search(search: string | number | {\r\n        [key: string]: unknown;\r\n    }, paramValue: null | undefined | string | number | boolean | string[]): this;\r\n    /**\r\n     * Retrieves the current hash fragment, or changes the hash fragment and returns a reference to\r\n     * its own instance.\r\n     *\r\n     * ```js\r\n     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue\r\n     * let hash = $location.hash();\r\n     * // => \"hashValue\"\r\n     * ```\r\n     */\r\n    hash(): string;\r\n    hash(hash: string | number | null): this;\r\n    /**\r\n     * Changes to `$location` during the current `$digest` will replace the current\r\n     * history record, instead of adding a new one.\r\n     */\r\n    replace(): this;\r\n    /**\r\n     * Retrieves the history state object when called without any parameter.\r\n     *\r\n     * Change the history state object when called with one parameter and return `$location`.\r\n     * The state object is later passed to `pushState` or `replaceState`.\r\n     *\r\n     * This method is supported only in HTML5 mode and only in browsers supporting\r\n     * the HTML5 History API methods such as `pushState` and `replaceState`. If you need to support\r\n     * older browsers (like Android < 4.0), don't use this method.\r\n     *\r\n     */\r\n    state(): unknown;\r\n    state(state: unknown): this;\r\n}\r\n\r\n/**\r\n * The factory function used to create an instance of the `$locationShim` in Angular,\r\n * and provides an API-compatiable `$locationProvider` for AngularJS.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class $locationShimProvider {\r\n    private ngUpgrade;\r\n    private location;\r\n    private platformLocation;\r\n    private urlCodec;\r\n    private locationStrategy;\r\n    constructor(ngUpgrade: UpgradeModule, location: Location_2, platformLocation: PlatformLocation, urlCodec: UrlCodec, locationStrategy: LocationStrategy);\r\n    /**\r\n     * Factory method that returns an instance of the $locationShim\r\n     */\r\n    $get(): $locationShim;\r\n    /**\r\n     * Stub method used to keep API compatible with AngularJS. This setting is configured through\r\n     * the LocationUpgradeModule's `config` method in your Angular app.\r\n     */\r\n    hashPrefix(prefix?: string): void;\r\n    /**\r\n     * Stub method used to keep API compatible with AngularJS. This setting is configured through\r\n     * the LocationUpgradeModule's `config` method in your Angular app.\r\n     */\r\n    html5Mode(mode?: any): void;\r\n}\r\n\r\n/**\r\n * A `UrlCodec` that uses logic from AngularJS to serialize and parse URLs\r\n * and URL parameters.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class AngularJSUrlCodec implements UrlCodec {\r\n    encodePath(path: string): string;\r\n    encodeSearch(search: string | {\r\n        [k: string]: unknown;\r\n    }): string;\r\n    encodeHash(hash: string): string;\r\n    decodePath(path: string, html5Mode?: boolean): string;\r\n    decodeSearch(search: string): {\r\n        [k: string]: unknown;\r\n    };\r\n    decodeHash(hash: string): string;\r\n    normalize(href: string): string;\r\n    normalize(path: string, search: {\r\n        [k: string]: unknown;\r\n    }, hash: string, baseUrl?: string): string;\r\n    areEqual(valA: string, valB: string): boolean;\r\n    parse(url: string, base?: string): {\r\n        href: string;\r\n        protocol: string;\r\n        host: string;\r\n        search: string;\r\n        hash: string;\r\n        hostname: string;\r\n        port: string;\r\n        pathname: string;\r\n    };\r\n}\r\n\r\n/**\r\n * A provider token used to configure the location upgrade module.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const LOCATION_UPGRADE_CONFIGURATION: InjectionToken<LocationUpgradeConfig>;\r\n\r\n/**\r\n * Configuration options for LocationUpgrade.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface LocationUpgradeConfig {\r\n    /**\r\n     * Configures whether the location upgrade module should use the `HashLocationStrategy`\r\n     * or the `PathLocationStrategy`\r\n     */\r\n    useHash?: boolean;\r\n    /**\r\n     * Configures the hash prefix used in the URL when using the `HashLocationStrategy`\r\n     */\r\n    hashPrefix?: string;\r\n    /**\r\n     * Configures the URL codec for encoding and decoding URLs. Default is the `AngularJSCodec`\r\n     */\r\n    urlCodec?: typeof UrlCodec;\r\n    /**\r\n     * Configures the base href when used in server-side rendered applications\r\n     */\r\n    serverBaseHref?: string;\r\n    /**\r\n     * Configures the base href when used in client-side rendered applications\r\n     */\r\n    appBaseHref?: string;\r\n}\r\n\r\n/**\r\n * `NgModule` used for providing and configuring Angular's Unified Location Service for upgrading.\r\n *\r\n * @see [Using the Unified Angular Location Service](guide/upgrade#using-the-unified-angular-location-service)\r\n *\r\n * @publicApi\r\n */\r\nexport declare class LocationUpgradeModule {\r\n    static config(config?: LocationUpgradeConfig): ModuleWithProviders<LocationUpgradeModule>;\r\n}\r\n\r\n\r\n/**\r\n * A codec for encoding and decoding URL parts.\r\n *\r\n * @publicApi\r\n **/\r\nexport declare abstract class UrlCodec {\r\n    /**\r\n     * Encodes the path from the provided string\r\n     *\r\n     * @param path The path string\r\n     */\r\n    abstract encodePath(path: string): string;\r\n    /**\r\n     * Decodes the path from the provided string\r\n     *\r\n     * @param path The path string\r\n     */\r\n    abstract decodePath(path: string): string;\r\n    /**\r\n     * Encodes the search string from the provided string or object\r\n     *\r\n     * @param path The path string or object\r\n     */\r\n    abstract encodeSearch(search: string | {\r\n        [k: string]: unknown;\r\n    }): string;\r\n    /**\r\n     * Decodes the search objects from the provided string\r\n     *\r\n     * @param path The path string\r\n     */\r\n    abstract decodeSearch(search: string): {\r\n        [k: string]: unknown;\r\n    };\r\n    /**\r\n     * Encodes the hash from the provided string\r\n     *\r\n     * @param path The hash string\r\n     */\r\n    abstract encodeHash(hash: string): string;\r\n    /**\r\n     * Decodes the hash from the provided string\r\n     *\r\n     * @param path The hash string\r\n     */\r\n    abstract decodeHash(hash: string): string;\r\n    /**\r\n     * Normalizes the URL from the provided string\r\n     *\r\n     * @param path The URL string\r\n     */\r\n    abstract normalize(href: string): string;\r\n    /**\r\n     * Normalizes the URL from the provided string, search, hash, and base URL parameters\r\n     *\r\n     * @param path The URL path\r\n     * @param search The search object\r\n     * @param hash The has string\r\n     * @param baseUrl The base URL for the URL\r\n     */\r\n    abstract normalize(path: string, search: {\r\n        [k: string]: unknown;\r\n    }, hash: string, baseUrl?: string): string;\r\n    /**\r\n     * Checks whether the two strings are equal\r\n     * @param valA First string for comparison\r\n     * @param valB Second string for comparison\r\n     */\r\n    abstract areEqual(valA: string, valB: string): boolean;\r\n    /**\r\n     * Parses the URL string based on the base URL\r\n     *\r\n     * @param url The full URL string\r\n     * @param base The base for the URL\r\n     */\r\n    abstract parse(url: string, base?: string): {\r\n        href: string;\r\n        protocol: string;\r\n        host: string;\r\n        search: string;\r\n        hash: string;\r\n        hostname: string;\r\n        port: string;\r\n        pathname: string;\r\n    };\r\n}\r\n\r\nexport declare function ɵangular_packages_common_upgrade_upgrade_a(config: LocationUpgradeConfig, appBaseHref?: string): string;\r\n\r\nexport declare function ɵangular_packages_common_upgrade_upgrade_b(config: LocationUpgradeConfig): any;\r\n\r\nexport declare function ɵangular_packages_common_upgrade_upgrade_c(platformLocation: PlatformLocation, baseHref: string, options?: LocationUpgradeConfig): HashLocationStrategy | PathLocationStrategy;\r\n\r\nexport declare function ɵangular_packages_common_upgrade_upgrade_d(ngUpgrade: UpgradeModule, location: Location_2, platformLocation: PlatformLocation, urlCodec: UrlCodec, locationStrategy: LocationStrategy): $locationShim;\r\n\r\nexport { }\r\n"]}