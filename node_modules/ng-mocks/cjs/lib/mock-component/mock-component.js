"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockComponent = exports.MockComponents = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var core_define_property_1 = __importDefault(require("../common/core.define-property"));
var core_form_1 = __importDefault(require("../common/core.form"));
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_directive_resolve_1 = __importDefault(require("../common/core.reflect.directive-resolve"));
var func_get_mocked_ng_def_of_1 = require("../common/func.get-mocked-ng-def-of");
var func_import_exists_1 = __importDefault(require("../common/func.import-exists"));
var func_is_mock_1 = __importDefault(require("../common/func.is-mock"));
var func_is_mock_ng_def_1 = require("../common/func.is-mock-ng-def");
var mock_control_value_accessor_1 = require("../common/mock-control-value-accessor");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var decorate_declaration_1 = __importDefault(require("../mock/decorate-declaration"));
var generate_template_1 = __importDefault(require("./render/generate-template"));
var get_key_1 = __importDefault(require("./render/get-key"));
var mixRenderPrepareVcr = function (instance, type, selector, cdr) {
    if (!instance["ngMocksRender_" + type + "_" + selector]) {
        instance["ngMocksRender_" + type + "_" + selector] = true;
        cdr.detectChanges();
    }
    return instance["__mockView_" + type + "_" + selector];
};
var mixRenderReorderViews = function (viewContainer, views, index) {
    var e_1, _a, e_2, _b;
    try {
        for (var _c = __values(views.splice(index + 1)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var view = _d.value;
            view.destroy();
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var viewIndex = 0;
    try {
        for (var views_1 = __values(views), views_1_1 = views_1.next(); !views_1_1.done; views_1_1 = views_1.next()) {
            var view = views_1_1.value;
            if (!view) {
                continue;
            }
            viewContainer.move(view, viewIndex);
            viewIndex += 1;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (views_1_1 && !views_1_1.done && (_b = views_1.return)) _b.call(views_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
};
var mixRenderApplyContext = function (view, context) {
    var e_3, _a, e_4, _b;
    try {
        for (var _c = __values(Object.keys(view.context)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var contextKey = _d.value;
            view.context[contextKey] = undefined;
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_3) throw e_3.error; }
    }
    try {
        for (var _e = __values(Object.keys(context)), _f = _e.next(); !_f.done; _f = _e.next()) {
            var contextKey = _f.value;
            view.context[contextKey] = context[contextKey];
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_4) throw e_4.error; }
    }
    view.markForCheck();
};
var mixRenderHandleViews = function (vcr, cdr, templates, views, indices, context) {
    var e_5, _a;
    var index = -1;
    try {
        for (var templates_1 = __values(templates), templates_1_1 = templates_1.next(); !templates_1_1.done; templates_1_1 = templates_1.next()) {
            var templateRef = templates_1_1.value;
            index += 1;
            views[index] = views[index] || undefined;
            if ((indices && indices.indexOf(index) === -1) || !templateRef) {
                continue;
            }
            if (!(templateRef instanceof core_1.TemplateRef)) {
                throw new Error("Cannot find TemplateRef");
            }
            if (!views[index]) {
                views[index] = vcr.createEmbeddedView(templateRef, {});
            }
            mixRenderApplyContext(views[index], context);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (templates_1_1 && !templates_1_1.done && (_a = templates_1.return)) _a.call(templates_1);
        }
        finally { if (e_5) throw e_5.error; }
    }
    cdr.detectChanges();
    return index;
};
var mixRender = function (instance, cdr) {
    // Providing a method to render any @ContentChild based on its selector.
    (0, core_define_property_1.default)(instance, '__render', function (contentChildSelector, $implicit, variables) {
        var _a = __read((0, get_key_1.default)(contentChildSelector), 4), type = _a[0], key = _a[1], selector = _a[2], indices = _a[3];
        var vcr = mixRenderPrepareVcr(instance, type, selector, cdr);
        if (!vcr) {
            return;
        }
        var property = instance[key];
        var templates = property instanceof core_1.QueryList ? property.toArray() : [property];
        var views = instance["ngMocksRender_" + type + "_" + selector + "_views"] || [];
        var index = mixRenderHandleViews(vcr, cdr, templates, views, indices, __assign(__assign({}, variables), { $implicit: $implicit }));
        mixRenderReorderViews(vcr, views, index);
        instance["ngMocksRender_" + type + "_" + selector + "_views"] = views;
        cdr.detectChanges();
    });
};
var mixHideHandler = function (instance, type, selector, indices) {
    var e_6, _a;
    var views = instance["ngMocksRender_" + type + "_" + selector + "_views"];
    var index = -1;
    try {
        for (var views_2 = __values(views), views_2_1 = views_2.next(); !views_2_1.done; views_2_1 = views_2.next()) {
            var view = views_2_1.value;
            index += 1;
            if ((indices && indices.indexOf(index) === -1) || !view) {
                continue;
            }
            view.destroy();
            views[index] = undefined;
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (views_2_1 && !views_2_1.done && (_a = views_2.return)) _a.call(views_2);
        }
        finally { if (e_6) throw e_6.error; }
    }
};
var mixHide = function (instance, changeDetector) {
    // Providing method to hide any @ContentChild based on its selector.
    (0, core_define_property_1.default)(instance, '__hide', function (contentChildSelector) {
        var _a = __read((0, get_key_1.default)(contentChildSelector), 4), type = _a[0], selector = _a[2], indices = _a[3];
        if (!instance["ngMocksRender_" + type + "_" + selector]) {
            return;
        }
        mixHideHandler(instance, type, selector, indices);
        if (!indices) {
            instance["ngMocksRender_" + type + "_" + selector] = false;
        }
        changeDetector.detectChanges();
    });
};
var ComponentMockBase = /** @class */ (function (_super) {
    __extends(ComponentMockBase, _super);
    // istanbul ignore next
    function ComponentMockBase(injector, ngControl, // NgControl
    changeDetector) {
        var _this = _super.call(this, injector, ngControl) || this;
        if ((0, func_is_mock_1.default)(_this)) {
            mixRender(_this, changeDetector);
            mixHide(_this, changeDetector);
        }
        return _this;
    }
    ComponentMockBase.prototype.ngAfterContentInit = function () {
        var e_7, _a;
        var config = this.__ngMocksConfig.config;
        if (!this.__rendered && config && config.render) {
            try {
                for (var _b = __values(Object.keys(config.render)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var block = _c.value;
                    var _d = config.render[block] !== true
                        ? config.render[block]
                        : {
                            $implicit: undefined,
                            variables: {},
                        }, $implicit = _d.$implicit, variables = _d.variables;
                    this.__render(block, $implicit, variables);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_7) throw e_7.error; }
            }
            this.__rendered = true;
        }
    };
    return ComponentMockBase;
}(mock_control_value_accessor_1.LegacyControlValueAccessor));
(0, core_define_property_1.default)(ComponentMockBase, 'parameters', [
    [core_1.Injector],
    [core_form_1.default.NgControl || /* istanbul ignore next */ (function () { return undefined; }), new core_1.Optional(), new core_1.Self()],
    [core_1.ChangeDetectorRef],
]);
var decorateClass = function (component, mock) {
    var meta = (0, core_reflect_directive_resolve_1.default)(component);
    var exportAs = meta.exportAs, inputs = meta.inputs, outputs = meta.outputs, queries = meta.queries, selector = meta.selector, providers = meta.providers, viewProviders = meta.viewProviders;
    var template = (0, generate_template_1.default)(queries);
    var mockMeta = { inputs: inputs, outputs: outputs, providers: providers, viewProviders: viewProviders, queries: queries };
    var mockParams = { exportAs: exportAs, selector: selector, template: template };
    (0, core_1.Component)((0, decorate_declaration_1.default)(component, mock, mockMeta, mockParams))(mock);
};
function MockComponents() {
    var components = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
    }
    return components.map(MockComponent);
}
exports.MockComponents = MockComponents;
/**
 * @see https://ng-mocks.sudo.eu/api/MockComponent
 */
function MockComponent(component) {
    (0, func_import_exists_1.default)(component, 'MockComponent');
    if ((0, func_is_mock_ng_def_1.isMockNgDef)(component, 'c')) {
        return component;
    }
    // We are inside of an 'it'. It is fine to to return a mock copy.
    if ((0, testing_1.getTestBed)()._instantiated) {
        try {
            return (0, func_get_mocked_ng_def_of_1.getMockedNgDefOf)(component, 'c');
        }
        catch (error) {
            // looks like an in-test mock.
        }
    }
    if (ng_mocks_universe_1.default.flags.has('cacheComponent') && ng_mocks_universe_1.default.cacheDeclarations.has(component)) {
        return ng_mocks_universe_1.default.cacheDeclarations.get(component);
    }
    var mock = (0, core_helpers_1.extendClass)(ComponentMockBase);
    decorateClass(component, mock);
    // istanbul ignore else
    if (ng_mocks_universe_1.default.flags.has('cacheComponent')) {
        ng_mocks_universe_1.default.cacheDeclarations.set(component, mock);
    }
    return mock;
}
exports.MockComponent = MockComponent;
//# sourceMappingURL=data:application/json;base64,