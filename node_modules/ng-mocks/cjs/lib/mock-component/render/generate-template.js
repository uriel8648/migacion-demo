"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var viewChildArgs = { read: core_1.ViewContainerRef, static: false };
var viewChildTemplate = function (selector, key) {
    return "<div *ngIf=\"ngMocksRender_" + key + "_" + selector + "\" data-" + key + "=\"" + selector + "\"><ng-template #" + key + "_" + selector + "></ng-template></div>";
};
var isTemplateRefQuery = function (query) {
    if (query.isViewQuery) {
        return false; // ignoring all internal @ViewChild
    }
    if (query.read && query.read !== core_1.TemplateRef) {
        return false; // ignoring read of instances
    }
    if (typeof query.selector !== 'string' && !query.read) {
        return false; // ignoring class selectors if they do not read TemplateRef
    }
    return true;
};
exports.default = (function (queries) {
    var e_1, _a;
    var parts = ["<ng-content></ng-content>"];
    // istanbul ignore if
    if (!queries) {
        return parts.join('');
    }
    try {
        for (var _b = __values(Object.keys(queries)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var query = queries[key];
            if (!isTemplateRefQuery(query)) {
                continue;
            }
            if (typeof query.selector === 'string') {
                var selector = query.selector.replace(new RegExp('[^a-zA-Z0-9_]', 'mg'), '_');
                queries["__mockView_key_" + selector] = new core_1.ViewChild("key_" + selector, viewChildArgs);
                queries["__mockTpl_key_" + selector] = query;
                parts.push(viewChildTemplate(selector, 'key'));
            }
            queries["__mockView_prop_" + key] = new core_1.ViewChild("prop_" + key, viewChildArgs);
            parts.push(viewChildTemplate(key, 'prop'));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return parts.join('');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtdGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1jb21wb25lbnQvcmVuZGVyL2dlbmVyYXRlLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxzQ0FBZ0Y7QUFFaEYsSUFBTSxhQUFhLEdBQVEsRUFBRSxJQUFJLEVBQUUsdUJBQWdCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBRXJFLElBQU0saUJBQWlCLEdBQUcsVUFBQyxRQUFnQixFQUFFLEdBQVc7SUFDdEQsT0FBQSxnQ0FBNkIsR0FBRyxTQUFJLFFBQVEsZ0JBQVUsR0FBRyxXQUFLLFFBQVEseUJBQW1CLEdBQUcsU0FBSSxRQUFRLDBCQUF1QjtBQUEvSCxDQUErSCxDQUFDO0FBRWxJLElBQU0sa0JBQWtCLEdBQUcsVUFBQyxLQUFZO0lBQ3RDLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtRQUNyQixPQUFPLEtBQUssQ0FBQyxDQUFDLG1DQUFtQztLQUNsRDtJQUNELElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGtCQUFXLEVBQUU7UUFDNUMsT0FBTyxLQUFLLENBQUMsQ0FBQyw2QkFBNkI7S0FDNUM7SUFDRCxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ3JELE9BQU8sS0FBSyxDQUFDLENBQUMsMkRBQTJEO0tBQzFFO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixtQkFBZSxVQUFDLE9BQWdDOztJQUM5QyxJQUFNLEtBQUssR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUM7SUFDNUMscUJBQXFCO0lBQ3JCLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDdkI7O1FBRUQsS0FBa0IsSUFBQSxLQUFBLFNBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQSxnQkFBQSw0QkFBRTtZQUFuQyxJQUFNLEdBQUcsV0FBQTtZQUNaLElBQU0sS0FBSyxHQUFVLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzlCLFNBQVM7YUFDVjtZQUNELElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtnQkFDdEMsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNoRixPQUFPLENBQUMsb0JBQWtCLFFBQVUsQ0FBQyxHQUFHLElBQUksZ0JBQVMsQ0FBQyxTQUFPLFFBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDeEYsT0FBTyxDQUFDLG1CQUFpQixRQUFVLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQzdDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDaEQ7WUFDRCxPQUFPLENBQUMscUJBQW1CLEdBQUssQ0FBQyxHQUFHLElBQUksZ0JBQVMsQ0FBQyxVQUFRLEdBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztZQUNoRixLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQzVDOzs7Ozs7Ozs7SUFFRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDeEIsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnksIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3Qgdmlld0NoaWxkQXJnczogYW55ID0geyByZWFkOiBWaWV3Q29udGFpbmVyUmVmLCBzdGF0aWM6IGZhbHNlIH07XG5cbmNvbnN0IHZpZXdDaGlsZFRlbXBsYXRlID0gKHNlbGVjdG9yOiBzdHJpbmcsIGtleTogc3RyaW5nKTogc3RyaW5nID0+XG4gIGA8ZGl2ICpuZ0lmPVwibmdNb2Nrc1JlbmRlcl8ke2tleX1fJHtzZWxlY3Rvcn1cIiBkYXRhLSR7a2V5fT1cIiR7c2VsZWN0b3J9XCI+PG5nLXRlbXBsYXRlICMke2tleX1fJHtzZWxlY3Rvcn0+PC9uZy10ZW1wbGF0ZT48L2Rpdj5gO1xuXG5jb25zdCBpc1RlbXBsYXRlUmVmUXVlcnkgPSAocXVlcnk6IFF1ZXJ5KTogYm9vbGVhbiA9PiB7XG4gIGlmIChxdWVyeS5pc1ZpZXdRdWVyeSkge1xuICAgIHJldHVybiBmYWxzZTsgLy8gaWdub3JpbmcgYWxsIGludGVybmFsIEBWaWV3Q2hpbGRcbiAgfVxuICBpZiAocXVlcnkucmVhZCAmJiBxdWVyeS5yZWFkICE9PSBUZW1wbGF0ZVJlZikge1xuICAgIHJldHVybiBmYWxzZTsgLy8gaWdub3JpbmcgcmVhZCBvZiBpbnN0YW5jZXNcbiAgfVxuICBpZiAodHlwZW9mIHF1ZXJ5LnNlbGVjdG9yICE9PSAnc3RyaW5nJyAmJiAhcXVlcnkucmVhZCkge1xuICAgIHJldHVybiBmYWxzZTsgLy8gaWdub3JpbmcgY2xhc3Mgc2VsZWN0b3JzIGlmIHRoZXkgZG8gbm90IHJlYWQgVGVtcGxhdGVSZWZcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKHF1ZXJpZXM/OiBSZWNvcmQ8a2V5b2YgYW55LCBhbnk+KTogc3RyaW5nID0+IHtcbiAgY29uc3QgcGFydHMgPSBbYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gXTtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmICghcXVlcmllcykge1xuICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHF1ZXJpZXMpKSB7XG4gICAgY29uc3QgcXVlcnk6IFF1ZXJ5ID0gcXVlcmllc1trZXldO1xuICAgIGlmICghaXNUZW1wbGF0ZVJlZlF1ZXJ5KHF1ZXJ5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcXVlcnkuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBzZWxlY3RvciA9IHF1ZXJ5LnNlbGVjdG9yLnJlcGxhY2UobmV3IFJlZ0V4cCgnW15hLXpBLVowLTlfXScsICdtZycpLCAnXycpO1xuICAgICAgcXVlcmllc1tgX19tb2NrVmlld19rZXlfJHtzZWxlY3Rvcn1gXSA9IG5ldyBWaWV3Q2hpbGQoYGtleV8ke3NlbGVjdG9yfWAsIHZpZXdDaGlsZEFyZ3MpO1xuICAgICAgcXVlcmllc1tgX19tb2NrVHBsX2tleV8ke3NlbGVjdG9yfWBdID0gcXVlcnk7XG4gICAgICBwYXJ0cy5wdXNoKHZpZXdDaGlsZFRlbXBsYXRlKHNlbGVjdG9yLCAna2V5JykpO1xuICAgIH1cbiAgICBxdWVyaWVzW2BfX21vY2tWaWV3X3Byb3BfJHtrZXl9YF0gPSBuZXcgVmlld0NoaWxkKGBwcm9wXyR7a2V5fWAsIHZpZXdDaGlsZEFyZ3MpO1xuICAgIHBhcnRzLnB1c2godmlld0NoaWxkVGVtcGxhdGUoa2V5LCAncHJvcCcpKTtcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbn07XG4iXX0=