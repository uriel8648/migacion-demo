"use strict";
// tslint:disable variable-name ban-ts-ignore
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockAsyncValidatorProxy = exports.MockValidatorProxy = exports.MockControlValueAccessorProxy = void 0;
var applyProxy = function (proxy, method, value, storage) {
    if (proxy.instance && storage) {
        proxy.instance[storage] = value;
    }
    if (proxy.instance && proxy.instance[method]) {
        return proxy.instance[method](value);
    }
};
var MockControlValueAccessorProxy = /** @class */ (function () {
    function MockControlValueAccessorProxy(target) {
        this.target = target;
    }
    MockControlValueAccessorProxy.prototype.registerOnChange = function (fn) {
        applyProxy(this, 'registerOnChange', fn, '__simulateChange');
    };
    MockControlValueAccessorProxy.prototype.registerOnTouched = function (fn) {
        applyProxy(this, 'registerOnTouched', fn, '__simulateTouch');
    };
    MockControlValueAccessorProxy.prototype.setDisabledState = function (isDisabled) {
        applyProxy(this, 'setDisabledState', isDisabled);
    };
    MockControlValueAccessorProxy.prototype.writeValue = function (value) {
        applyProxy(this, 'writeValue', value);
    };
    return MockControlValueAccessorProxy;
}());
exports.MockControlValueAccessorProxy = MockControlValueAccessorProxy;
var MockValidatorProxy = /** @class */ (function () {
    function MockValidatorProxy(target) {
        this.target = target;
    }
    MockValidatorProxy.prototype.registerOnValidatorChange = function (fn) {
        applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');
    };
    MockValidatorProxy.prototype.validate = function (control) {
        if (this.instance && this.instance.validate) {
            return this.instance.validate(control);
        }
        return null;
    };
    return MockValidatorProxy;
}());
exports.MockValidatorProxy = MockValidatorProxy;
var MockAsyncValidatorProxy = /** @class */ (function () {
    function MockAsyncValidatorProxy(target) {
        this.target = target;
    }
    MockAsyncValidatorProxy.prototype.registerOnValidatorChange = function (fn) {
        applyProxy(this, 'registerOnValidatorChange', fn, '__simulateValidatorChange');
    };
    MockAsyncValidatorProxy.prototype.validate = function (control) {
        if (this.instance && this.instance.validate) {
            var result = this.instance.validate(control);
            return result === undefined ? Promise.resolve(null) : result;
        }
        return Promise.resolve(null);
    };
    return MockAsyncValidatorProxy;
}());
exports.MockAsyncValidatorProxy = MockAsyncValidatorProxy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1jb250cm9sLXZhbHVlLWFjY2Vzc29yLXByb3h5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL2NvbW1vbi9tb2NrLWNvbnRyb2wtdmFsdWUtYWNjZXNzb3ItcHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZDQUE2Qzs7O0FBTzdDLElBQU0sVUFBVSxHQUFHLFVBQUMsS0FBVSxFQUFFLE1BQWMsRUFBRSxLQUFVLEVBQUUsT0FBZ0I7SUFDMUUsSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLE9BQU8sRUFBRTtRQUM3QixLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQztLQUNqQztJQUNELElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzVDLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN0QztBQUNILENBQUMsQ0FBQztBQUVGO0lBR0UsdUNBQW1DLE1BQXFCO1FBQXJCLFdBQU0sR0FBTixNQUFNLENBQWU7SUFBRyxDQUFDO0lBRXJELHdEQUFnQixHQUF2QixVQUF3QixFQUFPO1FBQzdCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVNLHlEQUFpQixHQUF4QixVQUF5QixFQUFPO1FBQzlCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVNLHdEQUFnQixHQUF2QixVQUF3QixVQUFtQjtRQUN6QyxVQUFVLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxrREFBVSxHQUFqQixVQUFrQixLQUFVO1FBQzFCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUFwQkQsSUFvQkM7QUFwQlksc0VBQTZCO0FBc0IxQztJQUdFLDRCQUFtQyxNQUFxQjtRQUFyQixXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQUcsQ0FBQztJQUVyRCxzREFBeUIsR0FBaEMsVUFBaUMsRUFBTztRQUN0QyxVQUFVLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLEVBQUUsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFTSxxQ0FBUSxHQUFmLFVBQWdCLE9BQVk7UUFDMUIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQzNDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDSCx5QkFBQztBQUFELENBQUMsQUFoQkQsSUFnQkM7QUFoQlksZ0RBQWtCO0FBa0IvQjtJQUdFLGlDQUFtQyxNQUFxQjtRQUFyQixXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQUcsQ0FBQztJQUVyRCwyREFBeUIsR0FBaEMsVUFBaUMsRUFBTztRQUN0QyxVQUFVLENBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLEVBQUUsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFTSwwQ0FBUSxHQUFmLFVBQWdCLE9BQVk7UUFDMUIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQzNDLElBQU0sTUFBTSxHQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXBELE9BQU8sTUFBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1NBQzlEO1FBRUQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFDSCw4QkFBQztBQUFELENBQUMsQUFsQkQsSUFrQkM7QUFsQlksMERBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGUgdmFyaWFibGUtbmFtZSBiYW4tdHMtaWdub3JlXG5cbmltcG9ydCB7IEFzeW5jVmFsaWRhdG9yLCBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBBbnlUeXBlIH0gZnJvbSAnLi9jb3JlLnR5cGVzJztcbmltcG9ydCB7IE1vY2tDb250cm9sVmFsdWVBY2Nlc3NvciwgTW9ja1ZhbGlkYXRvciB9IGZyb20gJy4vbW9jay1jb250cm9sLXZhbHVlLWFjY2Vzc29yJztcblxuY29uc3QgYXBwbHlQcm94eSA9IChwcm94eTogYW55LCBtZXRob2Q6IHN0cmluZywgdmFsdWU6IGFueSwgc3RvcmFnZT86IHN0cmluZykgPT4ge1xuICBpZiAocHJveHkuaW5zdGFuY2UgJiYgc3RvcmFnZSkge1xuICAgIHByb3h5Lmluc3RhbmNlW3N0b3JhZ2VdID0gdmFsdWU7XG4gIH1cbiAgaWYgKHByb3h5Lmluc3RhbmNlICYmIHByb3h5Lmluc3RhbmNlW21ldGhvZF0pIHtcbiAgICByZXR1cm4gcHJveHkuaW5zdGFuY2VbbWV0aG9kXSh2YWx1ZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBNb2NrQ29udHJvbFZhbHVlQWNjZXNzb3JQcm94eSBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgcHVibGljIGluc3RhbmNlPzogUGFydGlhbDxNb2NrQ29udHJvbFZhbHVlQWNjZXNzb3IgJiBDb250cm9sVmFsdWVBY2Nlc3Nvcj47XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB0YXJnZXQ/OiBBbnlUeXBlPGFueT4pIHt9XG5cbiAgcHVibGljIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIGFwcGx5UHJveHkodGhpcywgJ3JlZ2lzdGVyT25DaGFuZ2UnLCBmbiwgJ19fc2ltdWxhdGVDaGFuZ2UnKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XG4gICAgYXBwbHlQcm94eSh0aGlzLCAncmVnaXN0ZXJPblRvdWNoZWQnLCBmbiwgJ19fc2ltdWxhdGVUb3VjaCcpO1xuICB9XG5cbiAgcHVibGljIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIGFwcGx5UHJveHkodGhpcywgJ3NldERpc2FibGVkU3RhdGUnLCBpc0Rpc2FibGVkKTtcbiAgfVxuXG4gIHB1YmxpYyB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBhcHBseVByb3h5KHRoaXMsICd3cml0ZVZhbHVlJywgdmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrVmFsaWRhdG9yUHJveHkgaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xuICBwdWJsaWMgaW5zdGFuY2U/OiBQYXJ0aWFsPE1vY2tWYWxpZGF0b3IgJiBWYWxpZGF0b3I+O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0PzogQW55VHlwZTxhbnk+KSB7fVxuXG4gIHB1YmxpYyByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICBhcHBseVByb3h5KHRoaXMsICdyZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlJywgZm4sICdfX3NpbXVsYXRlVmFsaWRhdG9yQ2hhbmdlJyk7XG4gIH1cblxuICBwdWJsaWMgdmFsaWRhdGUoY29udHJvbDogYW55KTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgIGlmICh0aGlzLmluc3RhbmNlICYmIHRoaXMuaW5zdGFuY2UudmFsaWRhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlLnZhbGlkYXRlKGNvbnRyb2wpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrQXN5bmNWYWxpZGF0b3JQcm94eSBpbXBsZW1lbnRzIEFzeW5jVmFsaWRhdG9yIHtcbiAgcHVibGljIGluc3RhbmNlPzogUGFydGlhbDxNb2NrVmFsaWRhdG9yICYgQXN5bmNWYWxpZGF0b3I+O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0PzogQW55VHlwZTxhbnk+KSB7fVxuXG4gIHB1YmxpYyByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICBhcHBseVByb3h5KHRoaXMsICdyZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlJywgZm4sICdfX3NpbXVsYXRlVmFsaWRhdG9yQ2hhbmdlJyk7XG4gIH1cblxuICBwdWJsaWMgdmFsaWRhdGUoY29udHJvbDogYW55KTogYW55IHtcbiAgICBpZiAodGhpcy5pbnN0YW5jZSAmJiB0aGlzLmluc3RhbmNlLnZhbGlkYXRlKSB7XG4gICAgICBjb25zdCByZXN1bHQ6IGFueSA9IHRoaXMuaW5zdGFuY2UudmFsaWRhdGUoY29udHJvbCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IFByb21pc2UucmVzb2x2ZShudWxsKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICB9XG59XG4iXX0=