import { AsyncValidator, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';
import { AnyType } from './core.types';
import { MockControlValueAccessor, MockValidator } from './mock-control-value-accessor';
export declare class MockControlValueAccessorProxy implements ControlValueAccessor {
    readonly target?: AnyType<any> | undefined;
    instance?: Partial<MockControlValueAccessor & ControlValueAccessor>;
    constructor(target?: AnyType<any> | undefined);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: any): void;
}
export declare class MockValidatorProxy implements Validator {
    readonly target?: AnyType<any> | undefined;
    instance?: Partial<MockValidator & Validator>;
    constructor(target?: AnyType<any> | undefined);
    registerOnValidatorChange(fn: any): void;
    validate(control: any): ValidationErrors | null;
}
export declare class MockAsyncValidatorProxy implements AsyncValidator {
    readonly target?: AnyType<any> | undefined;
    instance?: Partial<MockValidator & AsyncValidator>;
    constructor(target?: AnyType<any> | undefined);
    registerOnValidatorChange(fn: any): void;
    validate(control: any): any;
}
