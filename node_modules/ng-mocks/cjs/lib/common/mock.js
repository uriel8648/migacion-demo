"use strict";
// tslint:disable variable-name
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mock = void 0;
var core_1 = require("@angular/core");
var mock_helper_stub_1 = __importDefault(require("../mock-helper/mock-helper.stub"));
var mock_instance_apply_1 = __importDefault(require("../mock-instance/mock-instance-apply"));
var helper_mock_service_1 = __importDefault(require("../mock-service/helper.mock-service"));
var core_define_property_1 = __importDefault(require("./core.define-property"));
var core_form_1 = __importDefault(require("./core.form"));
var core_helpers_1 = require("./core.helpers");
var func_is_mock_1 = __importDefault(require("./func.is-mock"));
var mock_control_value_accessor_proxy_1 = require("./mock-control-value-accessor-proxy");
var ng_mocks_universe_1 = __importDefault(require("./ng-mocks-universe"));
var setValueAccessor = function (instance, ngControl) {
    if (ngControl && !ngControl.valueAccessor && instance.__ngMocksConfig.setControlValueAccessor) {
        try {
            ngControl.valueAccessor = new mock_control_value_accessor_proxy_1.MockControlValueAccessorProxy(instance.__ngMocksCtor);
        }
        catch (e) {
            // nothing to do.
        }
    }
};
// connecting to NG_VALUE_ACCESSOR
var installValueAccessor = function (ngControl, instance) {
    if (!ngControl.valueAccessor.instance && ngControl.valueAccessor.target === instance.__ngMocksCtor) {
        ngControl.valueAccessor.instance = instance;
        helper_mock_service_1.default.mock(instance, 'registerOnChange');
        helper_mock_service_1.default.mock(instance, 'registerOnTouched');
        helper_mock_service_1.default.mock(instance, 'setDisabledState');
        helper_mock_service_1.default.mock(instance, 'writeValue');
        instance.__ngMocksConfig.isControlValueAccessor = true;
    }
};
// connecting to NG_VALIDATORS
// connecting to NG_ASYNC_VALIDATORS
var installValidator = function (validators, instance) {
    var e_1, _a;
    try {
        for (var validators_1 = __values(validators), validators_1_1 = validators_1.next(); !validators_1_1.done; validators_1_1 = validators_1.next()) {
            var validator = validators_1_1.value;
            if (!validator.instance && validator.target === instance.__ngMocksCtor) {
                validator.instance = instance;
                helper_mock_service_1.default.mock(instance, 'registerOnValidatorChange');
                helper_mock_service_1.default.mock(instance, 'validate');
                instance.__ngMocksConfig.isValidator = true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (validators_1_1 && !validators_1_1.done && (_a = validators_1.return)) _a.call(validators_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
var applyNgValueAccessor = function (instance, ngControl) {
    setValueAccessor(instance, ngControl);
    try {
        // istanbul ignore else
        if (ngControl) {
            installValueAccessor(ngControl, instance);
            installValidator(ngControl._rawValidators, instance);
            installValidator(ngControl._rawAsyncValidators, instance);
        }
    }
    catch (e) {
        // nothing to do.
    }
};
var applyOutputs = function (instance) {
    var e_2, _a, e_3, _b;
    var mockOutputs = [];
    try {
        for (var _c = __values(instance.__ngMocksConfig.outputs || []), _d = _c.next(); !_d.done; _d = _c.next()) {
            var output = _d.value;
            mockOutputs.push(output.split(':')[0]);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        for (var mockOutputs_1 = __values(mockOutputs), mockOutputs_1_1 = mockOutputs_1.next(); !mockOutputs_1_1.done; mockOutputs_1_1 = mockOutputs_1.next()) {
            var output = mockOutputs_1_1.value;
            if (instance[output] || Object.getOwnPropertyDescriptor(instance, output)) {
                continue;
            }
            instance[output] = new core_1.EventEmitter();
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (mockOutputs_1_1 && !mockOutputs_1_1.done && (_b = mockOutputs_1.return)) _b.call(mockOutputs_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
};
var applyPrototype = function (instance, prototype) {
    var e_4, _a;
    try {
        for (var _b = __values(__spreadArray(__spreadArray([], __read(helper_mock_service_1.default.extractMethodsFromPrototype(prototype)), false), __read(helper_mock_service_1.default.extractPropertiesFromPrototype(prototype)), false)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var prop = _c.value;
            var descriptor = helper_mock_service_1.default.extractPropertyDescriptor(prototype, prop);
            helper_mock_service_1.default.definePropertyDescriptor(instance, prop, descriptor);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_4) throw e_4.error; }
    }
};
var applyMethods = function (instance, prototype) {
    var e_5, _a;
    try {
        for (var _b = __values(helper_mock_service_1.default.extractMethodsFromPrototype(prototype)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var method = _c.value;
            if (instance[method] || Object.getOwnPropertyDescriptor(instance, method)) {
                continue;
            }
            helper_mock_service_1.default.mock(instance, method);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_5) throw e_5.error; }
    }
};
var applyProps = function (instance, prototype) {
    var e_6, _a;
    try {
        for (var _b = __values(helper_mock_service_1.default.extractPropertiesFromPrototype(prototype)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var prop = _c.value;
            if (instance[prop] || Object.getOwnPropertyDescriptor(instance, prop)) {
                continue;
            }
            helper_mock_service_1.default.mock(instance, prop, 'get');
            helper_mock_service_1.default.mock(instance, prop, 'set');
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_6) throw e_6.error; }
    }
};
var applyOverrides = function (instance, mockOf, injector) {
    var e_7, _a;
    var configGlobal = ng_mocks_universe_1.default.getOverrides().get(mockOf);
    var callbacks = configGlobal ? (0, core_helpers_1.mapValues)(configGlobal) : [];
    if (instance.__ngMocksConfig.init) {
        callbacks.push(instance.__ngMocksConfig.init);
    }
    callbacks.push.apply(callbacks, __spreadArray([], __read((0, mock_instance_apply_1.default)(mockOf)), false));
    try {
        for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
            var callback = callbacks_1_1.value;
            var overrides = callback(instance, injector);
            if (!overrides) {
                continue;
            }
            (0, mock_helper_stub_1.default)(instance, overrides);
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
        }
        finally { if (e_7) throw e_7.error; }
    }
};
var Mock = /** @class */ (function () {
    function Mock(injector, ngControl) {
        var e_8, _a;
        if (injector === void 0) { injector = null; }
        if (ngControl === void 0) { ngControl = null; }
        var mockOf = this.constructor.mockOf;
        (0, core_define_property_1.default)(this, '__ngMocksInjector', injector);
        (0, core_define_property_1.default)(this, '__ngMocksCtor', this.constructor);
        try {
            for (var _b = __values(this.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                (0, core_define_property_1.default)(this, "__ngMocksVcr_" + key, undefined);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_8) throw e_8.error; }
        }
        // istanbul ignore else
        if ((0, func_is_mock_1.default)(this)) {
            applyNgValueAccessor(this, ngControl);
            applyOutputs(this);
            applyPrototype(this, Object.getPrototypeOf(this));
            applyMethods(this, mockOf.prototype);
            applyProps(this, mockOf.prototype);
        }
        // and faking prototype
        Object.setPrototypeOf(this, mockOf.prototype);
        applyOverrides(this, mockOf, injector !== null && injector !== void 0 ? injector : undefined);
    }
    return Mock;
}());
exports.Mock = Mock;
(0, core_define_property_1.default)(Mock, 'parameters', [
    [core_1.Injector, new core_1.Optional()],
    [core_form_1.default.NgControl || /* istanbul ignore next */ (function () { return undefined; }), new core_1.Optional(), new core_1.Self()],
]);
//# sourceMappingURL=data:application/json;base64,