"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendClass = exports.extractDependency = exports.mapEntries = exports.mapValues = exports.mapKeys = exports.flatten = exports.getInjection = exports.getTestBedInjection = void 0;
var testing_1 = require("@angular/core/testing");
var core_define_property_1 = __importDefault(require("./core.define-property"));
var core_reflect_jit_1 = __importDefault(require("./core.reflect.jit"));
var getTestBedInjection = function (token) {
    var testBed = (0, testing_1.getTestBed)();
    try {
        // istanbul ignore next
        return testBed.inject ? testBed.inject(token) : testBed.get(token);
    }
    catch (e) {
        return undefined;
    }
};
exports.getTestBedInjection = getTestBedInjection;
var getInjection = function (token) {
    var testBed = (0, testing_1.getTestBed)();
    // istanbul ignore next
    return testBed.inject ? testBed.inject(token) : testBed.get(token);
};
exports.getInjection = getInjection;
var flatten = function (values, result) {
    var e_1, _a;
    if (result === void 0) { result = []; }
    if (Array.isArray(values)) {
        try {
            for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                var value = values_1_1.value;
                (0, exports.flatten)(value, result);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    else {
        result.push(values);
    }
    return result;
};
exports.flatten = flatten;
var mapKeys = function (set) {
    var result = [];
    set.forEach(function (_, value) { return result.push(value); });
    return result;
};
exports.mapKeys = mapKeys;
var mapValues = function (set) {
    var result = [];
    set.forEach(function (value) { return result.push(value); });
    return result;
};
exports.mapValues = mapValues;
var mapEntries = function (set) {
    var result = [];
    set.forEach(function (value, key) { return result.push([key, value]); });
    return result;
};
exports.mapEntries = mapEntries;
var extractDependencyArray = function (deps, set) {
    var e_2, _a;
    try {
        for (var deps_1 = __values(deps), deps_1_1 = deps_1.next(); !deps_1_1.done; deps_1_1 = deps_1.next()) {
            var flag = deps_1_1.value;
            var name_1 = flag && typeof flag === 'object' ? flag.ngMetadataName : undefined;
            if (name_1 === 'Optional' || name_1 === 'SkipSelf' || name_1 === 'Self') {
                continue;
            }
            set.add(flag);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (deps_1_1 && !deps_1_1.done && (_a = deps_1.return)) _a.call(deps_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
};
// Accepts an array of dependencies from providers, skips injections flags,
// and adds the providers to the set.
var extractDependency = function (deps, set) {
    var e_3, _a;
    if (!set) {
        return;
    }
    try {
        for (var deps_2 = __values(deps), deps_2_1 = deps_2.next(); !deps_2_1.done; deps_2_1 = deps_2.next()) {
            var dep = deps_2_1.value;
            if (!Array.isArray(dep)) {
                set.add(dep);
                continue;
            }
            extractDependencyArray(dep, set);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (deps_2_1 && !deps_2_1.done && (_a = deps_2.return)) _a.call(deps_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
};
exports.extractDependency = extractDependency;
var extendClassicClass = function (base) {
    var child;
    // First we try to eval es2015 style and if it fails to use es5 transpilation in the catch block.
    // The next step is to respect constructor parameters as the parent class via jitReflector.
    window.ngMocksParent = base;
    // istanbul ignore next
    try {
        // tslint:disable-next-line no-eval
        eval("\n      class MockMiddleware extends window.ngMocksParent {}\n      window.ngMocksResult = MockMiddleware\n    ");
        child = window.ngMocksResult;
    }
    catch (e) {
        var MockMiddleware = /** @class */ (function (_super) {
            __extends(MockMiddleware, _super);
            function MockMiddleware() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return MockMiddleware;
        }(window.ngMocksParent));
        child = MockMiddleware;
    }
    window.ngMocksParent = undefined;
    return child;
};
var extendClass = function (base) {
    var child = extendClassicClass(base);
    (0, core_define_property_1.default)(child, 'name', "MockMiddleware" + base.name, true);
    var parameters = (0, core_reflect_jit_1.default)().parameters(base);
    if (parameters.length) {
        (0, core_define_property_1.default)(child, 'parameters', __spreadArray([], __read(parameters), false));
    }
    return child;
};
exports.extendClass = extendClass;
//# sourceMappingURL=data:application/json;base64,