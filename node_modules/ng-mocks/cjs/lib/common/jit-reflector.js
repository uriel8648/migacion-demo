"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JitReflector = void 0;
var core_1 = require("@angular/core");
var JitReflector = /** @class */ (function () {
    function JitReflector() {
        this.resolveExternalReference = function (ref) { return ref.runtime; };
        this.reflectionCapabilities = new core_1.ɵReflectionCapabilities();
    }
    JitReflector.prototype.annotations = function (typeOrFunc) {
        return this.reflectionCapabilities.annotations(typeOrFunc);
    };
    JitReflector.prototype.componentModuleUrl = function (type) {
        return "./" + (0, core_1.ɵstringify)(type);
    };
    // This does not exist in Angular 5.1.x but is required to exist in 5.2+
    JitReflector.prototype.guards = function () {
        return {};
    };
    JitReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    };
    JitReflector.prototype.parameters = function (typeOrFunc) {
        return this.reflectionCapabilities.parameters(typeOrFunc);
    };
    JitReflector.prototype.propMetadata = function (typeOrFunc) {
        return this.reflectionCapabilities.propMetadata(typeOrFunc);
    };
    JitReflector.prototype.shallowAnnotations = function () {
        throw new Error('Not supported in JIT mode');
    };
    JitReflector.prototype.tryAnnotations = function (typeOrFunc) {
        return this.annotations(typeOrFunc);
    };
    return JitReflector;
}());
exports.JitReflector = JitReflector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaml0LXJlZmxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9jb21tb24vaml0LXJlZmxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxzQ0FBMkc7QUFFM0c7SUFHRTtRQTZCTyw2QkFBd0IsR0FBRyxVQUFDLEdBQXNCLElBQVUsT0FBQSxHQUFHLENBQUMsT0FBTyxFQUFYLENBQVcsQ0FBQztRQTVCN0UsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksOEJBQXNCLEVBQUUsQ0FBQztJQUM3RCxDQUFDO0lBRU0sa0NBQVcsR0FBbEIsVUFBbUIsVUFBZTtRQUNoQyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVNLHlDQUFrQixHQUF6QixVQUEwQixJQUFTO1FBQ2pDLE9BQU8sT0FBSyxJQUFBLGlCQUFTLEVBQUMsSUFBSSxDQUFHLENBQUM7SUFDaEMsQ0FBQztJQUVELHdFQUF3RTtJQUNqRSw2QkFBTSxHQUFiO1FBQ0UsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU0sdUNBQWdCLEdBQXZCLFVBQXdCLElBQVMsRUFBRSxVQUFrQjtRQUNuRCxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVNLGlDQUFVLEdBQWpCLFVBQWtCLFVBQWU7UUFDL0IsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTSxtQ0FBWSxHQUFuQixVQUFvQixVQUFlO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBSU0seUNBQWtCLEdBQXpCO1FBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSxxQ0FBYyxHQUFyQixVQUFzQixVQUFlO1FBQ25DLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDO0FBekNZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcGlsZVJlZmxlY3RvciwgRXh0ZXJuYWxSZWZlcmVuY2UgfSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5pbXBvcnQgeyDJtVJlZmxlY3Rpb25DYXBhYmlsaXRpZXMgYXMgUmVmbGVjdGlvbkNhcGFiaWxpdGllcywgybVzdHJpbmdpZnkgYXMgc3RyaW5naWZ5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBKaXRSZWZsZWN0b3IgaW1wbGVtZW50cyBDb21waWxlUmVmbGVjdG9yIHtcbiAgcHJvdGVjdGVkIHJlZmxlY3Rpb25DYXBhYmlsaXRpZXM6IFJlZmxlY3Rpb25DYXBhYmlsaXRpZXM7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcyA9IG5ldyBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzKCk7XG4gIH1cblxuICBwdWJsaWMgYW5ub3RhdGlvbnModHlwZU9yRnVuYzogYW55KTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuYW5ub3RhdGlvbnModHlwZU9yRnVuYyk7XG4gIH1cblxuICBwdWJsaWMgY29tcG9uZW50TW9kdWxlVXJsKHR5cGU6IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAuLyR7c3RyaW5naWZ5KHR5cGUpfWA7XG4gIH1cblxuICAvLyBUaGlzIGRvZXMgbm90IGV4aXN0IGluIEFuZ3VsYXIgNS4xLnggYnV0IGlzIHJlcXVpcmVkIHRvIGV4aXN0IGluIDUuMitcbiAgcHVibGljIGd1YXJkcygpOiBSZWNvcmQ8a2V5b2YgYW55LCBhbnk+IHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBwdWJsaWMgaGFzTGlmZWN5Y2xlSG9vayh0eXBlOiBhbnksIGxjUHJvcGVydHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuaGFzTGlmZWN5Y2xlSG9vayh0eXBlLCBsY1Byb3BlcnR5KTtcbiAgfVxuXG4gIHB1YmxpYyBwYXJhbWV0ZXJzKHR5cGVPckZ1bmM6IGFueSk6IGFueVtdW10ge1xuICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucGFyYW1ldGVycyh0eXBlT3JGdW5jKTtcbiAgfVxuXG4gIHB1YmxpYyBwcm9wTWV0YWRhdGEodHlwZU9yRnVuYzogYW55KTogeyBba2V5OiBzdHJpbmddOiBhbnlbXSB9IHtcbiAgICByZXR1cm4gdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnByb3BNZXRhZGF0YSh0eXBlT3JGdW5jKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNvbHZlRXh0ZXJuYWxSZWZlcmVuY2UgPSAocmVmOiBFeHRlcm5hbFJlZmVyZW5jZSk6IGFueSA9PiByZWYucnVudGltZTtcblxuICBwdWJsaWMgc2hhbGxvd0Fubm90YXRpb25zKCk6IGFueVtdIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgaW4gSklUIG1vZGUnKTtcbiAgfVxuXG4gIHB1YmxpYyB0cnlBbm5vdGF0aW9ucyh0eXBlT3JGdW5jOiBhbnkpOiBhbnlbXSB7XG4gICAgcmV0dXJuIHRoaXMuYW5ub3RhdGlvbnModHlwZU9yRnVuYyk7XG4gIH1cbn1cbiJdfQ==