"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNgDef = void 0;
var func_is_ng_injection_token_1 = require("./func.is-ng-injection-token");
var func_is_ng_type_1 = require("./func.is-ng-type");
var isModuleCheck = function (def, ngType) { return (!ngType || ngType === 'm') && (0, func_is_ng_type_1.isNgType)(def, 'NgModule'); };
var isComponentCheck = function (def, ngType) {
    return (!ngType || ngType === 'c') && (0, func_is_ng_type_1.isNgType)(def, 'Component');
};
var isDirectiveCheck = function (def, ngType) {
    return (!ngType || ngType === 'd') && (0, func_is_ng_type_1.isNgType)(def, 'Directive');
};
var isPipeCheck = function (def, ngType) { return (!ngType || ngType === 'p') && (0, func_is_ng_type_1.isNgType)(def, 'Pipe'); };
var isInjectableCheck = function (def, ngType) {
    return (!ngType || ngType === 'i') && (0, func_is_ng_type_1.isNgType)(def, 'Injectable');
};
function isNgDef(declaration, ngType) {
    if (ngType === 't') {
        return (0, func_is_ng_injection_token_1.isNgInjectionToken)(declaration);
    }
    var isModule = isModuleCheck(declaration, ngType);
    var isComponent = isComponentCheck(declaration, ngType);
    var isDirective = isDirectiveCheck(declaration, ngType);
    var isPipe = isPipeCheck(declaration, ngType);
    var isInjectable = isInjectableCheck(declaration, ngType);
    return isModule || isComponent || isDirective || isPipe || isInjectable;
}
exports.isNgDef = isNgDef;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5pcy1uZy1kZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvY29tbW9uL2Z1bmMuaXMtbmctZGVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDJFQUFrRTtBQUNsRSxxREFBNkM7QUFFN0MsSUFBTSxhQUFhLEdBQUcsVUFBQyxHQUFRLEVBQUUsTUFBZSxJQUFjLE9BQUEsQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksSUFBQSwwQkFBUSxFQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsRUFBeEQsQ0FBd0QsQ0FBQztBQUN2SCxJQUFNLGdCQUFnQixHQUFHLFVBQUMsR0FBUSxFQUFFLE1BQWU7SUFDakQsT0FBQSxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFBLDBCQUFRLEVBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQztBQUF6RCxDQUF5RCxDQUFDO0FBQzVELElBQU0sZ0JBQWdCLEdBQUcsVUFBQyxHQUFRLEVBQUUsTUFBZTtJQUNqRCxPQUFBLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUEsMEJBQVEsRUFBQyxHQUFHLEVBQUUsV0FBVyxDQUFDO0FBQXpELENBQXlELENBQUM7QUFDNUQsSUFBTSxXQUFXLEdBQUcsVUFBQyxHQUFRLEVBQUUsTUFBZSxJQUFjLE9BQUEsQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksSUFBQSwwQkFBUSxFQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsRUFBcEQsQ0FBb0QsQ0FBQztBQUNqSCxJQUFNLGlCQUFpQixHQUFHLFVBQUMsR0FBUSxFQUFFLE1BQWU7SUFDbEQsT0FBQSxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxJQUFBLDBCQUFRLEVBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQztBQUExRCxDQUEwRCxDQUFDO0FBbUQ3RCxTQUFnQixPQUFPLENBQUMsV0FBZ0IsRUFBRSxNQUFlO0lBQ3ZELElBQUksTUFBTSxLQUFLLEdBQUcsRUFBRTtRQUNsQixPQUFPLElBQUEsK0NBQWtCLEVBQUMsV0FBVyxDQUFDLENBQUM7S0FDeEM7SUFFRCxJQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3BELElBQU0sV0FBVyxHQUFHLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxRCxJQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUQsSUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoRCxJQUFNLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFNUQsT0FBTyxRQUFRLElBQUksV0FBVyxJQUFJLFdBQVcsSUFBSSxNQUFNLElBQUksWUFBWSxDQUFDO0FBQzFFLENBQUM7QUFaRCwwQkFZQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFR5cGUgfSBmcm9tICcuL2NvcmUudHlwZXMnO1xuaW1wb3J0IHsgaXNOZ0luamVjdGlvblRva2VuIH0gZnJvbSAnLi9mdW5jLmlzLW5nLWluamVjdGlvbi10b2tlbic7XG5pbXBvcnQgeyBpc05nVHlwZSB9IGZyb20gJy4vZnVuYy5pcy1uZy10eXBlJztcblxuY29uc3QgaXNNb2R1bGVDaGVjayA9IChkZWY6IGFueSwgbmdUeXBlPzogc3RyaW5nKTogYm9vbGVhbiA9PiAoIW5nVHlwZSB8fCBuZ1R5cGUgPT09ICdtJykgJiYgaXNOZ1R5cGUoZGVmLCAnTmdNb2R1bGUnKTtcbmNvbnN0IGlzQ29tcG9uZW50Q2hlY2sgPSAoZGVmOiBhbnksIG5nVHlwZT86IHN0cmluZyk6IGJvb2xlYW4gPT5cbiAgKCFuZ1R5cGUgfHwgbmdUeXBlID09PSAnYycpICYmIGlzTmdUeXBlKGRlZiwgJ0NvbXBvbmVudCcpO1xuY29uc3QgaXNEaXJlY3RpdmVDaGVjayA9IChkZWY6IGFueSwgbmdUeXBlPzogc3RyaW5nKTogYm9vbGVhbiA9PlxuICAoIW5nVHlwZSB8fCBuZ1R5cGUgPT09ICdkJykgJiYgaXNOZ1R5cGUoZGVmLCAnRGlyZWN0aXZlJyk7XG5jb25zdCBpc1BpcGVDaGVjayA9IChkZWY6IGFueSwgbmdUeXBlPzogc3RyaW5nKTogYm9vbGVhbiA9PiAoIW5nVHlwZSB8fCBuZ1R5cGUgPT09ICdwJykgJiYgaXNOZ1R5cGUoZGVmLCAnUGlwZScpO1xuY29uc3QgaXNJbmplY3RhYmxlQ2hlY2sgPSAoZGVmOiBhbnksIG5nVHlwZT86IHN0cmluZyk6IGJvb2xlYW4gPT5cbiAgKCFuZ1R5cGUgfHwgbmdUeXBlID09PSAnaScpICYmIGlzTmdUeXBlKGRlZiwgJ0luamVjdGFibGUnKTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIGNsYXNzIHdhcyBkZWNvcmF0ZWQgYnkgQE5nTW9kdWxlLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9uZy1tb2Nrcy5zdWRvLmV1L2FwaS9oZWxwZXJzL2lzTmdEZWZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmdEZWYoZGVjbGFyYXRpb246IGFueSwgbmdUeXBlOiAnbScpOiBkZWNsYXJhdGlvbiBpcyBUeXBlPGFueT47XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBjbGFzcyB3YXMgZGVjb3JhdGVkIGJ5IEBDb21wb25lbnQuXG4gKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL2hlbHBlcnMvaXNOZ0RlZlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOZ0RlZihkZWNsYXJhdGlvbjogYW55LCBuZ1R5cGU6ICdjJyk6IGRlY2xhcmF0aW9uIGlzIFR5cGU8YW55PjtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIGNsYXNzIHdhcyBkZWNvcmF0ZWQgYnkgQERpcmVjdGl2ZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvaGVscGVycy9pc05nRGVmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05nRGVmKGRlY2xhcmF0aW9uOiBhbnksIG5nVHlwZTogJ2QnKTogZGVjbGFyYXRpb24gaXMgVHlwZTxhbnk+O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGEgY2xhc3Mgd2FzIGRlY29yYXRlZCBieSBAUGlwZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvaGVscGVycy9pc05nRGVmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05nRGVmKGRlY2xhcmF0aW9uOiBhbnksIG5nVHlwZTogJ3AnKTogZGVjbGFyYXRpb24gaXMgVHlwZTxQaXBlVHJhbnNmb3JtPjtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIGNsYXNzIHdhcyBkZWNvcmF0ZWQgYnkgQEluamVjdGFibGUuXG4gKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL2hlbHBlcnMvaXNOZ0RlZlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOZ0RlZihkZWNsYXJhdGlvbjogYW55LCBuZ1R5cGU6ICdpJyk6IGRlY2xhcmF0aW9uIGlzIFR5cGU8YW55PjtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIGNsYXNzIHdhcyBkZWNvcmF0ZWQgYnkgQEluamVjdGFibGUuXG4gKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL2hlbHBlcnMvaXNOZ0RlZlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOZ0RlZihkZWNsYXJhdGlvbjogYW55LCBuZ1R5cGU6ICd0Jyk6IGRlY2xhcmF0aW9uIGlzIEluamVjdGlvblRva2VuPGFueT47XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBjbGFzcyB3YXMgZGVjb3JhdGVkIGJ5IGEgbmcgdHlwZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvaGVscGVycy9pc05nRGVmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05nRGVmKGRlY2xhcmF0aW9uOiBhbnkpOiBkZWNsYXJhdGlvbiBpcyBUeXBlPGFueT47XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05nRGVmKGRlY2xhcmF0aW9uOiBhbnksIG5nVHlwZT86IHN0cmluZyk6IGRlY2xhcmF0aW9uIGlzIFR5cGU8YW55PiB7XG4gIGlmIChuZ1R5cGUgPT09ICd0Jykge1xuICAgIHJldHVybiBpc05nSW5qZWN0aW9uVG9rZW4oZGVjbGFyYXRpb24pO1xuICB9XG5cbiAgY29uc3QgaXNNb2R1bGUgPSBpc01vZHVsZUNoZWNrKGRlY2xhcmF0aW9uLCBuZ1R5cGUpO1xuICBjb25zdCBpc0NvbXBvbmVudCA9IGlzQ29tcG9uZW50Q2hlY2soZGVjbGFyYXRpb24sIG5nVHlwZSk7XG4gIGNvbnN0IGlzRGlyZWN0aXZlID0gaXNEaXJlY3RpdmVDaGVjayhkZWNsYXJhdGlvbiwgbmdUeXBlKTtcbiAgY29uc3QgaXNQaXBlID0gaXNQaXBlQ2hlY2soZGVjbGFyYXRpb24sIG5nVHlwZSk7XG4gIGNvbnN0IGlzSW5qZWN0YWJsZSA9IGlzSW5qZWN0YWJsZUNoZWNrKGRlY2xhcmF0aW9uLCBuZ1R5cGUpO1xuXG4gIHJldHVybiBpc01vZHVsZSB8fCBpc0NvbXBvbmVudCB8fCBpc0RpcmVjdGl2ZSB8fCBpc1BpcGUgfHwgaXNJbmplY3RhYmxlO1xufVxuIl19