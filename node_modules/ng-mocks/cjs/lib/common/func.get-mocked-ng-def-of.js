"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMockedNgDefOf = void 0;
var core_injector_1 = __importDefault(require("./core.injector"));
var core_tokens_1 = require("./core.tokens");
var func_is_mocked_ng_def_of_1 = require("./func.is-mocked-ng-def-of");
var ng_mocks_universe_1 = __importDefault(require("./ng-mocks-universe"));
var getMock = function (declaration, source, mocks) {
    if (mocks && !mocks.has(source)) {
        throw new Error("There is no mock for " + source.name);
    }
    var mock = mocks ? mocks.get(source) : undefined;
    // If we are not in the MockBuilder env we can rely on the current cache.
    if (!mock && source !== declaration) {
        mock = declaration;
    }
    else if (!mock && ng_mocks_universe_1.default.cacheDeclarations.has(source)) {
        mock = ng_mocks_universe_1.default.cacheDeclarations.get(source);
    }
    return mock;
};
function getMockedNgDefOf(declaration, type) {
    var source = declaration.mockOf ? declaration.mockOf : declaration;
    var mocks = (0, core_injector_1.default)(core_tokens_1.NG_MOCKS);
    var mock = getMock(declaration, source, mocks);
    if (mock && !type) {
        return mock;
    }
    if (mock && type && (0, func_is_mocked_ng_def_of_1.isMockedNgDefOf)(mock, source, type)) {
        return mock;
    }
    throw new Error("There is no mock for " + source.name);
}
exports.getMockedNgDefOf = getMockedNgDefOf;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5nZXQtbW9ja2VkLW5nLWRlZi1vZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9jb21tb24vZnVuYy5nZXQtbW9ja2VkLW5nLWRlZi1vZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxrRUFBMkM7QUFDM0MsNkNBQXlDO0FBRXpDLHVFQUE2RDtBQUM3RCwwRUFBa0Q7QUFFbEQsSUFBTSxPQUFPLEdBQUcsVUFBQyxXQUFnQixFQUFFLE1BQVcsRUFBRSxLQUFxQjtJQUNuRSxJQUFJLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBd0IsTUFBTSxDQUFDLElBQU0sQ0FBQyxDQUFDO0tBQ3hEO0lBQ0QsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFakQseUVBQXlFO0lBQ3pFLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTSxLQUFLLFdBQVcsRUFBRTtRQUNuQyxJQUFJLEdBQUcsV0FBVyxDQUFDO0tBQ3BCO1NBQU0sSUFBSSxDQUFDLElBQUksSUFBSSwyQkFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNqRSxJQUFJLEdBQUcsMkJBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdEQ7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQXFDRixTQUFnQixnQkFBZ0IsQ0FBQyxXQUFnQixFQUFFLElBQVU7SUFDM0QsSUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3JFLElBQU0sS0FBSyxHQUFHLElBQUEsdUJBQVksRUFBQyxzQkFBUSxDQUFDLENBQUM7SUFFckMsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDakIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFBLDBDQUFlLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRTtRQUN2RCxPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBd0IsTUFBTSxDQUFDLElBQU0sQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFiRCw0Q0FhQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vY2tlZENvbXBvbmVudCB9IGZyb20gJy4uL21vY2stY29tcG9uZW50L3R5cGVzJztcbmltcG9ydCB7IE1vY2tlZERpcmVjdGl2ZSB9IGZyb20gJy4uL21vY2stZGlyZWN0aXZlL3R5cGVzJztcbmltcG9ydCB7IE1vY2tlZE1vZHVsZSB9IGZyb20gJy4uL21vY2stbW9kdWxlL3R5cGVzJztcbmltcG9ydCB7IE1vY2tlZFBpcGUgfSBmcm9tICcuLi9tb2NrLXBpcGUvdHlwZXMnO1xuXG5pbXBvcnQgY29yZUluamVjdG9yIGZyb20gJy4vY29yZS5pbmplY3Rvcic7XG5pbXBvcnQgeyBOR19NT0NLUyB9IGZyb20gJy4vY29yZS50b2tlbnMnO1xuaW1wb3J0IHsgQW55VHlwZSwgVHlwZSB9IGZyb20gJy4vY29yZS50eXBlcyc7XG5pbXBvcnQgeyBpc01vY2tlZE5nRGVmT2YgfSBmcm9tICcuL2Z1bmMuaXMtbW9ja2VkLW5nLWRlZi1vZic7XG5pbXBvcnQgbmdNb2Nrc1VuaXZlcnNlIGZyb20gJy4vbmctbW9ja3MtdW5pdmVyc2UnO1xuXG5jb25zdCBnZXRNb2NrID0gKGRlY2xhcmF0aW9uOiBhbnksIHNvdXJjZTogYW55LCBtb2Nrcz86IE1hcDxhbnksIGFueT4pID0+IHtcbiAgaWYgKG1vY2tzICYmICFtb2Nrcy5oYXMoc291cmNlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gbW9jayBmb3IgJHtzb3VyY2UubmFtZX1gKTtcbiAgfVxuICBsZXQgbW9jayA9IG1vY2tzID8gbW9ja3MuZ2V0KHNvdXJjZSkgOiB1bmRlZmluZWQ7XG5cbiAgLy8gSWYgd2UgYXJlIG5vdCBpbiB0aGUgTW9ja0J1aWxkZXIgZW52IHdlIGNhbiByZWx5IG9uIHRoZSBjdXJyZW50IGNhY2hlLlxuICBpZiAoIW1vY2sgJiYgc291cmNlICE9PSBkZWNsYXJhdGlvbikge1xuICAgIG1vY2sgPSBkZWNsYXJhdGlvbjtcbiAgfSBlbHNlIGlmICghbW9jayAmJiBuZ01vY2tzVW5pdmVyc2UuY2FjaGVEZWNsYXJhdGlvbnMuaGFzKHNvdXJjZSkpIHtcbiAgICBtb2NrID0gbmdNb2Nrc1VuaXZlcnNlLmNhY2hlRGVjbGFyYXRpb25zLmdldChzb3VyY2UpO1xuICB9XG5cbiAgcmV0dXJuIG1vY2s7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBkZWYgb2YgYSBtb2NrIG1vZHVsZSBiYXNlZCBvbiBhIG1vY2sgbW9kdWxlIG9yIGEgc291cmNlIG1vZHVsZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvaGVscGVycy9nZXRNb2NrZWROZ0RlZk9mXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2NrZWROZ0RlZk9mPFQ+KGRlY2xhcmF0aW9uOiBBbnlUeXBlPFQ+LCB0eXBlOiAnbScpOiBUeXBlPE1vY2tlZE1vZHVsZTxUPj47XG5cbi8qKlxuICogUmV0dXJucyBhIGRlZiBvZiBhIG1vY2sgY29tcG9uZW50IGJhc2VkIG9uIGEgbW9jayBjb21wb25lbnQgb3IgYSBzb3VyY2UgY29tcG9uZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9uZy1tb2Nrcy5zdWRvLmV1L2FwaS9oZWxwZXJzL2dldE1vY2tlZE5nRGVmT2ZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1vY2tlZE5nRGVmT2Y8VD4oZGVjbGFyYXRpb246IEFueVR5cGU8VD4sIHR5cGU6ICdjJyk6IFR5cGU8TW9ja2VkQ29tcG9uZW50PFQ+PjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZGVmIG9mIGEgbW9jayBkaXJlY3RpdmUgYmFzZWQgb24gYSBtb2NrIGRpcmVjdGl2ZSBvciBhIHNvdXJjZSBkaXJlY3RpdmUuXG4gKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL2hlbHBlcnMvZ2V0TW9ja2VkTmdEZWZPZlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9ja2VkTmdEZWZPZjxUPihkZWNsYXJhdGlvbjogQW55VHlwZTxUPiwgdHlwZTogJ2QnKTogVHlwZTxNb2NrZWREaXJlY3RpdmU8VD4+O1xuXG4vKipcbiAqIFJldHVybnMgYSBkZWYgb2YgYSBtb2NrIHBpcGUgYmFzZWQgb24gYSBtb2NrIHBpcGUgb3IgYSBzb3VyY2UgcGlwZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvaGVscGVycy9nZXRNb2NrZWROZ0RlZk9mXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2NrZWROZ0RlZk9mPFQ+KGRlY2xhcmF0aW9uOiBBbnlUeXBlPFQ+LCB0eXBlOiAncCcpOiBUeXBlPE1vY2tlZFBpcGU8VD4+O1xuXG4vKipcbiAqIFJldHVybnMgYSBkZWYgb2YgYSBtb2NrIGNsYXNzIGJhc2VkIG9uIGEgbW9jayBjbGFzcyBvciBhIHNvdXJjZSBjbGFzcyBkZWNvcmF0ZWQgYnkgYSBuZyB0eXBlLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9uZy1tb2Nrcy5zdWRvLmV1L2FwaS9oZWxwZXJzL2dldE1vY2tlZE5nRGVmT2ZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1vY2tlZE5nRGVmT2YoZGVjbGFyYXRpb246IEFueVR5cGU8YW55Pik6IFR5cGU8YW55PjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1vY2tlZE5nRGVmT2YoZGVjbGFyYXRpb246IGFueSwgdHlwZT86IGFueSk6IGFueSB7XG4gIGNvbnN0IHNvdXJjZSA9IGRlY2xhcmF0aW9uLm1vY2tPZiA/IGRlY2xhcmF0aW9uLm1vY2tPZiA6IGRlY2xhcmF0aW9uO1xuICBjb25zdCBtb2NrcyA9IGNvcmVJbmplY3RvcihOR19NT0NLUyk7XG5cbiAgY29uc3QgbW9jayA9IGdldE1vY2soZGVjbGFyYXRpb24sIHNvdXJjZSwgbW9ja3MpO1xuICBpZiAobW9jayAmJiAhdHlwZSkge1xuICAgIHJldHVybiBtb2NrO1xuICB9XG4gIGlmIChtb2NrICYmIHR5cGUgJiYgaXNNb2NrZWROZ0RlZk9mKG1vY2ssIHNvdXJjZSwgdHlwZSkpIHtcbiAgICByZXR1cm4gbW9jaztcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gbW9jayBmb3IgJHtzb3VyY2UubmFtZX1gKTtcbn1cbiJdfQ==