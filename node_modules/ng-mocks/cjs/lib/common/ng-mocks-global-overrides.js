"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("@angular/core/testing");
var func_extract_tokens_1 = __importDefault(require("../mock-builder/func.extract-tokens"));
var get_override_def_1 = __importDefault(require("../mock-builder/promise/get-override-def"));
var mock_helper_1 = require("../mock-helper/mock-helper");
var mock_helper_faster_install_1 = __importDefault(require("../mock-helper/mock-helper.faster-install"));
var mock_provider_1 = require("../mock-provider/mock-provider");
var core_define_property_1 = __importDefault(require("./core.define-property"));
var core_helpers_1 = require("./core.helpers");
var core_reflect_meta_1 = __importDefault(require("./core.reflect.meta"));
var core_reflect_module_resolve_1 = __importDefault(require("./core.reflect.module-resolve"));
var core_reflect_provided_in_1 = __importDefault(require("./core.reflect.provided-in"));
var core_tokens_1 = require("./core.tokens");
var func_get_provider_1 = __importDefault(require("./func.get-provider"));
var func_is_ng_def_1 = require("./func.is-ng-def");
var func_is_ng_module_def_with_providers_1 = require("./func.is-ng-module-def-with-providers");
var ng_mocks_universe_1 = __importDefault(require("./ng-mocks-universe"));
var applyOverride = function (def, override) {
    if ((0, func_is_ng_def_1.isNgDef)(def, 'c')) {
        testing_1.TestBed.overrideComponent(def, override);
    }
    else if ((0, func_is_ng_def_1.isNgDef)(def, 'd')) {
        testing_1.TestBed.overrideDirective(def, override);
    }
    else if ((0, func_is_ng_def_1.isNgDef)(def, 'm')) {
        testing_1.TestBed.overrideModule(def, override);
    }
    if ((0, func_is_ng_def_1.isNgDef)(def, 't')) {
        testing_1.TestBed.overrideProvider(def, override);
    }
    else if ((0, func_is_ng_def_1.isNgDef)(def, 'i')) {
        testing_1.TestBed.overrideProvider(def, override);
    }
};
var applyOverrides = function (overrides) {
    var e_1, _a;
    try {
        for (var _b = __values((0, core_helpers_1.mapEntries)(overrides)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), def = _d[0], _e = __read(_d[1], 2), override = _e[0], original = _e[1];
            testing_1.TestBed.ngMocksOverrides.set(def, original);
            applyOverride(def, override);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
// Thanks Ivy and its TestBed.override - it does not clean up leftovers.
var applyNgMocksOverrides = function (testBed) {
    var e_2, _a;
    if (testBed.ngMocksOverrides) {
        mock_helper_1.ngMocks.flushTestBed();
        try {
            for (var _b = __values((0, core_helpers_1.mapEntries)(testBed.ngMocksOverrides)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), def = _d[0], original = _d[1];
                applyOverride(def, original);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        testBed.ngMocksOverrides = undefined;
    }
};
var initTestBed = function () {
    if (!testing_1.TestBed.ngMocksSelectors) {
        (0, core_define_property_1.default)(testing_1.TestBed, 'ngMocksSelectors', new Map());
    }
    // istanbul ignore else
    if (!testing_1.TestBed.ngMocksOverrides) {
        (0, core_define_property_1.default)(testing_1.TestBed, 'ngMocksOverrides', new Map());
    }
};
var generateTouchesKey = [
    'bootstrap',
    'declarations',
    'entryComponents',
    'exports',
    'imports',
    'providers',
    'viewProviders',
];
var generateTouches = function (moduleDef, touches) {
    var e_3, _a, e_4, _b;
    try {
        for (var generateTouchesKey_1 = __values(generateTouchesKey), generateTouchesKey_1_1 = generateTouchesKey_1.next(); !generateTouchesKey_1_1.done; generateTouchesKey_1_1 = generateTouchesKey_1.next()) {
            var key = generateTouchesKey_1_1.value;
            try {
                for (var _c = (e_4 = void 0, __values(moduleDef[key] ? (0, core_helpers_1.flatten)(moduleDef[key]) : [])), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var item = _d.value;
                    var def = (0, func_get_provider_1.default)(item);
                    if ((0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(def)) {
                        generateTouches(def, touches);
                        def = def.ngModule;
                    }
                    touches.add(def);
                    var meta = (0, core_reflect_meta_1.default)(def);
                    if (meta) {
                        generateTouches(meta, touches);
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (generateTouchesKey_1_1 && !generateTouchesKey_1_1.done && (_a = generateTouchesKey_1.return)) _a.call(generateTouchesKey_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
};
var defineTouches = function (testBed, moduleDef, knownTouches) {
    var _a;
    var touches = knownTouches;
    if (!touches && ng_mocks_universe_1.default.getDefaults().size) {
        touches = (0, func_extract_tokens_1.default)(testBed._providers || /* istanbul ignore next Ivy part */ ((_a = testBed._compiler) === null || _a === void 0 ? void 0 : _a.providers)).touches;
        if (!touches) {
            touches = new Set();
            moduleDef.providers = moduleDef.providers || [];
            moduleDef.providers.push({ provide: core_tokens_1.NG_MOCKS_TOUCHES, useValue: touches });
        }
        generateTouches(moduleDef, touches);
    }
    return touches;
};
var applyPlatformOverrideDef = function (def) {
    var ngModule = (0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(def) ? /* istanbul ignore next */ def.ngModule : def;
    if (testing_1.TestBed.ngMocksOverrides.has(ngModule)) {
        return;
    }
    var original = (0, core_reflect_module_resolve_1.default)(ngModule);
    var set = (0, get_override_def_1.default)(original);
    if (set) {
        testing_1.TestBed.ngMocksOverrides.set(ngModule, { set: original });
        testing_1.TestBed.overrideModule(ngModule, { set: set });
    }
};
var applyPlatformOverridesBasedOnProvidedIn = function (provide, touches) {
    var providedIn = (0, core_reflect_provided_in_1.default)(provide);
    if (!providedIn) {
        return;
    }
    // knownTouches present from MockBuilder and we can rely on it,
    // otherwise we have to override the provider always.
    if (typeof providedIn !== 'string' && !touches.has(providedIn)) {
        return;
    }
    testing_1.TestBed.ngMocksOverrides.set(provide, {});
    testing_1.TestBed.overrideProvider(provide, (0, mock_provider_1.MockProvider)(provide));
};
var applyPlatformOverridesBasedOnDefaults = function (touches) {
    var e_5, _a;
    try {
        for (var _b = __values((0, core_helpers_1.mapEntries)(ng_mocks_universe_1.default.getDefaults())), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), provide = _d[0], _e = __read(_d[1], 1), config = _e[0];
            if (config !== 'mock') {
                continue;
            }
            if (!(0, func_is_ng_def_1.isNgDef)(provide, 'i') && !(0, func_is_ng_def_1.isNgDef)(provide, 't')) {
                continue;
            }
            if (touches.has(provide)) {
                continue;
            }
            if (testing_1.TestBed.ngMocksOverrides.has(provide)) {
                continue;
            }
            applyPlatformOverridesBasedOnProvidedIn(provide, touches);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_5) throw e_5.error; }
    }
};
var applyPlatformOverrides = function (testBed, touches) {
    var e_6, _a;
    // istanbul ignore else
    if (testing_1.TestBed.ngMocksOverrides) {
        var backup = ng_mocks_universe_1.default.touches;
        ng_mocks_universe_1.default.touches = touches;
        try {
            for (var _b = __values((0, core_helpers_1.flatten)(testBed.ngModule || /* istanbul ignore next */ [])), _c = _b.next(); !_c.done; _c = _b.next()) {
                var def = _c.value;
                applyPlatformOverrideDef(def);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
        applyPlatformOverridesBasedOnDefaults(touches);
        ng_mocks_universe_1.default.touches = backup;
    }
};
var configureTestingModule = function (original) {
    return function (moduleDef) {
        initTestBed();
        var testBed = (0, testing_1.getTestBed)();
        var providers = (0, func_extract_tokens_1.default)(moduleDef.providers);
        var mocks = providers.mocks, overrides = providers.overrides;
        // touches are important,
        // therefore we are trying to fetch them from the known providers.
        var touches = defineTouches(testBed, moduleDef, providers.touches);
        if (mocks) {
            mock_helper_1.ngMocks.flushTestBed();
        }
        // istanbul ignore else
        if (overrides) {
            applyOverrides(overrides);
        }
        // _testModuleRef exists only after the 1st call,
        // so we shouldn't override platform again.
        if (touches && !testBed._instantiated && !testBed._testModuleRef) {
            applyPlatformOverrides(testBed, touches);
        }
        return original.call(testing_1.TestBed, moduleDef);
    };
};
var resetTestingModule = function (original) {
    return function () {
        ng_mocks_universe_1.default.global.delete('builder:config');
        ng_mocks_universe_1.default.global.delete('builder:module');
        testing_1.TestBed.ngMocksSelectors = undefined;
        applyNgMocksOverrides(testing_1.TestBed);
        return original.call(testing_1.TestBed);
    };
};
var install = function () {
    var hooks = (0, mock_helper_faster_install_1.default)();
    // istanbul ignore else
    if (!testing_1.TestBed.ngMocksOverridesInstalled) {
        // istanbul ignore else
        if (hooks.before.indexOf(configureTestingModule) === -1) {
            hooks.before.push(configureTestingModule);
        }
        // istanbul ignore else
        if (hooks.after.indexOf(resetTestingModule) === -1) {
            hooks.after.push(resetTestingModule);
        }
        (0, core_define_property_1.default)(testing_1.TestBed, 'ngMocksOverridesInstalled', true, false);
    }
};
install();
//# sourceMappingURL=data:application/json;base64,