"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
var ng_mocks_universe_1 = __importDefault(require("./ng-mocks-universe"));
var stackRoot = { id: {}, level: 'root' };
var stack = ng_mocks_universe_1.default.global.get('reporter-stack') || [__assign({}, stackRoot)];
ng_mocks_universe_1.default.global.set('reporter-stack', stack);
var current = function () { return stack[stack.length - 1]; };
// istanbul ignore next
var listenersPush = (_a = ng_mocks_universe_1.default.global.get('reporter-stack-push')) !== null && _a !== void 0 ? _a : [];
ng_mocks_universe_1.default.global.set('reporter-stack-push', listenersPush);
// istanbul ignore next
var listenersPop = (_b = ng_mocks_universe_1.default.global.get('reporter-stack-pop')) !== null && _b !== void 0 ? _b : [];
ng_mocks_universe_1.default.global.set('reporter-stack-pop', listenersPop);
var stackPush = function () {
    var e_1, _a;
    var id = {};
    ng_mocks_universe_1.default.global.set('reporter-stack-id', id);
    var state = { id: id, level: 'runtime' };
    stack.push(state);
    try {
        for (var listenersPush_1 = __values(listenersPush), listenersPush_1_1 = listenersPush_1.next(); !listenersPush_1_1.done; listenersPush_1_1 = listenersPush_1.next()) {
            var callback = listenersPush_1_1.value;
            callback(state, stack);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (listenersPush_1_1 && !listenersPush_1_1.done && (_a = listenersPush_1.return)) _a.call(listenersPush_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
var stackPop = function () {
    var e_2, _a;
    var state = stack.pop();
    // this code is actually needed for jest tests.
    // istanbul ignore if
    if (stack.length === 0) {
        stack.push((state === null || state === void 0 ? void 0 : state.level) === 'root' ? state : __assign({}, stackRoot));
    }
    // istanbul ignore else
    if (state && state.level !== 'root') {
        try {
            for (var listenersPop_1 = __values(listenersPop), listenersPop_1_1 = listenersPop_1.next(); !listenersPop_1_1.done; listenersPop_1_1 = listenersPop_1.next()) {
                var callback = listenersPop_1_1.value;
                callback(state, stack);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (listenersPop_1_1 && !listenersPop_1_1.done && (_a = listenersPop_1.return)) _a.call(listenersPop_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    ng_mocks_universe_1.default.global.set('reporter-stack-id', stack[stack.length - 1].id);
};
// istanbul ignore next
var subscribePush = function (callback) {
    if (listenersPush.indexOf(callback)) {
        listenersPush.push(callback);
    }
    if (stack.length) {
        callback(stack[stack.length - 1], stack);
    }
};
// istanbul ignore next
var subscribePop = function (callback) {
    if (listenersPop.indexOf(callback) === -1) {
        listenersPop.push(callback);
    }
};
// istanbul ignore next
var unsubscribePush = function (callback) {
    var index = listenersPush.indexOf(callback);
    if (index !== -1) {
        listenersPush.splice(index, 1);
    }
};
// istanbul ignore next
var unsubscribePop = function (callback) {
    var index = listenersPop.indexOf(callback);
    if (index !== -1) {
        listenersPop.splice(index, 1);
    }
};
exports.default = {
    current: current,
    stackPop: stackPop,
    stackPush: stackPush,
    subscribePop: subscribePop,
    subscribePush: subscribePush,
    unsubscribePop: unsubscribePop,
    unsubscribePush: unsubscribePush,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbW9ja3Mtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvY29tbW9uL25nLW1vY2tzLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwRUFBa0Q7QUFVbEQsSUFBTSxTQUFTLEdBQWlCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDMUQsSUFBTSxLQUFLLEdBQW1CLDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLGNBQU0sU0FBUyxFQUFHLENBQUM7QUFDakcsMkJBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3BELElBQU0sT0FBTyxHQUFHLGNBQU0sT0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQztBQUU5Qyx1QkFBdUI7QUFDdkIsSUFBTSxhQUFhLEdBQTJCLE1BQUEsMkJBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLG1DQUFJLEVBQUUsQ0FBQztBQUN0RywyQkFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFFakUsdUJBQXVCO0FBQ3ZCLElBQU0sWUFBWSxHQUEyQixNQUFBLDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxtQ0FBSSxFQUFFLENBQUM7QUFDcEcsMkJBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxDQUFDO0FBRS9ELElBQU0sU0FBUyxHQUFHOztJQUNoQixJQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDZCwyQkFB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O0lBQ1QsWUFBWSxjQUFBO0lBQ1osYUFBYSxlQUFBO0lBQ2IsY0FBYyxnQkFBQTtJQUNkLGVBQWUsaUJBQUE7Q0FDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuZ01vY2tzVW5pdmVyc2UgZnJvbSAnLi9uZy1tb2Nrcy11bml2ZXJzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmdNb2Nrc1N0YWNrIHtcbiAgaWQ6IG9iamVjdDtcbiAgbGV2ZWw6ICdyb290JyB8ICdydW50aW1lJztcbiAgbW9ja0luc3RhbmNlPzogYW55W107XG59XG5cbnR5cGUgTmdNb2Nrc1N0YWNrQ2FsbGJhY2sgPSAoc3RhdGU6IE5nTW9ja3NTdGFjaywgc3RhY2s6IE5nTW9ja3NTdGFja1tdKSA9PiB2b2lkO1xuXG5jb25zdCBzdGFja1Jvb3Q6IE5nTW9ja3NTdGFjayA9IHsgaWQ6IHt9LCBsZXZlbDogJ3Jvb3QnIH07XG5jb25zdCBzdGFjazogTmdNb2Nrc1N0YWNrW10gPSBuZ01vY2tzVW5pdmVyc2UuZ2xvYmFsLmdldCgncmVwb3J0ZXItc3RhY2snKSB8fCBbeyAuLi5zdGFja1Jvb3QgfV07XG5uZ01vY2tzVW5pdmVyc2UuZ2xvYmFsLnNldCgncmVwb3J0ZXItc3RhY2snLCBzdGFjayk7XG5jb25zdCBjdXJyZW50ID0gKCkgPT4gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5jb25zdCBsaXN0ZW5lcnNQdXNoOiBOZ01vY2tzU3RhY2tDYWxsYmFja1tdID0gbmdNb2Nrc1VuaXZlcnNlLmdsb2JhbC5nZXQoJ3JlcG9ydGVyLXN0YWNrLXB1c2gnKSA/PyBbXTtcbm5nTW9ja3NVbml2ZXJzZS5nbG9iYWwuc2V0KCdyZXBvcnRlci1zdGFjay1wdXNoJywgbGlzdGVuZXJzUHVzaCk7XG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5jb25zdCBsaXN0ZW5lcnNQb3A6IE5nTW9ja3NTdGFja0NhbGxiYWNrW10gPSBuZ01vY2tzVW5pdmVyc2UuZ2xvYmFsLmdldCgncmVwb3J0ZXItc3RhY2stcG9wJykgPz8gW107XG5uZ01vY2tzVW5pdmVyc2UuZ2xvYmFsLnNldCgncmVwb3J0ZXItc3RhY2stcG9wJywgbGlzdGVuZXJzUG9wKTtcblxuY29uc3Qgc3RhY2tQdXNoID0gKCkgPT4ge1xuICBjb25zdCBpZCA9IHt9O1xuICBuZ01vY2tzVW5pdmVyc2UuZ2xvYmFsLnNldCgncmVwb3J0ZXItc3RhY2staWQnLCBpZCk7XG4gIGNvbnN0IHN0YXRlOiBOZ01vY2tzU3RhY2sgPSB7IGlkLCBsZXZlbDogJ3J1bnRpbWUnIH07XG4gIHN0YWNrLnB1c2goc3RhdGUpO1xuXG4gIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgbGlzdGVuZXJzUHVzaCkge1xuICAgIGNhbGxiYWNrKHN0YXRlLCBzdGFjayk7XG4gIH1cbn07XG5jb25zdCBzdGFja1BvcCA9ICgpID0+IHtcbiAgY29uc3Qgc3RhdGUgPSBzdGFjay5wb3AoKTtcblxuICAvLyB0aGlzIGNvZGUgaXMgYWN0dWFsbHkgbmVlZGVkIGZvciBqZXN0IHRlc3RzLlxuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YWNrLnB1c2goc3RhdGU/LmxldmVsID09PSAncm9vdCcgPyBzdGF0ZSA6IHsgLi4uc3RhY2tSb290IH0pO1xuICB9XG5cbiAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgaWYgKHN0YXRlICYmIHN0YXRlLmxldmVsICE9PSAncm9vdCcpIHtcbiAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGxpc3RlbmVyc1BvcCkge1xuICAgICAgY2FsbGJhY2soc3RhdGUsIHN0YWNrKTtcbiAgICB9XG4gIH1cblxuICBuZ01vY2tzVW5pdmVyc2UuZ2xvYmFsLnNldCgncmVwb3J0ZXItc3RhY2staWQnLCBzdGFja1tzdGFjay5sZW5ndGggLSAxXS5pZCk7XG59O1xuXG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuY29uc3Qgc3Vic2NyaWJlUHVzaCA9IChjYWxsYmFjazogTmdNb2Nrc1N0YWNrQ2FsbGJhY2spID0+IHtcbiAgaWYgKGxpc3RlbmVyc1B1c2guaW5kZXhPZihjYWxsYmFjaykpIHtcbiAgICBsaXN0ZW5lcnNQdXNoLnB1c2goY2FsbGJhY2spO1xuICB9XG4gIGlmIChzdGFjay5sZW5ndGgpIHtcbiAgICBjYWxsYmFjayhzdGFja1tzdGFjay5sZW5ndGggLSAxXSwgc3RhY2spO1xuICB9XG59O1xuXG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuY29uc3Qgc3Vic2NyaWJlUG9wID0gKGNhbGxiYWNrOiBOZ01vY2tzU3RhY2tDYWxsYmFjaykgPT4ge1xuICBpZiAobGlzdGVuZXJzUG9wLmluZGV4T2YoY2FsbGJhY2spID09PSAtMSkge1xuICAgIGxpc3RlbmVyc1BvcC5wdXNoKGNhbGxiYWNrKTtcbiAgfVxufTtcblxuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbmNvbnN0IHVuc3Vic2NyaWJlUHVzaCA9IChjYWxsYmFjazogTmdNb2Nrc1N0YWNrQ2FsbGJhY2spID0+IHtcbiAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnNQdXNoLmluZGV4T2YoY2FsbGJhY2spO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgbGlzdGVuZXJzUHVzaC5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuY29uc3QgdW5zdWJzY3JpYmVQb3AgPSAoY2FsbGJhY2s6IE5nTW9ja3NTdGFja0NhbGxiYWNrKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzUG9wLmluZGV4T2YoY2FsbGJhY2spO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgbGlzdGVuZXJzUG9wLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY3VycmVudCxcbiAgc3RhY2tQb3AsXG4gIHN0YWNrUHVzaCxcbiAgc3Vic2NyaWJlUG9wLFxuICBzdWJzY3JpYmVQdXNoLFxuICB1bnN1YnNjcmliZVBvcCxcbiAgdW5zdWJzY3JpYmVQdXNoLFxufTtcbiJdfQ==