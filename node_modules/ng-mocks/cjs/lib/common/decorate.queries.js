"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var map = {
    ContentChild: core_1.ContentChild,
    ContentChildren: core_1.ContentChildren,
    ViewChild: core_1.ViewChild,
    ViewChildren: core_1.ViewChildren,
};
var isInternalKey = function (key) {
    return key.indexOf('__mock') === 0;
};
var cloneVcrQuery = function (query) { return (__assign(__assign({}, query), { ngMetadataName: query.ngMetadataName, read: core_1.ViewContainerRef })); };
var generateFinalQueries = function (queries) {
    var e_1, _a;
    var final = [];
    var scanKeys = [];
    try {
        for (var _b = __values(Object.keys(queries)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var query = queries[key];
            final.push([key, query]);
            if (!query.isViewQuery && !isInternalKey(key)) {
                scanKeys.push(key);
                final.push(["__ngMocksVcr_" + key, cloneVcrQuery(query)]);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return [final, scanKeys];
};
// Looks like an A9 bug, that queries from @Component are not processed.
// Also we have to pass prototype, not the class.
// The same issue happens with outputs, but time to time
// (when I restart tests with refreshing browser manually).
// https://github.com/ike18t/ng-mocks/issues/109
function default_1(cls, queries) {
    var e_2, _a;
    // istanbul ignore if
    if (!queries) {
        return [];
    }
    var _b = __read(generateFinalQueries(queries), 2), final = _b[0], keys = _b[1];
    try {
        for (var final_1 = __values(final), final_1_1 = final_1.next(); !final_1_1.done; final_1_1 = final_1.next()) {
            var _c = __read(final_1_1.value, 2), key = _c[0], query = _c[1];
            // istanbul ignore else
            if (query.ngMetadataName) {
                var decorator = map[query.ngMetadataName];
                decorator(query.selector, query)(cls.prototype, key);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (final_1_1 && !final_1_1.done && (_a = final_1.return)) _a.call(final_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return keys;
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdGUucXVlcmllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9jb21tb24vZGVjb3JhdGUucXVlcmllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0NBQWdIO0FBSWhILElBQU0sR0FBRyxHQUFRO0lBQ2YsWUFBWSxxQkFBQTtJQUNaLGVBQWUsd0JBQUE7SUFDZixTQUFTLGtCQUFBO0lBQ1QsWUFBWSxxQkFBQTtDQUNiLENBQUM7QUFFRixJQUFNLGFBQWEsR0FBRyxVQUFDLEdBQVc7SUFDaEMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxDQUFDLENBQUM7QUFFRixJQUFNLGFBQWEsR0FBRyxVQUFDLEtBQTBDLElBQUssT0FBQSx1QkFDakUsS0FBSyxLQUNSLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYyxFQUNwQyxJQUFJLEVBQUUsdUJBQWdCLElBQ3RCLEVBSm9FLENBSXBFLENBQUM7QUFFSCxJQUFNLG9CQUFvQixHQUFHLFVBQUMsT0FFN0I7O0lBQ0MsSUFBTSxLQUFLLEdBQXlELEVBQUUsQ0FBQztJQUN2RSxJQUFNLFFBQVEsR0FBYSxFQUFFLENBQUM7O1FBRTlCLEtBQWtCLElBQUEsS0FBQSxTQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7WUFBbkMsSUFBTSxHQUFHLFdBQUE7WUFDWixJQUFNLEtBQUssR0FBd0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2hFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUV6QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDN0MsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLGtCQUFnQixHQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzRDtTQUNGOzs7Ozs7Ozs7SUFFRCxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQztBQUVGLHdFQUF3RTtBQUN4RSxpREFBaUQ7QUFDakQsd0RBQXdEO0FBQ3hELDJEQUEyRDtBQUMzRCxnREFBZ0Q7QUFDaEQsbUJBQXlCLEdBQWlCLEVBQUUsT0FBa0M7O0lBQzVFLHFCQUFxQjtJQUNyQixJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNLLElBQUEsS0FBQSxPQUFnQixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsSUFBQSxFQUE1QyxLQUFLLFFBQUEsRUFBRSxJQUFJLFFBQWlDLENBQUM7O1FBRXBELEtBQTJCLElBQUEsVUFBQSxTQUFBLEtBQUssQ0FBQSw0QkFBQSwrQ0FBRTtZQUF2QixJQUFBLEtBQUEsMEJBQVksRUFBWCxHQUFHLFFBQUEsRUFBRSxLQUFLLFFBQUE7WUFDcEIsdUJBQXVCO1lBQ3ZCLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtnQkFDeEIsSUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDNUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN0RDtTQUNGOzs7Ozs7Ozs7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFoQkQsNEJBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGVudENoaWxkLCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5LCBWaWV3Q2hpbGQsIFZpZXdDaGlsZHJlbiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBbnlUeXBlIH0gZnJvbSAnLi9jb3JlLnR5cGVzJztcblxuY29uc3QgbWFwOiBhbnkgPSB7XG4gIENvbnRlbnRDaGlsZCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDaGlsZHJlbixcbn07XG5cbmNvbnN0IGlzSW50ZXJuYWxLZXkgPSAoa2V5OiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIGtleS5pbmRleE9mKCdfX21vY2snKSA9PT0gMDtcbn07XG5cbmNvbnN0IGNsb25lVmNyUXVlcnkgPSAocXVlcnk6IFF1ZXJ5ICYgeyBuZ01ldGFkYXRhTmFtZT86IHN0cmluZyB9KSA9PiAoe1xuICAuLi5xdWVyeSxcbiAgbmdNZXRhZGF0YU5hbWU6IHF1ZXJ5Lm5nTWV0YWRhdGFOYW1lLFxuICByZWFkOiBWaWV3Q29udGFpbmVyUmVmLFxufSk7XG5cbmNvbnN0IGdlbmVyYXRlRmluYWxRdWVyaWVzID0gKHF1ZXJpZXM6IHtcbiAgW2tleTogc3RyaW5nXTogUXVlcnk7XG59KTogW0FycmF5PFtzdHJpbmcsIFF1ZXJ5ICYgeyBuZ01ldGFkYXRhTmFtZT86IHN0cmluZyB9XT4sIHN0cmluZ1tdXSA9PiB7XG4gIGNvbnN0IGZpbmFsOiBBcnJheTxbc3RyaW5nLCBRdWVyeSAmIHsgbmdNZXRhZGF0YU5hbWU/OiBzdHJpbmcgfV0+ID0gW107XG4gIGNvbnN0IHNjYW5LZXlzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHF1ZXJpZXMpKSB7XG4gICAgY29uc3QgcXVlcnk6IFF1ZXJ5ICYgeyBuZ01ldGFkYXRhTmFtZT86IHN0cmluZyB9ID0gcXVlcmllc1trZXldO1xuICAgIGZpbmFsLnB1c2goW2tleSwgcXVlcnldKTtcblxuICAgIGlmICghcXVlcnkuaXNWaWV3UXVlcnkgJiYgIWlzSW50ZXJuYWxLZXkoa2V5KSkge1xuICAgICAgc2NhbktleXMucHVzaChrZXkpO1xuICAgICAgZmluYWwucHVzaChbYF9fbmdNb2Nrc1Zjcl8ke2tleX1gLCBjbG9uZVZjclF1ZXJ5KHF1ZXJ5KV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbZmluYWwsIHNjYW5LZXlzXTtcbn07XG5cbi8vIExvb2tzIGxpa2UgYW4gQTkgYnVnLCB0aGF0IHF1ZXJpZXMgZnJvbSBAQ29tcG9uZW50IGFyZSBub3QgcHJvY2Vzc2VkLlxuLy8gQWxzbyB3ZSBoYXZlIHRvIHBhc3MgcHJvdG90eXBlLCBub3QgdGhlIGNsYXNzLlxuLy8gVGhlIHNhbWUgaXNzdWUgaGFwcGVucyB3aXRoIG91dHB1dHMsIGJ1dCB0aW1lIHRvIHRpbWVcbi8vICh3aGVuIEkgcmVzdGFydCB0ZXN0cyB3aXRoIHJlZnJlc2hpbmcgYnJvd3NlciBtYW51YWxseSkuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vaWtlMTh0L25nLW1vY2tzL2lzc3Vlcy8xMDlcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjbHM6IEFueVR5cGU8YW55PiwgcXVlcmllcz86IHsgW2tleTogc3RyaW5nXTogUXVlcnkgfSk6IHN0cmluZ1tdIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmICghcXVlcmllcykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBbZmluYWwsIGtleXNdID0gZ2VuZXJhdGVGaW5hbFF1ZXJpZXMocXVlcmllcyk7XG5cbiAgZm9yIChjb25zdCBba2V5LCBxdWVyeV0gb2YgZmluYWwpIHtcbiAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZVxuICAgIGlmIChxdWVyeS5uZ01ldGFkYXRhTmFtZSkge1xuICAgICAgY29uc3QgZGVjb3JhdG9yID0gbWFwW3F1ZXJ5Lm5nTWV0YWRhdGFOYW1lXTtcbiAgICAgIGRlY29yYXRvcihxdWVyeS5zZWxlY3RvciwgcXVlcnkpKGNscy5wcm90b3R5cGUsIGtleSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG4iXX0=