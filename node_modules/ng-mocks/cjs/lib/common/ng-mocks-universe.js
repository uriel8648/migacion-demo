"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_config_1 = __importDefault(require("./core.config"));
// istanbul ignore next
var getGlobal = function () { return window || global; };
var globalMap = function (key) { return function () {
    if (!ngMocksUniverse.global.has(key)) {
        ngMocksUniverse.global.set(key, new Map());
    }
    return ngMocksUniverse.global.get(key);
}; };
getGlobal().ngMocksUniverse = getGlobal().ngMocksUniverse || {};
var ngMocksUniverse = getGlobal().ngMocksUniverse;
ngMocksUniverse.builtDeclarations = new Map();
ngMocksUniverse.builtProviders = new Map();
ngMocksUniverse.cacheDeclarations = new Map();
ngMocksUniverse.cacheProviders = new Map();
ngMocksUniverse.config = new Map();
ngMocksUniverse.configInstance = new Map();
ngMocksUniverse.flags = new Set(core_config_1.default.flags);
ngMocksUniverse.global = new Map();
ngMocksUniverse.touches = new Set();
ngMocksUniverse.global.set('flags', {
    // @deprecated and will be changed in A13 to 'throw'
    onMockInstanceRestoreNeed: core_config_1.default.onMockInstanceRestoreNeed,
    // @deprecated and will be changed in A13 to 'throw'
    onTestBedFlushNeed: core_config_1.default.onTestBedFlushNeed,
});
ngMocksUniverse.getLocalMocks = function () {
    if (!ngMocksUniverse.global.has('local-mocks')) {
        ngMocksUniverse.global.set('local-mocks', []);
    }
    return ngMocksUniverse.global.get('local-mocks');
};
ngMocksUniverse.getOverrides = globalMap('overrides');
ngMocksUniverse.getDefaults = globalMap('defaults');
var getDefaults = function (def) {
    {
        var defValue = ngMocksUniverse.getDefaults().get(def);
        if (defValue) {
            return defValue;
        }
    }
    {
        var defValue = typeof def === 'function' ? ngMocksUniverse.getDefaults().get("@" + def.name) : undefined;
        if (defValue) {
            return defValue;
        }
    }
    return [];
};
ngMocksUniverse.getResolution = function (def) {
    var set = ngMocksUniverse.config.get('ngMocksDepsResolution');
    if (set === null || set === void 0 ? void 0 : set.has(def)) {
        return set.get(def);
    }
    var _a = __read(getDefaults(def), 1), value = _a[0];
    return value;
};
ngMocksUniverse.getBuildDeclaration = function (def) {
    if (ngMocksUniverse.builtDeclarations.has(def)) {
        return ngMocksUniverse.builtDeclarations.get(def);
    }
    var _a = __read(getDefaults(def), 2), mode = _a[0], replacement = _a[1];
    if (mode === 'exclude') {
        return null;
    }
    if (mode === 'keep') {
        return def;
    }
    if (mode === 'replace') {
        return replacement;
    }
};
ngMocksUniverse.hasBuildDeclaration = function (def) {
    if (ngMocksUniverse.builtDeclarations.has(def)) {
        return true;
    }
    var _a = __read(getDefaults(def), 1), mode = _a[0];
    return !!mode && mode !== 'mock';
};
var hasBuildDeclaration = function (def) { return ngMocksUniverse.hasBuildDeclaration(def); };
var getBuildDeclaration = function (def) { return ngMocksUniverse.getBuildDeclaration(def); };
ngMocksUniverse.isExcludedDef = function (def) {
    var resolution = ngMocksUniverse.getResolution(def);
    if (resolution && resolution !== 'exclude') {
        return false;
    }
    return hasBuildDeclaration(def) && getBuildDeclaration(def) === null;
};
ngMocksUniverse.isProvidedDef = function (def) { return hasBuildDeclaration(def) && getBuildDeclaration(def) !== null; };
// excluding StoreDevtoolsModule by default
ngMocksUniverse.getDefaults().set('@StoreDevtoolsModule', ['exclude']);
exports.default = (function () { return ngMocksUniverse; })();
//# sourceMappingURL=data:application/json;base64,