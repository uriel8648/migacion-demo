"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockModule = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var core_config_1 = __importDefault(require("../common/core.config"));
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_module_resolve_1 = __importDefault(require("../common/core.reflect.module-resolve"));
var decorate_mock_1 = __importDefault(require("../common/decorate.mock"));
var func_get_mocked_ng_def_of_1 = require("../common/func.get-mocked-ng-def-of");
var func_import_exists_1 = __importDefault(require("../common/func.import-exists"));
var func_is_mock_ng_def_1 = require("../common/func.is-mock-ng-def");
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var func_is_ng_module_def_with_providers_1 = require("../common/func.is-ng-module-def-with-providers");
var mock_1 = require("../common/mock");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var mock_ng_def_1 = __importDefault(require("./mock-ng-def"));
var flagMock = function (resolution) { return resolution === 'mock' && ng_mocks_universe_1.default.flags.has('skipMock'); };
var flagKeep = function (resolution) { return resolution === 'keep' && !ng_mocks_universe_1.default.flags.has('skipMock'); };
var flagReplace = function (resolution) {
    return resolution === 'replace' && !ng_mocks_universe_1.default.flags.has('skipMock');
};
var flagNever = function (ngModule) {
    return core_config_1.default.neverMockModule.indexOf(ngModule.name) !== -1 && !ng_mocks_universe_1.default.flags.has('skipMock');
};
var preprocessToggleFlag = function (ngModule) {
    var toggleSkipMockFlag = false;
    var resolution = ng_mocks_universe_1.default.getResolution(ngModule);
    if (flagMock(resolution)) {
        toggleSkipMockFlag = true;
        ng_mocks_universe_1.default.flags.delete('skipMock');
    }
    if (flagKeep(resolution) || flagReplace(resolution) || flagNever(ngModule)) {
        toggleSkipMockFlag = true;
        ng_mocks_universe_1.default.flags.add('skipMock');
    }
    return toggleSkipMockFlag;
};
var postprocessToggleFlag = function (toggleSkipMockFlag) {
    if (toggleSkipMockFlag && ng_mocks_universe_1.default.flags.has('skipMock')) {
        ng_mocks_universe_1.default.flags.delete('skipMock');
    }
    else if (toggleSkipMockFlag && !ng_mocks_universe_1.default.flags.has('skipMock')) {
        ng_mocks_universe_1.default.flags.add('skipMock');
    }
};
var extractModuleAndProviders = function (module) {
    var ngModule;
    var ngModuleProviders;
    if ((0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(module)) {
        ngModule = module.ngModule;
        if (module.providers) {
            ngModuleProviders = module.providers;
        }
    }
    else {
        ngModule = module;
    }
    return {
        ngModule: ngModule,
        ngModuleProviders: ngModuleProviders,
    };
};
var getExistingMockModule = function (ngModule) {
    if ((0, func_is_mock_ng_def_1.isMockNgDef)(ngModule, 'm')) {
        return ngModule;
    }
    // Every module should be replaced with its mock copy only once to avoid errors like:
    // Failed: Type ...Component is part of the declarations of 2 modules: ...Module and ...Module...
    if (ng_mocks_universe_1.default.flags.has('cacheModule') && ng_mocks_universe_1.default.cacheDeclarations.has(ngModule)) {
        return ng_mocks_universe_1.default.cacheDeclarations.get(ngModule);
    }
    // Now we check if we need to keep the original module or to replace it with some other.
    if (ng_mocks_universe_1.default.hasBuildDeclaration(ngModule)) {
        var instance = ng_mocks_universe_1.default.getBuildDeclaration(ngModule);
        if ((0, func_is_ng_def_1.isNgDef)(instance, 'm') && instance !== ngModule) {
            return instance;
        }
    }
    return undefined;
};
var getMockModuleDef = function (ngModule, mockModule) {
    if (!mockModule) {
        var meta = (0, core_reflect_module_resolve_1.default)(ngModule);
        var _a = __read((0, mock_ng_def_1.default)(meta, ngModule), 2), changed = _a[0], ngModuleDef = _a[1];
        if (changed) {
            return ngModuleDef;
        }
    }
    return undefined;
};
var detectMockModule = function (ngModule, mockModule) {
    var mockModuleDef = getMockModuleDef(ngModule, mockModule);
    if (mockModuleDef) {
        var parent_1 = ng_mocks_universe_1.default.flags.has('skipMock') ? ngModule : mock_1.Mock;
        var mock = (0, core_helpers_1.extendClass)(parent_1);
        // the last thing is to apply decorators.
        (0, core_1.NgModule)(mockModuleDef)(mock);
        (0, decorate_mock_1.default)(mock, ngModule);
        return mock;
    }
    return mockModule || ngModule;
};
var getMockProviders = function (ngModuleProviders) {
    if (ngModuleProviders) {
        var _a = __read((0, mock_ng_def_1.default)({ providers: ngModuleProviders }), 2), changed = _a[0], ngModuleDef = _a[1];
        return changed ? ngModuleDef.providers : ngModuleProviders;
    }
    return undefined;
};
var generateReturn = function (module, ngModule, ngModuleProviders, mockModule, mockModuleProviders) {
    return mockModule === ngModule && mockModuleProviders === ngModuleProviders
        ? module
        : (0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(module)
            ? __assign({ ngModule: mockModule }, (mockModuleProviders ? { providers: mockModuleProviders } : {})) : mockModule;
};
function MockModule(module) {
    var _a;
    (0, func_import_exists_1.default)(module, 'MockModule');
    var _b = extractModuleAndProviders(module), ngModule = _b.ngModule, ngModuleProviders = _b.ngModuleProviders;
    // We are inside of an 'it'. It is fine to to return a mock copy.
    if (!ngModuleProviders && (0, testing_1.getTestBed)()._instantiated) {
        try {
            return (0, func_get_mocked_ng_def_of_1.getMockedNgDefOf)(ngModule, 'm');
        }
        catch (error) {
            // looks like an in-test mock.
        }
    }
    var toggleSkipMockFlag = preprocessToggleFlag(ngModule);
    var mockModule = detectMockModule(ngModule, getExistingMockModule(ngModule));
    // istanbul ignore else
    if (ng_mocks_universe_1.default.flags.has('cacheModule')) {
        ng_mocks_universe_1.default.cacheDeclarations.set(ngModule, mockModule);
    }
    if (ng_mocks_universe_1.default.flags.has('skipMock')) {
        (_a = ng_mocks_universe_1.default.config.get('ngMocksDepsSkip')) === null || _a === void 0 ? void 0 : _a.add(mockModule);
    }
    var mockModuleProviders = getMockProviders(ngModuleProviders);
    postprocessToggleFlag(toggleSkipMockFlag);
    return generateReturn(module, ngModule, ngModuleProviders, mockModule, mockModuleProviders);
}
exports.MockModule = MockModule;
//# sourceMappingURL=data:application/json;base64,