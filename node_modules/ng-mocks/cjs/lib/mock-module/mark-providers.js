"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../common/core.helpers");
var func_get_provider_1 = __importDefault(require("../common/func.get-provider"));
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
exports.default = (function (providers) {
    var e_1, _a;
    var _b;
    try {
        for (var _c = __values((0, core_helpers_1.flatten)(providers !== null && providers !== void 0 ? providers : [])), _d = _c.next(); !_d.done; _d = _c.next()) {
            var provider = _d.value;
            var provide = (0, func_get_provider_1.default)(provider);
            var config = (_b = ng_mocks_universe_1.default.configInstance.get(provide)) !== null && _b !== void 0 ? _b : {};
            config.exported = true;
            ng_mocks_universe_1.default.configInstance.set(provide, config);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFyay1wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1tb2R1bGUvbWFyay1wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHVEQUFpRDtBQUNqRCxrRkFBMEQ7QUFDMUQsa0ZBQTBEO0FBRTFELG1CQUFlLFVBQUMsU0FBaUI7Ozs7UUFDL0IsS0FBdUIsSUFBQSxLQUFBLFNBQUEsSUFBQSxzQkFBTyxFQUFDLFNBQVMsYUFBVCxTQUFTLGNBQVQsU0FBUyxHQUFJLEVBQUUsQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO1lBQTVDLElBQU0sUUFBUSxXQUFBO1lBQ2pCLElBQU0sT0FBTyxHQUFHLElBQUEsMkJBQWUsRUFBQyxRQUFRLENBQUMsQ0FBQztZQUUxQyxJQUFNLE1BQU0sR0FBRyxNQUFBLDJCQUFlLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsbUNBQUksRUFBRSxDQUFDO1lBQ2pFLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLDJCQUFlLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDckQ7Ozs7Ozs7OztBQUNILENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICcuLi9jb21tb24vY29yZS5oZWxwZXJzJztcbmltcG9ydCBmdW5jR2V0UHJvdmlkZXIgZnJvbSAnLi4vY29tbW9uL2Z1bmMuZ2V0LXByb3ZpZGVyJztcbmltcG9ydCBuZ01vY2tzVW5pdmVyc2UgZnJvbSAnLi4vY29tbW9uL25nLW1vY2tzLXVuaXZlcnNlJztcblxuZXhwb3J0IGRlZmF1bHQgKHByb3ZpZGVycz86IGFueVtdKTogdm9pZCA9PiB7XG4gIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgZmxhdHRlbihwcm92aWRlcnMgPz8gW10pKSB7XG4gICAgY29uc3QgcHJvdmlkZSA9IGZ1bmNHZXRQcm92aWRlcihwcm92aWRlcik7XG5cbiAgICBjb25zdCBjb25maWcgPSBuZ01vY2tzVW5pdmVyc2UuY29uZmlnSW5zdGFuY2UuZ2V0KHByb3ZpZGUpID8/IHt9O1xuICAgIGNvbmZpZy5leHBvcnRlZCA9IHRydWU7XG4gICAgbmdNb2Nrc1VuaXZlcnNlLmNvbmZpZ0luc3RhbmNlLnNldChwcm92aWRlLCBjb25maWcpO1xuICB9XG59O1xuIl19