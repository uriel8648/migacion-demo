"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../common/core.helpers");
var func_is_ng_module_def_with_providers_1 = require("../common/func.is-ng-module-def-with-providers");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var create_resolvers_1 = __importDefault(require("./create-resolvers"));
var mark_providers_1 = __importDefault(require("./mark-providers"));
var flatToExisting = function (data, callback) {
    return (0, core_helpers_1.flatten)(data)
        .map(callback)
        .filter(function (item) { return !!item; });
};
var configureProcessMetaKeys = function (resolve, resolveProvider) { return [
    ['declarations', resolve],
    ['entryComponents', resolve],
    ['bootstrap', resolve],
    ['providers', resolveProvider],
    ['imports', resolve],
    ['exports', resolve],
]; };
var processMeta = function (ngModule, resolve, resolveProvider) {
    var e_1, _a;
    var _b;
    var mockModuleDef = {};
    var keys = configureProcessMetaKeys(resolve, resolveProvider);
    var cachePipe = ng_mocks_universe_1.default.flags.has('cachePipe');
    if (!cachePipe) {
        ng_mocks_universe_1.default.flags.add('cachePipe');
    }
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var _c = __read(keys_1_1.value, 2), key = _c[0], callback = _c[1];
            if ((_b = ngModule[key]) === null || _b === void 0 ? void 0 : _b.length) {
                mockModuleDef[key] = flatToExisting(ngModule[key], callback);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    (0, mark_providers_1.default)(mockModuleDef.providers);
    if (!cachePipe) {
        ng_mocks_universe_1.default.flags.delete('cachePipe');
    }
    return mockModuleDef;
};
var resolveDefForExport = function (def, resolve, correctExports, ngModule) {
    var moduleConfig = ng_mocks_universe_1.default.config.get(ngModule) || {};
    var instance = (0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(def) ? def.ngModule : def;
    var mockDef = resolve(instance);
    if (!mockDef) {
        return undefined;
    }
    // If we export a declaration, then we have to export its module too.
    var config = ng_mocks_universe_1.default.config.get(instance);
    if ((config === null || config === void 0 ? void 0 : config.export) && ngModule) {
        if (!moduleConfig.export) {
            ng_mocks_universe_1.default.config.set(ngModule, __assign(__assign({}, moduleConfig), { export: true }));
        }
    }
    if (correctExports && !moduleConfig.exportAll && !(config === null || config === void 0 ? void 0 : config.export)) {
        return undefined;
    }
    return mockDef;
};
var skipAddExports = function (mockDef, mockModuleDef) {
    return !mockDef || (!!mockModuleDef.exports && mockModuleDef.exports.indexOf(mockDef) !== -1);
};
// if we are in the skipMock mode we need to export only the default exports.
// if we are in the correctModuleExports mode we need to export only default exports.
var addExports = function (resolve, change, ngModuleDef, mockModuleDef, ngModule) {
    var e_2, _a;
    var correctExports = ng_mocks_universe_1.default.flags.has('skipMock') || ng_mocks_universe_1.default.flags.has('correctModuleExports');
    try {
        for (var _b = __values((0, core_helpers_1.flatten)([ngModuleDef.imports || [], ngModuleDef.declarations || []])), _c = _b.next(); !_c.done; _c = _b.next()) {
            var def = _c.value;
            var mockDef = resolveDefForExport(def, resolve, correctExports, ngModule);
            if (skipAddExports(mockDef, mockModuleDef)) {
                continue;
            }
            change();
            mockModuleDef.exports = mockModuleDef.exports || [];
            mockModuleDef.exports.push(mockDef);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
};
exports.default = (function (ngModuleDef, ngModule) {
    var hasResolver = ng_mocks_universe_1.default.config.has('mockNgDefResolver');
    if (!hasResolver) {
        ng_mocks_universe_1.default.config.set('mockNgDefResolver', new Map());
    }
    var changed = !ng_mocks_universe_1.default.flags.has('skipMock');
    var change = function (flag) {
        if (flag === void 0) { flag = true; }
        changed = changed || flag;
    };
    var _a = (0, create_resolvers_1.default)(change, ng_mocks_universe_1.default.config.get('mockNgDefResolver')), resolve = _a.resolve, resolveProvider = _a.resolveProvider;
    var mockModuleDef = processMeta(ngModuleDef, resolve, resolveProvider);
    addExports(resolve, change, ngModuleDef, mockModuleDef, ngModule);
    if (!hasResolver) {
        ng_mocks_universe_1.default.config.delete('mockNgDefResolver');
    }
    return [changed, mockModuleDef];
});
//# sourceMappingURL=data:application/json;base64,