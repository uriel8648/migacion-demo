"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var func_is_ng_module_def_with_providers_1 = require("../common/func.is-ng-module-def-with-providers");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var mock_component_1 = require("../mock-component/mock-component");
var mock_directive_1 = require("../mock-directive/mock-directive");
var mock_pipe_1 = require("../mock-pipe/mock-pipe");
var helper_mock_service_1 = __importDefault(require("../mock-service/helper.mock-service"));
var mock_module_1 = require("./mock-module");
// tslint:disable-next-line variable-name
var BrowserAnimationsModule;
// tslint:disable-next-line variable-name
var NoopAnimationsModule;
// istanbul ignore next
var replaceWithNoop = function () { return false; };
try {
    // tslint:disable-next-line no-require-imports no-var-requires
    var imports = require('@angular/platform-browser/animations');
    BrowserAnimationsModule = imports.BrowserAnimationsModule;
    NoopAnimationsModule = imports.NoopAnimationsModule;
    replaceWithNoop = function (def) {
        return def === BrowserAnimationsModule &&
            !!BrowserAnimationsModule &&
            !!NoopAnimationsModule &&
            !ng_mocks_universe_1.default.getResolution(def);
    };
}
catch (_a) {
    // nothing to do
}
var processDefMap = [
    ['c', mock_component_1.MockComponent],
    ['d', mock_directive_1.MockDirective],
    ['p', mock_pipe_1.MockPipe],
];
var processDef = function (def) {
    var e_1, _a;
    // BrowserAnimationsModule is a very special case.
    // If it is not resolved manually, we simply replace it with NoopAnimationsModule.
    if (replaceWithNoop(def)) {
        return NoopAnimationsModule;
    }
    if ((0, func_is_ng_def_1.isNgDef)(def, 'm') || (0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(def)) {
        return (0, mock_module_1.MockModule)(def);
    }
    if (ng_mocks_universe_1.default.hasBuildDeclaration(def)) {
        return ng_mocks_universe_1.default.getBuildDeclaration(def);
    }
    if (ng_mocks_universe_1.default.flags.has('skipMock') && ng_mocks_universe_1.default.getResolution(def) !== 'mock') {
        return def;
    }
    try {
        for (var processDefMap_1 = __values(processDefMap), processDefMap_1_1 = processDefMap_1.next(); !processDefMap_1_1.done; processDefMap_1_1 = processDefMap_1.next()) {
            var _b = __read(processDefMap_1_1.value, 2), flag = _b[0], func = _b[1];
            if ((0, func_is_ng_def_1.isNgDef)(def, flag)) {
                return func(def);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (processDefMap_1_1 && !processDefMap_1_1.done && (_a = processDefMap_1.return)) _a.call(processDefMap_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
// resolveProvider is a special case because of the def structure.
var createResolveProvider = function (resolutions, change) {
    return function (def) {
        return helper_mock_service_1.default.resolveProvider(def, resolutions, change);
    };
};
var createResolveWithProviders = function (def, mockDef) {
    return mockDef && mockDef.ngModule && (0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(def);
};
var createResolveExisting = function (def, resolutions, change) {
    var mockDef = resolutions.get(def);
    if (def !== mockDef) {
        change();
    }
    return mockDef;
};
var createResolveExcluded = function (def, resolutions, change) {
    resolutions.set(def, undefined);
    change();
};
var createResolve = function (resolutions, change) {
    return function (def) {
        var _a;
        if (resolutions.has(def)) {
            return createResolveExisting(def, resolutions, change);
        }
        var detectedDef = (0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(def) ? def.ngModule : def;
        if (ng_mocks_universe_1.default.isExcludedDef(detectedDef)) {
            return createResolveExcluded(def, resolutions, change);
        }
        ng_mocks_universe_1.default.touches.add(detectedDef);
        var mockDef = processDef(def);
        if (createResolveWithProviders(def, mockDef)) {
            resolutions.set(def.ngModule, mockDef.ngModule);
        }
        if (ng_mocks_universe_1.default.flags.has('skipMock')) {
            (_a = ng_mocks_universe_1.default.config.get('ngMocksDepsSkip')) === null || _a === void 0 ? void 0 : _a.add(mockDef);
        }
        resolutions.set(def, mockDef);
        change(mockDef !== def);
        return mockDef;
    };
};
exports.default = (function (change, resolutions) {
    var resolve = createResolve(resolutions, change);
    var resolveProvider = createResolveProvider(resolutions, change);
    return {
        resolve: resolve,
        resolveProvider: resolveProvider,
    };
});
//# sourceMappingURL=data:application/json;base64,