"use strict";
// tslint:disable max-file-line-count
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockReset = exports.MockInstance = void 0;
var func_import_exists_1 = __importDefault(require("../common/func.import-exists"));
var ng_mocks_stack_1 = __importDefault(require("../common/ng-mocks-stack"));
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var mock_instance_forgot_reset_1 = __importDefault(require("./mock-instance-forgot-reset"));
var currentStack;
ng_mocks_stack_1.default.subscribePush(function (state) {
    currentStack = state;
});
ng_mocks_stack_1.default.subscribePop(function (state, stack) {
    var e_1, _a;
    try {
        for (var _b = __values(state.mockInstance || /* istanbul ignore next */ []), _c = _b.next(); !_c.done; _c = _b.next()) {
            var declaration = _c.value;
            if (ng_mocks_universe_1.default.configInstance.has(declaration)) {
                var universeConfig = ng_mocks_universe_1.default.configInstance.get(declaration);
                universeConfig.overloads.pop();
                ng_mocks_universe_1.default.configInstance.set(declaration, __assign({}, universeConfig));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    currentStack = stack[stack.length - 1];
});
ng_mocks_stack_1.default.subscribePush(function () {
    // On start we have to flush any caches,
    // they are not from this spec.
    var set = ng_mocks_universe_1.default.getLocalMocks();
    set.splice(0, set.length);
});
ng_mocks_stack_1.default.subscribePop(function () {
    var set = ng_mocks_universe_1.default.getLocalMocks();
    while (set.length) {
        var _a = __read(set.pop() || /* istanbul ignore next */ [], 2), declaration = _a[0], config = _a[1];
        var universeConfig = ng_mocks_universe_1.default.configInstance.has(declaration)
            ? ng_mocks_universe_1.default.configInstance.get(declaration)
            : /* istanbul ignore next */ {};
        ng_mocks_universe_1.default.configInstance.set(declaration, __assign(__assign({}, universeConfig), config));
    }
});
var restore = function (declaration, config) {
    ng_mocks_universe_1.default.getLocalMocks().push([declaration, config]);
};
var parseMockInstanceArgs = function (args) {
    var set = {};
    if (typeof args[0] === 'string') {
        set.key = args[0];
        set.value = args[1];
        set.accessor = args[2];
    }
    else {
        set.data = args[0];
    }
    return set;
};
var checkReset = [];
var checkCollect = false;
// istanbul ignore else: maybe a different runner is used
// tslint:disable-next-line strict-type-predicates
if (typeof beforeEach !== 'undefined') {
    beforeEach(function () { return (checkCollect = true); });
    beforeEach(function () { return (0, mock_instance_forgot_reset_1.default)(checkReset); });
    afterEach(function () { return (checkCollect = false); });
}
var mockInstanceConfig = function (declaration, data) {
    var config = typeof data === 'function' ? { init: data } : data;
    var universeConfig = ng_mocks_universe_1.default.configInstance.has(declaration)
        ? ng_mocks_universe_1.default.configInstance.get(declaration)
        : {};
    restore(declaration, universeConfig);
    if (config) {
        ng_mocks_universe_1.default.configInstance.set(declaration, __assign(__assign({}, universeConfig), config));
    }
    else {
        ng_mocks_universe_1.default.configInstance.set(declaration, __assign(__assign({}, universeConfig), { init: undefined, overloads: [] }));
    }
    if (!config) {
        // When we are calling MockInstance without a config we need to reset it from the checks too.
        for (var i = checkReset.length - 1; i >= 0; i -= 1) {
            if (checkReset[i][0] === declaration && checkReset[i][2] === currentStack) {
                checkReset.splice(i, 1);
            }
        }
    }
    else if (checkCollect) {
        checkReset.push([declaration, ng_mocks_universe_1.default.configInstance.get(declaration), currentStack]);
    }
};
var mockInstanceMember = function (declaration, name, stub, encapsulation) {
    var _a;
    var config = ng_mocks_universe_1.default.configInstance.has(declaration) ? ng_mocks_universe_1.default.configInstance.get(declaration) : {};
    var overloads = config.overloads || [];
    overloads.push([name, stub, encapsulation]);
    config.overloads = overloads;
    ng_mocks_universe_1.default.configInstance.set(declaration, __assign({}, config));
    var mockInstances = (_a = currentStack.mockInstance) !== null && _a !== void 0 ? _a : [];
    mockInstances.push(declaration);
    currentStack.mockInstance = mockInstances;
    if (checkCollect) {
        checkReset.push([declaration, ng_mocks_universe_1.default.configInstance.get(declaration), currentStack]);
    }
    return stub;
};
function MockInstance(declaration) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    (0, func_import_exists_1.default)(declaration, 'MockInstance');
    var _a = parseMockInstanceArgs(args), key = _a.key, value = _a.value, accessor = _a.accessor, data = _a.data;
    if (key) {
        return mockInstanceMember(declaration, key, value, accessor);
    }
    mockInstanceConfig(declaration, data);
}
exports.MockInstance = MockInstance;
/**
 * @see https://ng-mocks.sudo.eu/api/MockInstance#remember
 */
MockInstance.remember = function () { return ng_mocks_stack_1.default.stackPush(); };
/**
 * @see https://ng-mocks.sudo.eu/api/MockInstance#restore
 */
MockInstance.restore = function () { return ng_mocks_stack_1.default.stackPop(); };
/**
 * @see https://ng-mocks.sudo.eu/api/MockInstance#scope
 */
MockInstance.scope = function (scope) {
    if (scope === void 0) { scope = 'case'; }
    if (scope === 'all' || scope === 'suite') {
        beforeAll(MockInstance.remember);
        afterAll(MockInstance.restore);
    }
    if (scope === 'all' || scope === 'case') {
        beforeEach(MockInstance.remember);
        afterEach(MockInstance.restore);
    }
};
function MockReset() {
    ng_mocks_universe_1.default.configInstance.clear();
}
exports.MockReset = MockReset;
//# sourceMappingURL=data:application/json;base64,