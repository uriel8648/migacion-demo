"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
exports.default = (function (checkReset) {
    var showError = [];
    // istanbul ignore next: because of the installed global scope switcher we cannot test this part
    while (checkReset.length) {
        var _a = __read(checkReset.pop() || /* istanbul ignore next */ [], 2), declaration = _a[0], config = _a[1];
        if (config === ng_mocks_universe_1.default.configInstance.get(declaration)) {
            showError.push(typeof declaration === 'function' ? declaration.name : declaration);
        }
    }
    // istanbul ignore if: because of the installed global scope switcher we cannot test this part
    if (showError.length) {
        var globalFlags = ng_mocks_universe_1.default.global.get('flags');
        var errorMessage = [
            "MockInstance: side effects have been detected (" + showError.join(', ') + ").",
            "Forgot to add MockInstance.scope() or to call MockInstance.restore()?",
        ].join(' ');
        if (globalFlags.onMockInstanceRestoreNeed === 'warn') {
            // tslint:disable-next-line no-console
            console.warn(errorMessage);
        }
        else if (globalFlags.onMockInstanceRestoreNeed === 'throw') {
            throw new Error(errorMessage);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1pbnN0YW5jZS1mb3Jnb3QtcmVzZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1pbnN0YW5jZS9tb2NrLWluc3RhbmNlLWZvcmdvdC1yZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxrRkFBMEQ7QUFFMUQsbUJBQWUsVUFBQyxVQUFtQztJQUNqRCxJQUFNLFNBQVMsR0FBYSxFQUFFLENBQUM7SUFFL0IsZ0dBQWdHO0lBQ2hHLE9BQU8sVUFBVSxDQUFDLE1BQU0sRUFBRTtRQUNsQixJQUFBLEtBQUEsT0FBd0IsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLDBCQUEwQixDQUFDLEVBQUUsSUFBQSxFQUF4RSxXQUFXLFFBQUEsRUFBRSxNQUFNLFFBQXFELENBQUM7UUFDaEYsSUFBSSxNQUFNLEtBQUssMkJBQWUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQzlELFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxXQUFXLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwRjtLQUNGO0lBRUQsOEZBQThGO0lBQzlGLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUNwQixJQUFNLFdBQVcsR0FBRywyQkFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsSUFBTSxZQUFZLEdBQUc7WUFDbkIsb0RBQWtELFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQUk7WUFDMUUsdUVBQXVFO1NBQ3hFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osSUFBSSxXQUFXLENBQUMseUJBQXlCLEtBQUssTUFBTSxFQUFFO1lBQ3BELHNDQUFzQztZQUN0QyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzVCO2FBQU0sSUFBSSxXQUFXLENBQUMseUJBQXlCLEtBQUssT0FBTyxFQUFFO1lBQzVELE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDL0I7S0FDRjtBQUNILENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuZ01vY2tzVW5pdmVyc2UgZnJvbSAnLi4vY29tbW9uL25nLW1vY2tzLXVuaXZlcnNlJztcblxuZXhwb3J0IGRlZmF1bHQgKGNoZWNrUmVzZXQ6IEFycmF5PFthbnksIGFueSwgYW55P10+KSA9PiB7XG4gIGNvbnN0IHNob3dFcnJvcjogc3RyaW5nW10gPSBbXTtcblxuICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogYmVjYXVzZSBvZiB0aGUgaW5zdGFsbGVkIGdsb2JhbCBzY29wZSBzd2l0Y2hlciB3ZSBjYW5ub3QgdGVzdCB0aGlzIHBhcnRcbiAgd2hpbGUgKGNoZWNrUmVzZXQubGVuZ3RoKSB7XG4gICAgY29uc3QgW2RlY2xhcmF0aW9uLCBjb25maWddID0gY2hlY2tSZXNldC5wb3AoKSB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBbXTtcbiAgICBpZiAoY29uZmlnID09PSBuZ01vY2tzVW5pdmVyc2UuY29uZmlnSW5zdGFuY2UuZ2V0KGRlY2xhcmF0aW9uKSkge1xuICAgICAgc2hvd0Vycm9yLnB1c2godHlwZW9mIGRlY2xhcmF0aW9uID09PSAnZnVuY3Rpb24nID8gZGVjbGFyYXRpb24ubmFtZSA6IGRlY2xhcmF0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWY6IGJlY2F1c2Ugb2YgdGhlIGluc3RhbGxlZCBnbG9iYWwgc2NvcGUgc3dpdGNoZXIgd2UgY2Fubm90IHRlc3QgdGhpcyBwYXJ0XG4gIGlmIChzaG93RXJyb3IubGVuZ3RoKSB7XG4gICAgY29uc3QgZ2xvYmFsRmxhZ3MgPSBuZ01vY2tzVW5pdmVyc2UuZ2xvYmFsLmdldCgnZmxhZ3MnKTtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBbXG4gICAgICBgTW9ja0luc3RhbmNlOiBzaWRlIGVmZmVjdHMgaGF2ZSBiZWVuIGRldGVjdGVkICgke3Nob3dFcnJvci5qb2luKCcsICcpfSkuYCxcbiAgICAgIGBGb3Jnb3QgdG8gYWRkIE1vY2tJbnN0YW5jZS5zY29wZSgpIG9yIHRvIGNhbGwgTW9ja0luc3RhbmNlLnJlc3RvcmUoKT9gLFxuICAgIF0uam9pbignICcpO1xuICAgIGlmIChnbG9iYWxGbGFncy5vbk1vY2tJbnN0YW5jZVJlc3RvcmVOZWVkID09PSAnd2FybicpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oZXJyb3JNZXNzYWdlKTtcbiAgICB9IGVsc2UgaWYgKGdsb2JhbEZsYWdzLm9uTW9ja0luc3RhbmNlUmVzdG9yZU5lZWQgPT09ICd0aHJvdycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufTtcbiJdfQ==