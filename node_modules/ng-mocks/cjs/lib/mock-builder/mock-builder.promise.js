"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockBuilderPromise = void 0;
var testing_1 = require("@angular/core/testing");
var core_helpers_1 = require("../common/core.helpers");
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var func_is_ng_module_def_with_providers_1 = require("../common/func.is-ng-module-def-with-providers");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var mock_builder_stash_1 = require("./mock-builder-stash");
var add_missing_keep_declarations_and_modules_1 = __importDefault(require("./promise/add-missing-keep-declarations-and-modules"));
var add_missing_mock_declarations_and_modules_1 = __importDefault(require("./promise/add-missing-mock-declarations-and-modules"));
var add_requested_providers_1 = __importDefault(require("./promise/add-requested-providers"));
var apply_platform_modules_1 = __importDefault(require("./promise/apply-platform-modules"));
var create_ng_mocks_overrides_token_1 = __importDefault(require("./promise/create-ng-mocks-overrides-token"));
var create_ng_mocks_token_1 = __importDefault(require("./promise/create-ng-mocks-token"));
var create_ng_mocks_touches_token_1 = __importDefault(require("./promise/create-ng-mocks-touches-token"));
var detect_wrong_declarations_1 = __importDefault(require("./promise/detect-wrong-declarations"));
var handle_entry_components_1 = __importDefault(require("./promise/handle-entry-components"));
var handle_root_providers_1 = __importDefault(require("./promise/handle-root-providers"));
var init_ng_modules_1 = __importDefault(require("./promise/init-ng-modules"));
var init_universe_1 = __importDefault(require("./promise/init-universe"));
var parse_mock_arguments_1 = __importDefault(require("./promise/parse-mock-arguments"));
var parse_provider_1 = __importDefault(require("./promise/parse-provider"));
var normaliseModule = function (module) {
    return (0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(module)
        ? { def: module.ngModule, providers: module.providers }
        : { def: module, providers: undefined };
};
var generateProviderValue = function (provider, existing, multi) {
    return multi ? __spreadArray(__spreadArray([], __read((Array.isArray(existing) ? existing : /* istanbul ignore next */ [])), false), [provider], false) : provider;
};
var defaultMock = {}; // simulating Symbol
var MockBuilderPromise = /** @class */ (function () {
    function MockBuilderPromise() {
        this.beforeCC = new Set();
        this.configDef = new Map();
        this.defProviders = new Map();
        this.defValue = new Map();
        this.excludeDef = new Set();
        this.keepDef = new Set();
        this.mockDef = new Set();
        this.providerDef = new Map();
        this.replaceDef = new Set();
        this.stash = new mock_builder_stash_1.MockBuilderStash();
        // istanbul ignore else
        // tslint:disable-next-line strict-type-predicates
        if (typeof Symbol !== 'undefined') {
            this[Symbol.toStringTag] = 'Promise';
        }
    }
    MockBuilderPromise.prototype.beforeCompileComponents = function (callback) {
        this.beforeCC.add(callback);
        return this;
    };
    MockBuilderPromise.prototype.build = function () {
        this.stash.backup();
        ng_mocks_universe_1.default.config.set('mockNgDefResolver', new Map());
        var params = this.combineParams();
        var ngModule = (0, init_ng_modules_1.default)(params, (0, init_universe_1.default)(params));
        (0, detect_wrong_declarations_1.default)(params);
        (0, add_missing_keep_declarations_and_modules_1.default)(ngModule, params);
        (0, add_missing_mock_declarations_and_modules_1.default)(ngModule, params);
        (0, add_requested_providers_1.default)(ngModule, params);
        (0, handle_root_providers_1.default)(ngModule, params);
        (0, handle_entry_components_1.default)(ngModule);
        (0, apply_platform_modules_1.default)();
        ngModule.providers.push((0, create_ng_mocks_token_1.default)());
        ngModule.providers.push((0, create_ng_mocks_touches_token_1.default)());
        ngModule.providers.push((0, create_ng_mocks_overrides_token_1.default)(this.replaceDef, this.defValue));
        ng_mocks_universe_1.default.config.delete('mockNgDefResolver');
        this.stash.restore();
        return ngModule;
    };
    // istanbul ignore next
    MockBuilderPromise.prototype.catch = function (reject) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.then().catch(reject)];
            });
        });
    };
    MockBuilderPromise.prototype.exclude = function (def) {
        this.wipe(def);
        this.excludeDef.add(def);
        return this;
    };
    // istanbul ignore next
    MockBuilderPromise.prototype.finally = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.then().finally(callback)];
            });
        });
    };
    MockBuilderPromise.prototype.keep = function (input, config) {
        var _a = normaliseModule(input), def = _a.def, providers = _a.providers;
        var existing = this.keepDef.has(def) ? this.defProviders.get(def) : [];
        this.wipe(def);
        this.keepDef.add(def);
        // a magic to support modules with providers.
        if (providers) {
            this.defProviders.set(def, __spreadArray(__spreadArray([], __read((existing || /* istanbul ignore next */ [])), false), __read(providers), false));
        }
        if (config) {
            this.configDef.set(def, config);
        }
        else {
            this.configDef.delete(def);
        }
        return this;
    };
    MockBuilderPromise.prototype.mock = function (input, a1, a2) {
        if (a1 === void 0) { a1 = defaultMock; }
        var _a = normaliseModule(input), def = _a.def, providers = _a.providers;
        var _b = (0, parse_mock_arguments_1.default)(def, a1, a2, defaultMock), config = _b.config, mock = _b.mock;
        var existing = this.mockDef.has(def) ? this.defProviders.get(def) : [];
        this.wipe(def);
        this.mockDef.add(def);
        // a magic to support modules with providers.
        if (providers) {
            this.defProviders.set(def, __spreadArray(__spreadArray([], __read((existing || /* istanbul ignore next */ [])), false), __read(providers), false));
        }
        this.setDefValue(def, mock);
        this.setConfigDef(def, config);
        return this;
    };
    MockBuilderPromise.prototype.provide = function (def) {
        var e_1, _a;
        try {
            for (var _b = __values((0, core_helpers_1.flatten)(def)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var provider = _c.value;
                var _d = (0, parse_provider_1.default)(provider), provide = _d.provide, multi = _d.multi;
                var existing = this.providerDef.has(provide) ? this.providerDef.get(provide) : [];
                this.wipe(provide);
                this.providerDef.set(provide, generateProviderValue(provider, existing, multi));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this;
    };
    MockBuilderPromise.prototype.replace = function (source, destination, config) {
        if (!(0, func_is_ng_def_1.isNgDef)(destination) || !(0, func_is_ng_def_1.isNgDef)(source) || (0, func_is_ng_def_1.isNgDef)(destination, 'i') || (0, func_is_ng_def_1.isNgDef)(source, 'i')) {
            throw new Error('Cannot replace the declaration, both have to be a Module, a Component, a Directive or a Pipe, for Providers use `.mock` or `.provide`');
        }
        this.wipe(source);
        this.replaceDef.add(source);
        this.defValue.set(source, destination);
        if (config) {
            this.configDef.set(source, config);
        }
        else {
            this.configDef.delete(source);
        }
        return this;
    };
    MockBuilderPromise.prototype.then = function (fulfill, reject) {
        return __awaiter(this, void 0, void 0, function () {
            var promise;
            var _this = this;
            return __generator(this, function (_a) {
                promise = new Promise(function (resolve) {
                    var e_2, _a;
                    var testBed = testing_1.TestBed.configureTestingModule(_this.build());
                    try {
                        for (var _b = __values((0, core_helpers_1.mapValues)(_this.beforeCC)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var callback = _c.value;
                            callback(testBed);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    var testBedPromise = testBed.compileComponents();
                    testBedPromise.then(function () {
                        resolve({ testBed: testBed });
                    });
                });
                return [2 /*return*/, promise.then(fulfill, reject)];
            });
        });
    };
    MockBuilderPromise.prototype.combineParams = function () {
        return {
            configDef: this.configDef,
            defProviders: this.defProviders,
            defValue: this.defValue,
            excludeDef: this.excludeDef,
            keepDef: this.keepDef,
            mockDef: this.mockDef,
            providerDef: this.providerDef,
            replaceDef: this.replaceDef,
        };
    };
    MockBuilderPromise.prototype.setConfigDef = function (def, config) {
        if (config) {
            this.configDef.set(def, config);
        }
        else {
            this.configDef.delete(def);
        }
    };
    MockBuilderPromise.prototype.setDefValue = function (def, mock) {
        if (mock !== defaultMock) {
            this.defValue.set(def, mock);
        }
        else {
            this.defValue.delete(def);
        }
    };
    MockBuilderPromise.prototype.wipe = function (def) {
        this.defProviders.delete(def);
        this.defValue.delete(def);
        this.excludeDef.delete(def);
        this.keepDef.delete(def);
        this.mockDef.delete(def);
        this.providerDef.delete(def);
        this.replaceDef.delete(def);
    };
    return MockBuilderPromise;
}());
exports.MockBuilderPromise = MockBuilderPromise;
//# sourceMappingURL=data:application/json;base64,