import { NgModule, Provider } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { Type } from '../common/core.types';
import { MockBuilderStash } from './mock-builder-stash';
import { BuilderData } from './promise/types';
import { IMockBuilder, IMockBuilderConfig, IMockBuilderResult } from './types';
export interface MockBuilderPromise {
    [Symbol.toStringTag]: 'Promise';
}
export declare class MockBuilderPromise implements IMockBuilder {
    protected beforeCC: Set<(testBed: typeof TestBed) => void>;
    protected configDef: BuilderData['configDef'];
    protected defProviders: BuilderData['defProviders'];
    protected defValue: BuilderData['defValue'];
    protected excludeDef: BuilderData['excludeDef'];
    protected keepDef: BuilderData['keepDef'];
    protected mockDef: BuilderData['mockDef'];
    protected providerDef: BuilderData['providerDef'];
    protected replaceDef: BuilderData['replaceDef'];
    protected stash: MockBuilderStash;
    constructor();
    beforeCompileComponents(callback: (testBed: typeof TestBed) => void): this;
    build(): NgModule;
    catch(reject?: ((reason: any) => PromiseLike<never>) | undefined | null): Promise<IMockBuilderResult>;
    exclude(def: any): this;
    finally(callback?: (() => void) | null | undefined): Promise<IMockBuilderResult>;
    keep(input: any, config?: IMockBuilderConfig): this;
    mock(input: any, a1?: any, a2?: any): this;
    provide(def: Provider): this;
    replace(source: Type<any>, destination: Type<any>, config?: IMockBuilderConfig): this;
    then<TResult1 = IMockBuilderResult>(fulfill?: ((value: IMockBuilderResult) => PromiseLike<TResult1>) | undefined | null, reject?: ((reason: any) => PromiseLike<any>) | undefined | null): Promise<TResult1>;
    private combineParams;
    private setConfigDef;
    private setDefValue;
    private wipe;
}
