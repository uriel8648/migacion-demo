"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../../common/core.helpers");
var error_jest_mock_1 = __importDefault(require("../../common/error.jest-mock"));
var func_is_ng_def_1 = require("../../common/func.is-ng-def");
var func_is_ng_injection_token_1 = require("../../common/func.is-ng-injection-token");
var ng_mocks_universe_1 = __importDefault(require("../../common/ng-mocks-universe"));
var skipDef = function (def) {
    return ng_mocks_universe_1.default.touches.has(def) || (0, func_is_ng_def_1.isNgDef)(def) || (0, func_is_ng_injection_token_1.isNgInjectionToken)(def) || typeof def === 'string';
};
exports.default = (function (params) {
    var e_1, _a;
    try {
        for (var _b = __values((0, core_helpers_1.flatten)([(0, core_helpers_1.mapValues)(params.keepDef), (0, core_helpers_1.mapValues)(params.mockDef)])), _c = _b.next(); !_c.done; _c = _b.next()) {
            var def = _c.value;
            if (skipDef(def)) {
                continue;
            }
            (0, error_jest_mock_1.default)(def);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0ZWN0LXdyb25nLWRlY2xhcmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWJ1aWxkZXIvcHJvbWlzZS9kZXRlY3Qtd3JvbmctZGVjbGFyYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwREFBK0Q7QUFDL0QsaUZBQXlEO0FBQ3pELDhEQUFzRDtBQUN0RCxzRkFBNkU7QUFDN0UscUZBQTZEO0FBSTdELElBQU0sT0FBTyxHQUFHLFVBQUMsR0FBUTtJQUN2QixPQUFBLDJCQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFBLHdCQUFPLEVBQUMsR0FBRyxDQUFDLElBQUksSUFBQSwrQ0FBa0IsRUFBQyxHQUFHLENBQUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRO0FBQXRHLENBQXNHLENBQUM7QUFFekcsbUJBQWUsVUFBQyxNQUFtQjs7O1FBQ2pDLEtBQWtCLElBQUEsS0FBQSxTQUFBLElBQUEsc0JBQU8sRUFBQyxDQUFDLElBQUEsd0JBQVMsRUFBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBQSx3QkFBUyxFQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7WUFBOUUsSUFBTSxHQUFHLFdBQUE7WUFDWixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDaEIsU0FBUzthQUNWO1lBQ0QsSUFBQSx5QkFBYSxFQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCOzs7Ozs7Ozs7QUFDSCxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmbGF0dGVuLCBtYXBWYWx1ZXMgfSBmcm9tICcuLi8uLi9jb21tb24vY29yZS5oZWxwZXJzJztcbmltcG9ydCBlcnJvckplc3RNb2NrIGZyb20gJy4uLy4uL2NvbW1vbi9lcnJvci5qZXN0LW1vY2snO1xuaW1wb3J0IHsgaXNOZ0RlZiB9IGZyb20gJy4uLy4uL2NvbW1vbi9mdW5jLmlzLW5nLWRlZic7XG5pbXBvcnQgeyBpc05nSW5qZWN0aW9uVG9rZW4gfSBmcm9tICcuLi8uLi9jb21tb24vZnVuYy5pcy1uZy1pbmplY3Rpb24tdG9rZW4nO1xuaW1wb3J0IG5nTW9ja3NVbml2ZXJzZSBmcm9tICcuLi8uLi9jb21tb24vbmctbW9ja3MtdW5pdmVyc2UnO1xuXG5pbXBvcnQgeyBCdWlsZGVyRGF0YSB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBza2lwRGVmID0gKGRlZjogYW55KTogYm9vbGVhbiA9PlxuICBuZ01vY2tzVW5pdmVyc2UudG91Y2hlcy5oYXMoZGVmKSB8fCBpc05nRGVmKGRlZikgfHwgaXNOZ0luamVjdGlvblRva2VuKGRlZikgfHwgdHlwZW9mIGRlZiA9PT0gJ3N0cmluZyc7XG5cbmV4cG9ydCBkZWZhdWx0IChwYXJhbXM6IEJ1aWxkZXJEYXRhKTogdm9pZCA9PiB7XG4gIGZvciAoY29uc3QgZGVmIG9mIGZsYXR0ZW4oW21hcFZhbHVlcyhwYXJhbXMua2VlcERlZiksIG1hcFZhbHVlcyhwYXJhbXMubW9ja0RlZildKSkge1xuICAgIGlmIChza2lwRGVmKGRlZikpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBlcnJvckplc3RNb2NrKGRlZik7XG4gIH1cbn07XG4iXX0=