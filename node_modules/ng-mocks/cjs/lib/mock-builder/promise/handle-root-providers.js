"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../../common/core.helpers");
var core_tokens_1 = require("../../common/core.tokens");
var func_is_ng_injection_token_1 = require("../../common/func.is-ng-injection-token");
var ng_mocks_universe_1 = __importDefault(require("../../common/ng-mocks-universe"));
var helper_resolve_provider_1 = __importDefault(require("../../mock-service/helper.resolve-provider"));
var helper_use_factory_1 = __importDefault(require("../../mock-service/helper.use-factory"));
var get_root_provider_parameters_1 = __importDefault(require("./get-root-provider-parameters"));
// Mocking root providers.
exports.default = (function (ngModule, _a) {
    var e_1, _b;
    var keepDef = _a.keepDef, mockDef = _a.mockDef;
    // Adding missed providers.
    var parameters = keepDef.has(core_tokens_1.NG_MOCKS_ROOT_PROVIDERS) ? new Set() : (0, get_root_provider_parameters_1.default)(mockDef);
    if (parameters.size) {
        var parametersMap = new Map();
        var _loop_1 = function (parameter) {
            var mock = (0, helper_resolve_provider_1.default)(parameter, parametersMap);
            if (mock) {
                ngModule.providers.push(mock);
            }
            else if ((0, func_is_ng_injection_token_1.isNgInjectionToken)(parameter)) {
                var multi_1 = ng_mocks_universe_1.default.config.has('ngMocksMulti') && ng_mocks_universe_1.default.config.get('ngMocksMulti').has(parameter);
                ngModule.providers.push((0, helper_use_factory_1.default)(parameter, function () { return (multi_1 ? [] : undefined); }));
            }
        };
        try {
            for (var _c = __values((0, core_helpers_1.mapValues)(parameters)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var parameter = _d.value;
                _loop_1(parameter);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLXJvb3QtcHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL21vY2stYnVpbGRlci9wcm9taXNlL2hhbmRsZS1yb290LXByb3ZpZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMERBQXNEO0FBQ3RELHdEQUFtRTtBQUNuRSxzRkFBNkU7QUFDN0UscUZBQTZEO0FBQzdELHVHQUErRTtBQUMvRSw2RkFBcUU7QUFFckUsZ0dBQXVFO0FBR3ZFLDBCQUEwQjtBQUMxQixtQkFBZSxVQUFDLFFBQWdCLEVBQUUsRUFBaUM7O1FBQS9CLE9BQU8sYUFBQSxFQUFFLE9BQU8sYUFBQTtJQUNsRCwyQkFBMkI7SUFDM0IsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFBLHNDQUF5QixFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pHLElBQUksVUFBVSxDQUFDLElBQUksRUFBRTtRQUNuQixJQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO2dDQUNyQixTQUFTO1lBQ2xCLElBQU0sSUFBSSxHQUFHLElBQUEsaUNBQXFCLEVBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQzdELElBQUksSUFBSSxFQUFFO2dCQUNSLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQy9CO2lCQUFNLElBQUksSUFBQSwrQ0FBa0IsRUFBQyxTQUFTLENBQUMsRUFBRTtnQkFDeEMsSUFBTSxPQUFLLEdBQ1QsMkJBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUEsNEJBQWdCLEVBQUMsU0FBUyxFQUFFLGNBQU0sT0FBQSxDQUFDLE9BQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFDLENBQUM7YUFDdEY7OztZQVJILEtBQXdCLElBQUEsS0FBQSxTQUFBLElBQUEsd0JBQVMsRUFBQyxVQUFVLENBQUMsQ0FBQSxnQkFBQTtnQkFBeEMsSUFBTSxTQUFTLFdBQUE7d0JBQVQsU0FBUzthQVNuQjs7Ozs7Ozs7O0tBQ0Y7QUFDSCxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXBWYWx1ZXMgfSBmcm9tICcuLi8uLi9jb21tb24vY29yZS5oZWxwZXJzJztcbmltcG9ydCB7IE5HX01PQ0tTX1JPT1RfUFJPVklERVJTIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUudG9rZW5zJztcbmltcG9ydCB7IGlzTmdJbmplY3Rpb25Ub2tlbiB9IGZyb20gJy4uLy4uL2NvbW1vbi9mdW5jLmlzLW5nLWluamVjdGlvbi10b2tlbic7XG5pbXBvcnQgbmdNb2Nrc1VuaXZlcnNlIGZyb20gJy4uLy4uL2NvbW1vbi9uZy1tb2Nrcy11bml2ZXJzZSc7XG5pbXBvcnQgaGVscGVyUmVzb2x2ZVByb3ZpZGVyIGZyb20gJy4uLy4uL21vY2stc2VydmljZS9oZWxwZXIucmVzb2x2ZS1wcm92aWRlcic7XG5pbXBvcnQgaGVscGVyVXNlRmFjdG9yeSBmcm9tICcuLi8uLi9tb2NrLXNlcnZpY2UvaGVscGVyLnVzZS1mYWN0b3J5JztcblxuaW1wb3J0IGdldFJvb3RQcm92aWRlclBhcmFtZXRlcnMgZnJvbSAnLi9nZXQtcm9vdC1wcm92aWRlci1wYXJhbWV0ZXJzJztcbmltcG9ydCB7IEJ1aWxkZXJEYXRhLCBOZ01ldGEgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gTW9ja2luZyByb290IHByb3ZpZGVycy5cbmV4cG9ydCBkZWZhdWx0IChuZ01vZHVsZTogTmdNZXRhLCB7IGtlZXBEZWYsIG1vY2tEZWYgfTogQnVpbGRlckRhdGEpOiB2b2lkID0+IHtcbiAgLy8gQWRkaW5nIG1pc3NlZCBwcm92aWRlcnMuXG4gIGNvbnN0IHBhcmFtZXRlcnMgPSBrZWVwRGVmLmhhcyhOR19NT0NLU19ST09UX1BST1ZJREVSUykgPyBuZXcgU2V0KCkgOiBnZXRSb290UHJvdmlkZXJQYXJhbWV0ZXJzKG1vY2tEZWYpO1xuICBpZiAocGFyYW1ldGVycy5zaXplKSB7XG4gICAgY29uc3QgcGFyYW1ldGVyc01hcCA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiBtYXBWYWx1ZXMocGFyYW1ldGVycykpIHtcbiAgICAgIGNvbnN0IG1vY2sgPSBoZWxwZXJSZXNvbHZlUHJvdmlkZXIocGFyYW1ldGVyLCBwYXJhbWV0ZXJzTWFwKTtcbiAgICAgIGlmIChtb2NrKSB7XG4gICAgICAgIG5nTW9kdWxlLnByb3ZpZGVycy5wdXNoKG1vY2spO1xuICAgICAgfSBlbHNlIGlmIChpc05nSW5qZWN0aW9uVG9rZW4ocGFyYW1ldGVyKSkge1xuICAgICAgICBjb25zdCBtdWx0aSA9XG4gICAgICAgICAgbmdNb2Nrc1VuaXZlcnNlLmNvbmZpZy5oYXMoJ25nTW9ja3NNdWx0aScpICYmIG5nTW9ja3NVbml2ZXJzZS5jb25maWcuZ2V0KCduZ01vY2tzTXVsdGknKS5oYXMocGFyYW1ldGVyKTtcbiAgICAgICAgbmdNb2R1bGUucHJvdmlkZXJzLnB1c2goaGVscGVyVXNlRmFjdG9yeShwYXJhbWV0ZXIsICgpID0+IChtdWx0aSA/IFtdIDogdW5kZWZpbmVkKSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiJdfQ==