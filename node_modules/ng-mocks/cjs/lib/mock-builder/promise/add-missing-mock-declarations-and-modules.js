"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../../common/core.helpers");
var ng_mocks_universe_1 = __importDefault(require("../../common/ng-mocks-universe"));
var add_missing_definition_1 = __importDefault(require("./add-missing-definition"));
exports.default = (function (ngModule, _a) {
    var e_1, _b;
    var mockDef = _a.mockDef, configDef = _a.configDef;
    try {
        // Adding missed mock providers to test bed.
        for (var _c = __values((0, core_helpers_1.mapValues)(mockDef)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var def = _d.value;
            if ((0, add_missing_definition_1.default)(def, configDef)) {
                continue;
            }
            var mock = ng_mocks_universe_1.default.builtProviders.get(def);
            ngModule.providers.push(mock);
            ng_mocks_universe_1.default.touches.add(def);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLW1pc3NpbmctbW9jay1kZWNsYXJhdGlvbnMtYW5kLW1vZHVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1idWlsZGVyL3Byb21pc2UvYWRkLW1pc3NpbmctbW9jay1kZWNsYXJhdGlvbnMtYW5kLW1vZHVsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBEQUFzRDtBQUN0RCxxRkFBNkQ7QUFFN0Qsb0ZBQTREO0FBRzVELG1CQUFlLFVBQUMsUUFBZ0IsRUFBRSxFQUFtQzs7UUFBakMsT0FBTyxhQUFBLEVBQUUsU0FBUyxlQUFBOztRQUNwRCw0Q0FBNEM7UUFDNUMsS0FBa0IsSUFBQSxLQUFBLFNBQUEsSUFBQSx3QkFBUyxFQUFDLE9BQU8sQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO1lBQWpDLElBQU0sR0FBRyxXQUFBO1lBQ1osSUFBSSxJQUFBLGdDQUFvQixFQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFBRTtnQkFDeEMsU0FBUzthQUNWO1lBRUQsSUFBTSxJQUFJLEdBQUcsMkJBQWUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JELFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLDJCQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQzs7Ozs7Ozs7O0FBQ0gsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwVmFsdWVzIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUuaGVscGVycyc7XG5pbXBvcnQgbmdNb2Nrc1VuaXZlcnNlIGZyb20gJy4uLy4uL2NvbW1vbi9uZy1tb2Nrcy11bml2ZXJzZSc7XG5cbmltcG9ydCBhZGRNaXNzaW5nRGVmaW5pdGlvbiBmcm9tICcuL2FkZC1taXNzaW5nLWRlZmluaXRpb24nO1xuaW1wb3J0IHsgQnVpbGRlckRhdGEsIE5nTWV0YSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCAobmdNb2R1bGU6IE5nTWV0YSwgeyBtb2NrRGVmLCBjb25maWdEZWYgfTogQnVpbGRlckRhdGEpOiB2b2lkID0+IHtcbiAgLy8gQWRkaW5nIG1pc3NlZCBtb2NrIHByb3ZpZGVycyB0byB0ZXN0IGJlZC5cbiAgZm9yIChjb25zdCBkZWYgb2YgbWFwVmFsdWVzKG1vY2tEZWYpKSB7XG4gICAgaWYgKGFkZE1pc3NpbmdEZWZpbml0aW9uKGRlZiwgY29uZmlnRGVmKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgbW9jayA9IG5nTW9ja3NVbml2ZXJzZS5idWlsdFByb3ZpZGVycy5nZXQoZGVmKTtcbiAgICBuZ01vZHVsZS5wcm92aWRlcnMucHVzaChtb2NrKTtcbiAgICBuZ01vY2tzVW5pdmVyc2UudG91Y2hlcy5hZGQoZGVmKTtcbiAgfVxufTtcbiJdfQ==