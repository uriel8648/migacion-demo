"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var func_is_ng_def_1 = require("../../common/func.is-ng-def");
var ng_mocks_universe_1 = __importDefault(require("../../common/ng-mocks-universe"));
var mock_helper_stub_1 = __importDefault(require("../../mock-helper/mock-helper.stub"));
var helper_use_factory_1 = __importDefault(require("../../mock-service/helper.use-factory"));
var mock_provider_1 = __importDefault(require("../../mock-service/mock-provider"));
var createInstance = function (existing, instance, config, isPipeFunc) {
    var params = isPipeFunc ? { transform: instance } : instance;
    if (config.precise) {
        return params;
    }
    return (0, mock_helper_stub_1.default)(existing, params);
};
exports.default = (function (def, defValue) {
    if ((0, func_is_ng_def_1.isNgDef)(def, 'i') && defValue.has(def)) {
        var config_1 = ng_mocks_universe_1.default.config.get(def) || {};
        var instance_1 = defValue.get(def);
        var isPipeFunc_1 = (0, func_is_ng_def_1.isNgDef)(def, 'p') && typeof instance_1 === 'function';
        ng_mocks_universe_1.default.builtProviders.set(def, (0, helper_use_factory_1.default)(def, undefined, function (existing) { return createInstance(existing, instance_1, config_1, isPipeFunc_1); }));
    }
    else if ((0, func_is_ng_def_1.isNgDef)(def, 'i')) {
        ng_mocks_universe_1.default.builtProviders.set(def, (0, mock_provider_1.default)(def, true));
    }
    if (!(0, func_is_ng_def_1.isNgDef)(def) && defValue.has(def)) {
        var instance_2 = defValue.get(def);
        ng_mocks_universe_1.default.builtProviders.set(def, (0, helper_use_factory_1.default)(def, undefined, function () { return instance_2; }));
    }
    else if (!(0, func_is_ng_def_1.isNgDef)(def)) {
        ng_mocks_universe_1.default.builtProviders.set(def, (0, mock_provider_1.default)(def, true));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ5LW1vY2stcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1idWlsZGVyL3Byb21pc2UvdHJ5LW1vY2stcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4REFBc0Q7QUFDdEQscUZBQTZEO0FBQzdELHdGQUFnRTtBQUNoRSw2RkFBcUU7QUFDckUsbUZBQTREO0FBRzVELElBQU0sY0FBYyxHQUFHLFVBQUMsUUFBYSxFQUFFLFFBQWEsRUFBRSxNQUE4QixFQUFFLFVBQW1CO0lBQ3ZHLElBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUMvRCxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUVELE9BQU8sSUFBQSwwQkFBYyxFQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMxQyxDQUFDLENBQUM7QUFFRixtQkFBZSxVQUFDLEdBQVEsRUFBRSxRQUF1QjtJQUMvQyxJQUFJLElBQUEsd0JBQU8sRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUMxQyxJQUFNLFFBQU0sR0FBMkIsMkJBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM3RSxJQUFNLFVBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLElBQU0sWUFBVSxHQUFHLElBQUEsd0JBQU8sRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksT0FBTyxVQUFRLEtBQUssVUFBVSxDQUFDO1FBQ3ZFLDJCQUFlLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FDaEMsR0FBRyxFQUNILElBQUEsNEJBQWdCLEVBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxVQUFBLFFBQVEsSUFBSSxPQUFBLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBUSxFQUFFLFFBQU0sRUFBRSxZQUFVLENBQUMsRUFBdEQsQ0FBc0QsQ0FBQyxDQUNyRyxDQUFDO0tBQ0g7U0FBTSxJQUFJLElBQUEsd0JBQU8sRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDNUIsMkJBQWUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFBLHVCQUFZLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDbEU7SUFFRCxJQUFJLENBQUMsSUFBQSx3QkFBTyxFQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEMsSUFBTSxVQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQywyQkFBZSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQ2hDLEdBQUcsRUFDSCxJQUFBLDRCQUFnQixFQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsY0FBTSxPQUFBLFVBQVEsRUFBUixDQUFRLENBQUMsQ0FDakQsQ0FBQztLQUNIO1NBQU0sSUFBSSxDQUFDLElBQUEsd0JBQU8sRUFBQyxHQUFHLENBQUMsRUFBRTtRQUN4QiwyQkFBZSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUEsdUJBQVksRUFBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUNsRTtBQUNILENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTmdEZWYgfSBmcm9tICcuLi8uLi9jb21tb24vZnVuYy5pcy1uZy1kZWYnO1xuaW1wb3J0IG5nTW9ja3NVbml2ZXJzZSBmcm9tICcuLi8uLi9jb21tb24vbmctbW9ja3MtdW5pdmVyc2UnO1xuaW1wb3J0IG1vY2tIZWxwZXJTdHViIGZyb20gJy4uLy4uL21vY2staGVscGVyL21vY2staGVscGVyLnN0dWInO1xuaW1wb3J0IGhlbHBlclVzZUZhY3RvcnkgZnJvbSAnLi4vLi4vbW9jay1zZXJ2aWNlL2hlbHBlci51c2UtZmFjdG9yeSc7XG5pbXBvcnQgbW9ja1Byb3ZpZGVyIGZyb20gJy4uLy4uL21vY2stc2VydmljZS9tb2NrLXByb3ZpZGVyJztcbmltcG9ydCB7IElNb2NrQnVpbGRlckNvbmZpZ01vY2sgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IGNyZWF0ZUluc3RhbmNlID0gKGV4aXN0aW5nOiBhbnksIGluc3RhbmNlOiBhbnksIGNvbmZpZzogSU1vY2tCdWlsZGVyQ29uZmlnTW9jaywgaXNQaXBlRnVuYzogYm9vbGVhbik6IGFueSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IGlzUGlwZUZ1bmMgPyB7IHRyYW5zZm9ybTogaW5zdGFuY2UgfSA6IGluc3RhbmNlO1xuICBpZiAoY29uZmlnLnByZWNpc2UpIHtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIG1vY2tIZWxwZXJTdHViKGV4aXN0aW5nLCBwYXJhbXMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKGRlZjogYW55LCBkZWZWYWx1ZTogTWFwPGFueSwgYW55Pik6IHZvaWQgPT4ge1xuICBpZiAoaXNOZ0RlZihkZWYsICdpJykgJiYgZGVmVmFsdWUuaGFzKGRlZikpIHtcbiAgICBjb25zdCBjb25maWc6IElNb2NrQnVpbGRlckNvbmZpZ01vY2sgPSBuZ01vY2tzVW5pdmVyc2UuY29uZmlnLmdldChkZWYpIHx8IHt9O1xuICAgIGNvbnN0IGluc3RhbmNlID0gZGVmVmFsdWUuZ2V0KGRlZik7XG4gICAgY29uc3QgaXNQaXBlRnVuYyA9IGlzTmdEZWYoZGVmLCAncCcpICYmIHR5cGVvZiBpbnN0YW5jZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICBuZ01vY2tzVW5pdmVyc2UuYnVpbHRQcm92aWRlcnMuc2V0KFxuICAgICAgZGVmLFxuICAgICAgaGVscGVyVXNlRmFjdG9yeShkZWYsIHVuZGVmaW5lZCwgZXhpc3RpbmcgPT4gY3JlYXRlSW5zdGFuY2UoZXhpc3RpbmcsIGluc3RhbmNlLCBjb25maWcsIGlzUGlwZUZ1bmMpKSxcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTmdEZWYoZGVmLCAnaScpKSB7XG4gICAgbmdNb2Nrc1VuaXZlcnNlLmJ1aWx0UHJvdmlkZXJzLnNldChkZWYsIG1vY2tQcm92aWRlcihkZWYsIHRydWUpKTtcbiAgfVxuXG4gIGlmICghaXNOZ0RlZihkZWYpICYmIGRlZlZhbHVlLmhhcyhkZWYpKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBkZWZWYWx1ZS5nZXQoZGVmKTtcbiAgICBuZ01vY2tzVW5pdmVyc2UuYnVpbHRQcm92aWRlcnMuc2V0KFxuICAgICAgZGVmLFxuICAgICAgaGVscGVyVXNlRmFjdG9yeShkZWYsIHVuZGVmaW5lZCwgKCkgPT4gaW5zdGFuY2UpLFxuICAgICk7XG4gIH0gZWxzZSBpZiAoIWlzTmdEZWYoZGVmKSkge1xuICAgIG5nTW9ja3NVbml2ZXJzZS5idWlsdFByb3ZpZGVycy5zZXQoZGVmLCBtb2NrUHJvdmlkZXIoZGVmLCB0cnVlKSk7XG4gIH1cbn07XG4iXX0=