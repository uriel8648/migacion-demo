"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_reflect_jit_1 = __importDefault(require("../../common/core.reflect.jit"));
var core_tokens_1 = require("../../common/core.tokens");
var ng_mocks_universe_1 = __importDefault(require("../../common/ng-mocks-universe"));
var add_def_to_root_provider_parameters_1 = __importDefault(require("./add-def-to-root-provider-parameters"));
var check_root_provider_dependency_1 = __importDefault(require("./check-root-provider-dependency"));
var extract_dep_1 = __importDefault(require("./extract-dep"));
var get_root_providers_data_1 = __importDefault(require("./get-root-providers-data"));
var handle_provided_in_dependency_1 = __importDefault(require("./handle-provided-in-dependency"));
var skip_root_provider_dependency_1 = __importDefault(require("./skip-root-provider-dependency"));
exports.default = (function (mockDef) {
    var e_1, _a, e_2, _b, e_3, _c;
    var parameters = new Set();
    var _d = (0, get_root_providers_data_1.default)(), buckets = _d.buckets, touched = _d.touched;
    try {
        for (var buckets_1 = __values(buckets), buckets_1_1 = buckets_1.next(); !buckets_1_1.done; buckets_1_1 = buckets_1.next()) {
            var bucket = buckets_1_1.value;
            try {
                for (var bucket_1 = (e_2 = void 0, __values(bucket)), bucket_1_1 = bucket_1.next(); !bucket_1_1.done; bucket_1_1 = bucket_1.next()) {
                    var def = bucket_1_1.value;
                    (0, add_def_to_root_provider_parameters_1.default)(parameters, mockDef, def);
                    try {
                        for (var _e = (e_3 = void 0, __values((0, core_reflect_jit_1.default)().parameters(def))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var decorators = _f.value;
                            var provide = (0, extract_dep_1.default)(decorators);
                            (0, handle_provided_in_dependency_1.default)(provide);
                            if ((0, skip_root_provider_dependency_1.default)(provide)) {
                                continue;
                            }
                            (0, check_root_provider_dependency_1.default)(provide, touched, bucket);
                            if (mockDef.has(core_tokens_1.NG_MOCKS_ROOT_PROVIDERS) || !ng_mocks_universe_1.default.config.get('ngMocksDepsSkip').has(def)) {
                                parameters.add(provide);
                            }
                            else {
                                ng_mocks_universe_1.default.config.get('ngMocksDepsSkip').add(provide);
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (bucket_1_1 && !bucket_1_1.done && (_b = bucket_1.return)) _b.call(bucket_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (buckets_1_1 && !buckets_1_1.done && (_a = buckets_1.return)) _a.call(buckets_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return parameters;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXJvb3QtcHJvdmlkZXItcGFyYW1ldGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWJ1aWxkZXIvcHJvbWlzZS9nZXQtcm9vdC1wcm92aWRlci1wYXJhbWV0ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtRkFBMkQ7QUFDM0Qsd0RBQW1FO0FBQ25FLHFGQUE2RDtBQUU3RCw4R0FBbUY7QUFDbkYsb0dBQTJFO0FBQzNFLDhEQUF1QztBQUN2QyxzRkFBNkQ7QUFDN0Qsa0dBQXlFO0FBQ3pFLGtHQUF5RTtBQUd6RSxtQkFBZSxVQUFDLE9BQStCOztJQUM3QyxJQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUEsS0FBdUIsSUFBQSxpQ0FBb0IsR0FBRSxFQUEzQyxPQUFPLGFBQUEsRUFBRSxPQUFPLGFBQTJCLENBQUM7O1FBRXBELEtBQXFCLElBQUEsWUFBQSxTQUFBLE9BQU8sQ0FBQSxnQ0FBQSxxREFBRTtZQUF6QixJQUFNLE1BQU0sb0JBQUE7O2dCQUNmLEtBQWtCLElBQUEsMEJBQUEsU0FBQSxNQUFNLENBQUEsQ0FBQSw4QkFBQSxrREFBRTtvQkFBckIsSUFBTSxHQUFHLG1CQUFBO29CQUNaLElBQUEsNkNBQThCLEVBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQzs7d0JBRXpELEtBQXlCLElBQUEsb0JBQUEsU0FBQSxJQUFBLDBCQUFjLEdBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxnQkFBQSw0QkFBRTs0QkFBdEQsSUFBTSxVQUFVLFdBQUE7NEJBQ25CLElBQU0sT0FBTyxHQUFRLElBQUEscUJBQVUsRUFBQyxVQUFVLENBQUMsQ0FBQzs0QkFDNUMsSUFBQSx1Q0FBMEIsRUFBQyxPQUFPLENBQUMsQ0FBQzs0QkFDcEMsSUFBSSxJQUFBLHVDQUEwQixFQUFDLE9BQU8sQ0FBQyxFQUFFO2dDQUN2QyxTQUFTOzZCQUNWOzRCQUNELElBQUEsd0NBQTJCLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQzs0QkFDdEQsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUF1QixDQUFDLElBQUksQ0FBQywyQkFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0NBQ25HLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7NkJBQ3pCO2lDQUFNO2dDQUNMLDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQzs2QkFDNUQ7eUJBQ0Y7Ozs7Ozs7OztpQkFDRjs7Ozs7Ozs7O1NBQ0Y7Ozs7Ozs7OztJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb3JlUmVmbGVjdEppdCBmcm9tICcuLi8uLi9jb21tb24vY29yZS5yZWZsZWN0LmppdCc7XG5pbXBvcnQgeyBOR19NT0NLU19ST09UX1BST1ZJREVSUyB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb3JlLnRva2Vucyc7XG5pbXBvcnQgbmdNb2Nrc1VuaXZlcnNlIGZyb20gJy4uLy4uL2NvbW1vbi9uZy1tb2Nrcy11bml2ZXJzZSc7XG5cbmltcG9ydCBhZGREZWZUb1Jvb3RQcm92aWRlclBhcmFtZXRlcnMgZnJvbSAnLi9hZGQtZGVmLXRvLXJvb3QtcHJvdmlkZXItcGFyYW1ldGVycyc7XG5pbXBvcnQgY2hlY2tSb290UHJvdmlkZXJEZXBlbmRlbmN5IGZyb20gJy4vY2hlY2stcm9vdC1wcm92aWRlci1kZXBlbmRlbmN5JztcbmltcG9ydCBleHRyYWN0RGVwIGZyb20gJy4vZXh0cmFjdC1kZXAnO1xuaW1wb3J0IGdldFJvb3RQcm92aWRlcnNEYXRhIGZyb20gJy4vZ2V0LXJvb3QtcHJvdmlkZXJzLWRhdGEnO1xuaW1wb3J0IGhhbmRsZVByb3ZpZGVkSW5EZXBlbmRlbmN5IGZyb20gJy4vaGFuZGxlLXByb3ZpZGVkLWluLWRlcGVuZGVuY3knO1xuaW1wb3J0IHNraXBSb290UHJvdmlkZXJEZXBlbmRlbmN5IGZyb20gJy4vc2tpcC1yb290LXByb3ZpZGVyLWRlcGVuZGVuY3knO1xuaW1wb3J0IHsgQnVpbGRlckRhdGEgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgKG1vY2tEZWY6IEJ1aWxkZXJEYXRhWydtb2NrRGVmJ10pOiBTZXQ8YW55PiA9PiB7XG4gIGNvbnN0IHBhcmFtZXRlcnMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IHsgYnVja2V0cywgdG91Y2hlZCB9ID0gZ2V0Um9vdFByb3ZpZGVyc0RhdGEoKTtcblxuICBmb3IgKGNvbnN0IGJ1Y2tldCBvZiBidWNrZXRzKSB7XG4gICAgZm9yIChjb25zdCBkZWYgb2YgYnVja2V0KSB7XG4gICAgICBhZGREZWZUb1Jvb3RQcm92aWRlclBhcmFtZXRlcnMocGFyYW1ldGVycywgbW9ja0RlZiwgZGVmKTtcblxuICAgICAgZm9yIChjb25zdCBkZWNvcmF0b3JzIG9mIGNvcmVSZWZsZWN0Sml0KCkucGFyYW1ldGVycyhkZWYpKSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGU6IGFueSA9IGV4dHJhY3REZXAoZGVjb3JhdG9ycyk7XG4gICAgICAgIGhhbmRsZVByb3ZpZGVkSW5EZXBlbmRlbmN5KHByb3ZpZGUpO1xuICAgICAgICBpZiAoc2tpcFJvb3RQcm92aWRlckRlcGVuZGVuY3kocHJvdmlkZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjaGVja1Jvb3RQcm92aWRlckRlcGVuZGVuY3kocHJvdmlkZSwgdG91Y2hlZCwgYnVja2V0KTtcbiAgICAgICAgaWYgKG1vY2tEZWYuaGFzKE5HX01PQ0tTX1JPT1RfUFJPVklERVJTKSB8fCAhbmdNb2Nrc1VuaXZlcnNlLmNvbmZpZy5nZXQoJ25nTW9ja3NEZXBzU2tpcCcpLmhhcyhkZWYpKSB7XG4gICAgICAgICAgcGFyYW1ldGVycy5hZGQocHJvdmlkZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmdNb2Nrc1VuaXZlcnNlLmNvbmZpZy5nZXQoJ25nTW9ja3NEZXBzU2tpcCcpLmFkZChwcm92aWRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJhbWV0ZXJzO1xufTtcbiJdfQ==