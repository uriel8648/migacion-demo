"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../../common/core.helpers");
var func_get_provider_1 = __importDefault(require("../../common/func.get-provider"));
var ng_mocks_universe_1 = __importDefault(require("../../common/ng-mocks-universe"));
exports.default = (function (ngModule, _a) {
    var e_1, _b, e_2, _c;
    var providerDef = _a.providerDef;
    try {
        // Adding requested providers to test bed.
        for (var _d = __values((0, core_helpers_1.mapValues)(providerDef)), _e = _d.next(); !_e.done; _e = _d.next()) {
            var provider = _e.value;
            ngModule.providers.push(provider);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        // Analyzing providers.
        for (var _f = __values((0, core_helpers_1.flatten)(ngModule.providers)), _g = _f.next(); !_g.done; _g = _f.next()) {
            var provider = _g.value;
            var provide = (0, func_get_provider_1.default)(provider);
            ng_mocks_universe_1.default.touches.add(provide);
            if (provide !== provider && provider.deps) {
                (0, core_helpers_1.extractDependency)(provider.deps, ng_mocks_universe_1.default.config.get('ngMocksDeps'));
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
        }
        finally { if (e_2) throw e_2.error; }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLXJlcXVlc3RlZC1wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1idWlsZGVyL3Byb21pc2UvYWRkLXJlcXVlc3RlZC1wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBEQUFrRjtBQUNsRixxRkFBNkQ7QUFDN0QscUZBQTZEO0FBSTdELG1CQUFlLFVBQUMsUUFBZ0IsRUFBRSxFQUE0Qjs7UUFBMUIsV0FBVyxpQkFBQTs7UUFDN0MsMENBQTBDO1FBQzFDLEtBQXVCLElBQUEsS0FBQSxTQUFBLElBQUEsd0JBQVMsRUFBQyxXQUFXLENBQUMsQ0FBQSxnQkFBQSw0QkFBRTtZQUExQyxJQUFNLFFBQVEsV0FBQTtZQUNqQixRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuQzs7Ozs7Ozs7OztRQUVELHVCQUF1QjtRQUN2QixLQUF1QixJQUFBLEtBQUEsU0FBQSxJQUFBLHNCQUFPLEVBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO1lBQS9DLElBQU0sUUFBUSxXQUFBO1lBQ2pCLElBQU0sT0FBTyxHQUFHLElBQUEsMkJBQWUsRUFBQyxRQUFRLENBQUMsQ0FBQztZQUMxQywyQkFBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFckMsSUFBSSxPQUFPLEtBQUssUUFBUSxJQUFLLFFBQWdCLENBQUMsSUFBSSxFQUFFO2dCQUNsRCxJQUFBLGdDQUFpQixFQUFFLFFBQWdCLENBQUMsSUFBSSxFQUFFLDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2FBQ3RGO1NBQ0Y7Ozs7Ozs7OztBQUNILENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhY3REZXBlbmRlbmN5LCBmbGF0dGVuLCBtYXBWYWx1ZXMgfSBmcm9tICcuLi8uLi9jb21tb24vY29yZS5oZWxwZXJzJztcbmltcG9ydCBmdW5jR2V0UHJvdmlkZXIgZnJvbSAnLi4vLi4vY29tbW9uL2Z1bmMuZ2V0LXByb3ZpZGVyJztcbmltcG9ydCBuZ01vY2tzVW5pdmVyc2UgZnJvbSAnLi4vLi4vY29tbW9uL25nLW1vY2tzLXVuaXZlcnNlJztcblxuaW1wb3J0IHsgQnVpbGRlckRhdGEsIE5nTWV0YSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCAobmdNb2R1bGU6IE5nTWV0YSwgeyBwcm92aWRlckRlZiB9OiBCdWlsZGVyRGF0YSk6IHZvaWQgPT4ge1xuICAvLyBBZGRpbmcgcmVxdWVzdGVkIHByb3ZpZGVycyB0byB0ZXN0IGJlZC5cbiAgZm9yIChjb25zdCBwcm92aWRlciBvZiBtYXBWYWx1ZXMocHJvdmlkZXJEZWYpKSB7XG4gICAgbmdNb2R1bGUucHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpO1xuICB9XG5cbiAgLy8gQW5hbHl6aW5nIHByb3ZpZGVycy5cbiAgZm9yIChjb25zdCBwcm92aWRlciBvZiBmbGF0dGVuKG5nTW9kdWxlLnByb3ZpZGVycykpIHtcbiAgICBjb25zdCBwcm92aWRlID0gZnVuY0dldFByb3ZpZGVyKHByb3ZpZGVyKTtcbiAgICBuZ01vY2tzVW5pdmVyc2UudG91Y2hlcy5hZGQocHJvdmlkZSk7XG5cbiAgICBpZiAocHJvdmlkZSAhPT0gcHJvdmlkZXIgJiYgKHByb3ZpZGVyIGFzIGFueSkuZGVwcykge1xuICAgICAgZXh0cmFjdERlcGVuZGVuY3koKHByb3ZpZGVyIGFzIGFueSkuZGVwcywgbmdNb2Nrc1VuaXZlcnNlLmNvbmZpZy5nZXQoJ25nTW9ja3NEZXBzJykpO1xuICAgIH1cbiAgfVxufTtcbiJdfQ==