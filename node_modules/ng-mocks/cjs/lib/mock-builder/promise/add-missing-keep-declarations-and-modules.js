"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../../common/core.helpers");
var func_is_ng_injection_token_1 = require("../../common/func.is-ng-injection-token");
var ng_mocks_universe_1 = __importDefault(require("../../common/ng-mocks-universe"));
var add_missing_definition_1 = __importDefault(require("./add-missing-definition"));
exports.default = (function (ngModule, _a) {
    var e_1, _b;
    var keepDef = _a.keepDef, configDef = _a.configDef;
    try {
        // Adding missed kept providers to test bed.
        for (var _c = __values((0, core_helpers_1.mapValues)(keepDef)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var def = _d.value;
            if ((0, add_missing_definition_1.default)(def, configDef)) {
                continue;
            }
            if ((0, func_is_ng_injection_token_1.isNgInjectionToken)(def) || typeof def === 'string') {
                ng_mocks_universe_1.default.touches.add(def);
                continue;
            }
            ngModule.providers.push(def);
            ng_mocks_universe_1.default.touches.add(def);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLW1pc3Npbmcta2VlcC1kZWNsYXJhdGlvbnMtYW5kLW1vZHVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1idWlsZGVyL3Byb21pc2UvYWRkLW1pc3Npbmcta2VlcC1kZWNsYXJhdGlvbnMtYW5kLW1vZHVsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDBEQUFzRDtBQUN0RCxzRkFBNkU7QUFDN0UscUZBQTZEO0FBRTdELG9GQUE0RDtBQUc1RCxtQkFBZSxVQUFDLFFBQWdCLEVBQUUsRUFBbUM7O1FBQWpDLE9BQU8sYUFBQSxFQUFFLFNBQVMsZUFBQTs7UUFDcEQsNENBQTRDO1FBQzVDLEtBQWtCLElBQUEsS0FBQSxTQUFBLElBQUEsd0JBQVMsRUFBQyxPQUFPLENBQUMsQ0FBQSxnQkFBQSw0QkFBRTtZQUFqQyxJQUFNLEdBQUcsV0FBQTtZQUNaLElBQUksSUFBQSxnQ0FBb0IsRUFBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUU7Z0JBQ3hDLFNBQVM7YUFDVjtZQUVELElBQUksSUFBQSwrQ0FBa0IsRUFBQyxHQUFHLENBQUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7Z0JBQ3RELDJCQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDakMsU0FBUzthQUNWO1lBQ0QsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsMkJBQWUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2xDOzs7Ozs7Ozs7QUFDSCxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXBWYWx1ZXMgfSBmcm9tICcuLi8uLi9jb21tb24vY29yZS5oZWxwZXJzJztcbmltcG9ydCB7IGlzTmdJbmplY3Rpb25Ub2tlbiB9IGZyb20gJy4uLy4uL2NvbW1vbi9mdW5jLmlzLW5nLWluamVjdGlvbi10b2tlbic7XG5pbXBvcnQgbmdNb2Nrc1VuaXZlcnNlIGZyb20gJy4uLy4uL2NvbW1vbi9uZy1tb2Nrcy11bml2ZXJzZSc7XG5cbmltcG9ydCBhZGRNaXNzaW5nRGVmaW5pdGlvbiBmcm9tICcuL2FkZC1taXNzaW5nLWRlZmluaXRpb24nO1xuaW1wb3J0IHsgQnVpbGRlckRhdGEsIE5nTWV0YSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCAobmdNb2R1bGU6IE5nTWV0YSwgeyBrZWVwRGVmLCBjb25maWdEZWYgfTogQnVpbGRlckRhdGEpOiB2b2lkID0+IHtcbiAgLy8gQWRkaW5nIG1pc3NlZCBrZXB0IHByb3ZpZGVycyB0byB0ZXN0IGJlZC5cbiAgZm9yIChjb25zdCBkZWYgb2YgbWFwVmFsdWVzKGtlZXBEZWYpKSB7XG4gICAgaWYgKGFkZE1pc3NpbmdEZWZpbml0aW9uKGRlZiwgY29uZmlnRGVmKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGlzTmdJbmplY3Rpb25Ub2tlbihkZWYpIHx8IHR5cGVvZiBkZWYgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuZ01vY2tzVW5pdmVyc2UudG91Y2hlcy5hZGQoZGVmKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBuZ01vZHVsZS5wcm92aWRlcnMucHVzaChkZWYpO1xuICAgIG5nTW9ja3NVbml2ZXJzZS50b3VjaGVzLmFkZChkZWYpO1xuICB9XG59O1xuIl19