"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var isIvy = false;
try {
    // tslint:disable-next-line no-require-imports no-var-requires
    var module_1 = require('@angular/core');
    isIvy = module_1.ÉµivyEnabled;
}
catch (e) {
    // nothing to do
}
var core_define_property_1 = __importDefault(require("../../common/core.define-property"));
var core_helpers_1 = require("../../common/core.helpers");
var core_tokens_1 = require("../../common/core.tokens");
var func_is_ng_def_1 = require("../../common/func.is-ng-def");
var helper_create_clone_1 = __importDefault(require("../../mock-service/helper.create-clone"));
var EntryComponentsModule = /** @class */ (function () {
    function EntryComponentsModule(map, componentFactoryResolver) {
        var _this = this;
        this.componentFactoryResolver = componentFactoryResolver;
        this.origin = componentFactoryResolver.resolveComponentFactory;
        componentFactoryResolver.resolveComponentFactory = (0, helper_create_clone_1.default)(this.origin, undefined, undefined, function (component) { var _a; return _this.origin.call(componentFactoryResolver, (_a = map.get(component)) !== null && _a !== void 0 ? _a : component); });
    }
    return EntryComponentsModule;
}());
(0, core_define_property_1.default)(EntryComponentsModule, 'parameters', [[core_tokens_1.NG_MOCKS], [core_1.ComponentFactoryResolver]]);
exports.default = (function (ngModule) {
    var e_1, _a;
    var entryComponents = [];
    try {
        for (var _b = __values(ngModule.declarations), _c = _b.next(); !_c.done; _c = _b.next()) {
            var declaration = _c.value;
            if ((0, func_is_ng_def_1.isNgDef)(declaration, 'c')) {
                entryComponents.push(declaration);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    // the way to cause entryComponents to do its work
    var entryComponent = (0, core_helpers_1.extendClass)(EntryComponentsModule);
    (0, core_1.NgModule)({
        // Ivy knows how to make any component an entry point,
        // but we still would like to patch resolveComponentFactory in order to provide mocks.
        entryComponents: isIvy ? /* istanbul ignore next */ [] : entryComponents,
    })(entryComponent);
    ngModule.imports.push(entryComponent);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLWVudHJ5LWNvbXBvbmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1idWlsZGVyL3Byb21pc2UvaGFuZGxlLWVudHJ5LWNvbXBvbmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNDQUFtRTtBQUVuRSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDbEIsSUFBSTtJQUNGLDhEQUE4RDtJQUM5RCxJQUFNLFFBQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDeEMsS0FBSyxHQUFHLFFBQU0sQ0FBQyxXQUFXLENBQUM7Q0FDNUI7QUFBQyxPQUFPLENBQUMsRUFBRTtJQUNWLGdCQUFnQjtDQUNqQjtBQUVELDJGQUFtRTtBQUNuRSwwREFBd0Q7QUFDeEQsd0RBQW9EO0FBQ3BELDhEQUFzRDtBQUN0RCwrRkFBdUU7QUFJdkU7SUFHRSwrQkFBbUIsR0FBa0IsRUFBWSx3QkFBa0Q7UUFBbkcsaUJBUUM7UUFSZ0QsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNqRyxJQUFJLENBQUMsTUFBTSxHQUFHLHdCQUF3QixDQUFDLHVCQUF1QixDQUFDO1FBQy9ELHdCQUF3QixDQUFDLHVCQUF1QixHQUFHLElBQUEsNkJBQWlCLEVBQ2xFLElBQUksQ0FBQyxNQUFNLEVBQ1gsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFDLFNBQWMsWUFBSyxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLE1BQUEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsbUNBQUksU0FBUyxDQUFRLENBQUEsRUFBQSxDQUN2RyxDQUFDO0lBQ0osQ0FBQztJQUNILDRCQUFDO0FBQUQsQ0FBQyxBQVpELElBWUM7QUFDRCxJQUFBLDhCQUFrQixFQUFDLHFCQUFxQixFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsc0JBQVEsQ0FBQyxFQUFFLENBQUMsK0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFbEcsbUJBQWUsVUFBQyxRQUFnQjs7SUFDOUIsSUFBTSxlQUFlLEdBQVUsRUFBRSxDQUFDOztRQUNsQyxLQUEwQixJQUFBLEtBQUEsU0FBQSxRQUFRLENBQUMsWUFBWSxDQUFBLGdCQUFBLDRCQUFFO1lBQTVDLElBQU0sV0FBVyxXQUFBO1lBQ3BCLElBQUksSUFBQSx3QkFBTyxFQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDN0IsZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUNuQztTQUNGOzs7Ozs7Ozs7SUFDRCxrREFBa0Q7SUFDbEQsSUFBTSxjQUFjLEdBQUcsSUFBQSwwQkFBVyxFQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDMUQsSUFBQSxlQUFRLEVBQUM7UUFDUCxzREFBc0Q7UUFDdEQsc0ZBQXNGO1FBQ3RGLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBZTtLQUN6RSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbkIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDeEMsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5sZXQgaXNJdnkgPSBmYWxzZTtcbnRyeSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby1yZXF1aXJlLWltcG9ydHMgbm8tdmFyLXJlcXVpcmVzXG4gIGNvbnN0IG1vZHVsZSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbiAgaXNJdnkgPSBtb2R1bGUuybVpdnlFbmFibGVkO1xufSBjYXRjaCAoZSkge1xuICAvLyBub3RoaW5nIHRvIGRvXG59XG5cbmltcG9ydCBjb3JlRGVmaW5lUHJvcGVydHkgZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUuZGVmaW5lLXByb3BlcnR5JztcbmltcG9ydCB7IGV4dGVuZENsYXNzIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUuaGVscGVycyc7XG5pbXBvcnQgeyBOR19NT0NLUyB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb3JlLnRva2Vucyc7XG5pbXBvcnQgeyBpc05nRGVmIH0gZnJvbSAnLi4vLi4vY29tbW9uL2Z1bmMuaXMtbmctZGVmJztcbmltcG9ydCBoZWxwZXJDcmVhdGVDbG9uZSBmcm9tICcuLi8uLi9tb2NrLXNlcnZpY2UvaGVscGVyLmNyZWF0ZS1jbG9uZSc7XG5cbmltcG9ydCB7IE5nTWV0YSB9IGZyb20gJy4vdHlwZXMnO1xuXG5jbGFzcyBFbnRyeUNvbXBvbmVudHNNb2R1bGUge1xuICBwcm90ZWN0ZWQgb3JpZ2luOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJbJ3Jlc29sdmVDb21wb25lbnRGYWN0b3J5J107XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKG1hcDogTWFwPGFueSwgYW55PiwgcHJvdGVjdGVkIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKSB7XG4gICAgdGhpcy5vcmlnaW4gPSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3Rvcnk7XG4gICAgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5ID0gaGVscGVyQ3JlYXRlQ2xvbmUoXG4gICAgICB0aGlzLm9yaWdpbixcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIChjb21wb25lbnQ6IGFueSkgPT4gdGhpcy5vcmlnaW4uY2FsbChjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIG1hcC5nZXQoY29tcG9uZW50KSA/PyBjb21wb25lbnQpIGFzIGFueSxcbiAgICApO1xuICB9XG59XG5jb3JlRGVmaW5lUHJvcGVydHkoRW50cnlDb21wb25lbnRzTW9kdWxlLCAncGFyYW1ldGVycycsIFtbTkdfTU9DS1NdLCBbQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyXV0pO1xuXG5leHBvcnQgZGVmYXVsdCAobmdNb2R1bGU6IE5nTWV0YSk6IHZvaWQgPT4ge1xuICBjb25zdCBlbnRyeUNvbXBvbmVudHM6IGFueVtdID0gW107XG4gIGZvciAoY29uc3QgZGVjbGFyYXRpb24gb2YgbmdNb2R1bGUuZGVjbGFyYXRpb25zKSB7XG4gICAgaWYgKGlzTmdEZWYoZGVjbGFyYXRpb24sICdjJykpIHtcbiAgICAgIGVudHJ5Q29tcG9uZW50cy5wdXNoKGRlY2xhcmF0aW9uKTtcbiAgICB9XG4gIH1cbiAgLy8gdGhlIHdheSB0byBjYXVzZSBlbnRyeUNvbXBvbmVudHMgdG8gZG8gaXRzIHdvcmtcbiAgY29uc3QgZW50cnlDb21wb25lbnQgPSBleHRlbmRDbGFzcyhFbnRyeUNvbXBvbmVudHNNb2R1bGUpO1xuICBOZ01vZHVsZSh7XG4gICAgLy8gSXZ5IGtub3dzIGhvdyB0byBtYWtlIGFueSBjb21wb25lbnQgYW4gZW50cnkgcG9pbnQsXG4gICAgLy8gYnV0IHdlIHN0aWxsIHdvdWxkIGxpa2UgdG8gcGF0Y2ggcmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkgaW4gb3JkZXIgdG8gcHJvdmlkZSBtb2Nrcy5cbiAgICBlbnRyeUNvbXBvbmVudHM6IGlzSXZ5ID8gLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gW10gOiBlbnRyeUNvbXBvbmVudHMsXG4gIH0pKGVudHJ5Q29tcG9uZW50KTtcbiAgbmdNb2R1bGUuaW1wb3J0cy5wdXNoKGVudHJ5Q29tcG9uZW50KTtcbn07XG4iXX0=