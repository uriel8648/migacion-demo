"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@angular/common");
var core_config_1 = __importDefault(require("../../common/core.config"));
var core_reflect_provided_in_1 = __importDefault(require("../../common/core.reflect.provided-in"));
var func_is_ng_injection_token_1 = require("../../common/func.is-ng-injection-token");
var ng_mocks_universe_1 = __importDefault(require("../../common/ng-mocks-universe"));
var skipResolution = function (provide) {
    var resolution = ng_mocks_universe_1.default.getResolution(provide);
    if (resolution === 'keep' || resolution === 'exclude') {
        return true;
    }
    if (resolution === 'mock') {
        return false;
    }
    return undefined;
};
var skipSystem = function (provide) {
    if (!provide || provide === common_1.DOCUMENT || ng_mocks_universe_1.default.touches.has(provide)) {
        return true;
    }
    var skipByResolution = skipResolution(provide);
    if (skipByResolution !== undefined) {
        return skipByResolution;
    }
    if (typeof provide === 'function' && core_config_1.default.neverMockProvidedFunction.indexOf(provide.name) !== -1) {
        return true;
    }
    // istanbul ignore if because we mock BrowserModule
    if ((0, func_is_ng_injection_token_1.isNgInjectionToken)(provide) && core_config_1.default.neverMockToken.indexOf(provide.toString()) !== -1) {
        return true;
    }
    return false;
};
// Checks if we should avoid mocking of the provider.
exports.default = (function (provide) {
    if (skipSystem(provide)) {
        return true;
    }
    // Empty providedIn or things for a platform have to be skipped.
    var providedIn = (0, core_reflect_provided_in_1.default)(provide);
    var skip = !providedIn || providedIn === 'platform';
    if (typeof provide === 'function' && skip) {
        return true;
    }
    return false;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC1kZXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1idWlsZGVyL3Byb21pc2Uvc2tpcC1kZXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwwQ0FBMkM7QUFFM0MseUVBQWtEO0FBQ2xELG1HQUEwRTtBQUMxRSxzRkFBNkU7QUFDN0UscUZBQTZEO0FBRTdELElBQU0sY0FBYyxHQUFHLFVBQUMsT0FBWTtJQUNsQyxJQUFNLFVBQVUsR0FBRywyQkFBZSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxRCxJQUFJLFVBQVUsS0FBSyxNQUFNLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtRQUNyRCxPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBSSxVQUFVLEtBQUssTUFBTSxFQUFFO1FBQ3pCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixJQUFNLFVBQVUsR0FBRyxVQUFDLE9BQVk7SUFDOUIsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLEtBQUssaUJBQVEsSUFBSSwyQkFBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDNUUsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELElBQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELElBQUksZ0JBQWdCLEtBQUssU0FBUyxFQUFFO1FBQ2xDLE9BQU8sZ0JBQWdCLENBQUM7S0FDekI7SUFFRCxJQUFJLE9BQU8sT0FBTyxLQUFLLFVBQVUsSUFBSSxxQkFBVSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDdEcsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELG1EQUFtRDtJQUNuRCxJQUFJLElBQUEsK0NBQWtCLEVBQUMsT0FBTyxDQUFDLElBQUkscUJBQVUsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQy9GLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLHFEQUFxRDtBQUNyRCxtQkFBZSxVQUFDLE9BQVk7SUFDMUIsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDdkIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELGdFQUFnRTtJQUNoRSxJQUFNLFVBQVUsR0FBRyxJQUFBLGtDQUFxQixFQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xELElBQU0sSUFBSSxHQUFHLENBQUMsVUFBVSxJQUFJLFVBQVUsS0FBSyxVQUFVLENBQUM7SUFDdEQsSUFBSSxPQUFPLE9BQU8sS0FBSyxVQUFVLElBQUksSUFBSSxFQUFFO1FBQ3pDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IGNvcmVDb25maWcgZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUuY29uZmlnJztcbmltcG9ydCBjb3JlUmVmbGVjdFByb3ZpZGVkSW4gZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUucmVmbGVjdC5wcm92aWRlZC1pbic7XG5pbXBvcnQgeyBpc05nSW5qZWN0aW9uVG9rZW4gfSBmcm9tICcuLi8uLi9jb21tb24vZnVuYy5pcy1uZy1pbmplY3Rpb24tdG9rZW4nO1xuaW1wb3J0IG5nTW9ja3NVbml2ZXJzZSBmcm9tICcuLi8uLi9jb21tb24vbmctbW9ja3MtdW5pdmVyc2UnO1xuXG5jb25zdCBza2lwUmVzb2x1dGlvbiA9IChwcm92aWRlOiBhbnkpOiBib29sZWFuIHwgdW5kZWZpbmVkID0+IHtcbiAgY29uc3QgcmVzb2x1dGlvbiA9IG5nTW9ja3NVbml2ZXJzZS5nZXRSZXNvbHV0aW9uKHByb3ZpZGUpO1xuICBpZiAocmVzb2x1dGlvbiA9PT0gJ2tlZXAnIHx8IHJlc29sdXRpb24gPT09ICdleGNsdWRlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChyZXNvbHV0aW9uID09PSAnbW9jaycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuY29uc3Qgc2tpcFN5c3RlbSA9IChwcm92aWRlOiBhbnkpOiBib29sZWFuID0+IHtcbiAgaWYgKCFwcm92aWRlIHx8IHByb3ZpZGUgPT09IERPQ1VNRU5UIHx8IG5nTW9ja3NVbml2ZXJzZS50b3VjaGVzLmhhcyhwcm92aWRlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IHNraXBCeVJlc29sdXRpb24gPSBza2lwUmVzb2x1dGlvbihwcm92aWRlKTtcbiAgaWYgKHNraXBCeVJlc29sdXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBza2lwQnlSZXNvbHV0aW9uO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nICYmIGNvcmVDb25maWcubmV2ZXJNb2NrUHJvdmlkZWRGdW5jdGlvbi5pbmRleE9mKHByb3ZpZGUubmFtZSkgIT09IC0xKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmIGJlY2F1c2Ugd2UgbW9jayBCcm93c2VyTW9kdWxlXG4gIGlmIChpc05nSW5qZWN0aW9uVG9rZW4ocHJvdmlkZSkgJiYgY29yZUNvbmZpZy5uZXZlck1vY2tUb2tlbi5pbmRleE9mKHByb3ZpZGUudG9TdHJpbmcoKSkgIT09IC0xKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vLyBDaGVja3MgaWYgd2Ugc2hvdWxkIGF2b2lkIG1vY2tpbmcgb2YgdGhlIHByb3ZpZGVyLlxuZXhwb3J0IGRlZmF1bHQgKHByb3ZpZGU6IGFueSk6IGJvb2xlYW4gPT4ge1xuICBpZiAoc2tpcFN5c3RlbShwcm92aWRlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gRW1wdHkgcHJvdmlkZWRJbiBvciB0aGluZ3MgZm9yIGEgcGxhdGZvcm0gaGF2ZSB0byBiZSBza2lwcGVkLlxuICBjb25zdCBwcm92aWRlZEluID0gY29yZVJlZmxlY3RQcm92aWRlZEluKHByb3ZpZGUpO1xuICBjb25zdCBza2lwID0gIXByb3ZpZGVkSW4gfHwgcHJvdmlkZWRJbiA9PT0gJ3BsYXRmb3JtJztcbiAgaWYgKHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nICYmIHNraXApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iXX0=