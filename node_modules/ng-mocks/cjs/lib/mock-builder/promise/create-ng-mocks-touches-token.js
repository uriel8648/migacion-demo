"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../../common/core.helpers");
var core_tokens_1 = require("../../common/core.tokens");
var ng_mocks_universe_1 = __importDefault(require("../../common/ng-mocks-universe"));
exports.default = (function () {
    var e_1, _a;
    // Redefining providers for kept declarations.
    var touches = new Set();
    try {
        for (var _b = __values((0, core_helpers_1.mapValues)(ng_mocks_universe_1.default.touches)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var proto = _c.value;
            var source = proto;
            var value = ng_mocks_universe_1.default.getBuildDeclaration(source);
            // kept declarations should be based on their source.
            if (value === undefined) {
                value = source;
            }
            touches.add(source);
            touches.add(value);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        provide: core_tokens_1.NG_MOCKS_TOUCHES,
        useValue: touches,
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLW5nLW1vY2tzLXRvdWNoZXMtdG9rZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1idWlsZGVyL3Byb21pc2UvY3JlYXRlLW5nLW1vY2tzLXRvdWNoZXMtdG9rZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLDBEQUFzRDtBQUN0RCx3REFBNEQ7QUFDNUQscUZBQTZEO0FBRTdELG1CQUFlOztJQUNiLDhDQUE4QztJQUM5QyxJQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDOztRQUMxQixLQUFvQixJQUFBLEtBQUEsU0FBQSxJQUFBLHdCQUFTLEVBQUMsMkJBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQSxnQkFBQSw0QkFBRTtZQUFuRCxJQUFNLEtBQUssV0FBQTtZQUNkLElBQU0sTUFBTSxHQUFRLEtBQUssQ0FBQztZQUMxQixJQUFJLEtBQUssR0FBRywyQkFBZSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXhELHFEQUFxRDtZQUNyRCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7Z0JBQ3ZCLEtBQUssR0FBRyxNQUFNLENBQUM7YUFDaEI7WUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEI7Ozs7Ozs7OztJQUVELE9BQU87UUFDTCxPQUFPLEVBQUUsOEJBQWdCO1FBQ3pCLFFBQVEsRUFBRSxPQUFPO0tBQ2xCLENBQUM7QUFDSixDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYWx1ZVByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IG1hcFZhbHVlcyB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb3JlLmhlbHBlcnMnO1xuaW1wb3J0IHsgTkdfTU9DS1NfVE9VQ0hFUyB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb3JlLnRva2Vucyc7XG5pbXBvcnQgbmdNb2Nrc1VuaXZlcnNlIGZyb20gJy4uLy4uL2NvbW1vbi9uZy1tb2Nrcy11bml2ZXJzZSc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpOiBWYWx1ZVByb3ZpZGVyID0+IHtcbiAgLy8gUmVkZWZpbmluZyBwcm92aWRlcnMgZm9yIGtlcHQgZGVjbGFyYXRpb25zLlxuICBjb25zdCB0b3VjaGVzID0gbmV3IFNldCgpO1xuICBmb3IgKGNvbnN0IHByb3RvIG9mIG1hcFZhbHVlcyhuZ01vY2tzVW5pdmVyc2UudG91Y2hlcykpIHtcbiAgICBjb25zdCBzb3VyY2U6IGFueSA9IHByb3RvO1xuICAgIGxldCB2YWx1ZSA9IG5nTW9ja3NVbml2ZXJzZS5nZXRCdWlsZERlY2xhcmF0aW9uKHNvdXJjZSk7XG5cbiAgICAvLyBrZXB0IGRlY2xhcmF0aW9ucyBzaG91bGQgYmUgYmFzZWQgb24gdGhlaXIgc291cmNlLlxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IHNvdXJjZTtcbiAgICB9XG5cbiAgICB0b3VjaGVzLmFkZChzb3VyY2UpO1xuICAgIHRvdWNoZXMuYWRkKHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcHJvdmlkZTogTkdfTU9DS1NfVE9VQ0hFUyxcbiAgICB1c2VWYWx1ZTogdG91Y2hlcyxcbiAgfTtcbn07XG4iXX0=