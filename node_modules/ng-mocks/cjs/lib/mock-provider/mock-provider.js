"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockProvider = exports.MockProviders = void 0;
var func_import_exists_1 = __importDefault(require("../common/func.import-exists"));
var mock_helper_stub_1 = __importDefault(require("../mock-helper/mock-helper.stub"));
var helper_use_factory_1 = __importDefault(require("../mock-service/helper.use-factory"));
var mock_service_1 = require("../mock-service/mock-service");
var defaultValue = {};
function MockProviders() {
    var providers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        providers[_i] = arguments[_i];
    }
    return providers.map(function (provider) { return MockProvider(provider, defaultValue); });
}
exports.MockProviders = MockProviders;
function MockProvider(provide, overrides) {
    if (overrides === void 0) { overrides = defaultValue; }
    (0, func_import_exists_1.default)(provide, 'MockProvider');
    return (0, helper_use_factory_1.default)(provide, function () { return (0, mock_service_1.MockService)(provide); }, function (value) {
        if (overrides === defaultValue) {
            return value;
        }
        if (!value) {
            return overrides;
        }
        return (0, mock_helper_stub_1.default)(value, overrides);
    });
}
exports.MockProvider = MockProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLXByb3ZpZGVyL21vY2stcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBR0Esb0ZBQTREO0FBQzVELHFGQUE2RDtBQUM3RCwwRkFBa0U7QUFDbEUsNkRBQTJEO0FBRTNELElBQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUV4QixTQUFnQixhQUFhO0lBQUMsbUJBQXVEO1NBQXZELFVBQXVELEVBQXZELHFCQUF1RCxFQUF2RCxJQUF1RDtRQUF2RCw4QkFBdUQ7O0lBQ25GLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFDLFFBQWEsSUFBSyxPQUFBLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLEVBQXBDLENBQW9DLENBQUMsQ0FBQztBQUNoRixDQUFDO0FBRkQsc0NBRUM7QUFpQkQsU0FBZ0IsWUFBWSxDQUFDLE9BQVksRUFBRSxTQUE2QjtJQUE3QiwwQkFBQSxFQUFBLHdCQUE2QjtJQUN0RSxJQUFBLDRCQUFnQixFQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUUxQyxPQUFPLElBQUEsNEJBQWdCLEVBQ3JCLE9BQU8sRUFDUCxjQUFNLE9BQUEsSUFBQSwwQkFBVyxFQUFDLE9BQU8sQ0FBQyxFQUFwQixDQUFvQixFQUMxQixVQUFBLEtBQUs7UUFDSCxJQUFJLFNBQVMsS0FBSyxZQUFZLEVBQUU7WUFDOUIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELE9BQU8sSUFBQSwwQkFBYyxFQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQ0YsQ0FBQztBQUNKLENBQUM7QUFqQkQsb0NBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmFjdG9yeVByb3ZpZGVyLCBJbmplY3Rpb25Ub2tlbiwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQW55VHlwZSB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLnR5cGVzJztcbmltcG9ydCBmdW5jSW1wb3J0RXhpc3RzIGZyb20gJy4uL2NvbW1vbi9mdW5jLmltcG9ydC1leGlzdHMnO1xuaW1wb3J0IG1vY2tIZWxwZXJTdHViIGZyb20gJy4uL21vY2staGVscGVyL21vY2staGVscGVyLnN0dWInO1xuaW1wb3J0IGhlbHBlclVzZUZhY3RvcnkgZnJvbSAnLi4vbW9jay1zZXJ2aWNlL2hlbHBlci51c2UtZmFjdG9yeSc7XG5pbXBvcnQgeyBNb2NrU2VydmljZSB9IGZyb20gJy4uL21vY2stc2VydmljZS9tb2NrLXNlcnZpY2UnO1xuXG5jb25zdCBkZWZhdWx0VmFsdWUgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIE1vY2tQcm92aWRlcnMoLi4ucHJvdmlkZXJzOiBBcnJheTxBbnlUeXBlPGFueT4gfCBJbmplY3Rpb25Ub2tlbjxhbnk+Pik6IEZhY3RvcnlQcm92aWRlcltdIHtcbiAgcmV0dXJuIHByb3ZpZGVycy5tYXAoKHByb3ZpZGVyOiBhbnkpID0+IE1vY2tQcm92aWRlcihwcm92aWRlciwgZGVmYXVsdFZhbHVlKSk7XG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL01vY2tQcm92aWRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gTW9ja1Byb3ZpZGVyPEkgZXh0ZW5kcyBvYmplY3Q+KGluc3RhbmNlOiBBbnlUeXBlPEk+LCBvdmVycmlkZXM/OiBQYXJ0aWFsPEk+KTogRmFjdG9yeVByb3ZpZGVyO1xuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9uZy1tb2Nrcy5zdWRvLmV1L2FwaS9Nb2NrUHJvdmlkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1vY2tQcm92aWRlcjxJPihwcm92aWRlcjogSW5qZWN0aW9uVG9rZW48ST4gfCBzdHJpbmcsIHVzZVZhbHVlPzogUGFydGlhbDxJPik6IEZhY3RvcnlQcm92aWRlcjtcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvTW9ja1Byb3ZpZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNb2NrUHJvdmlkZXI8SSA9IGFueT4ocHJvdmlkZXI6IHN0cmluZywgdXNlVmFsdWU/OiBQYXJ0aWFsPEk+KTogRmFjdG9yeVByb3ZpZGVyO1xuXG5leHBvcnQgZnVuY3Rpb24gTW9ja1Byb3ZpZGVyKHByb3ZpZGU6IGFueSwgb3ZlcnJpZGVzOiBhbnkgPSBkZWZhdWx0VmFsdWUpOiBQcm92aWRlciB7XG4gIGZ1bmNJbXBvcnRFeGlzdHMocHJvdmlkZSwgJ01vY2tQcm92aWRlcicpO1xuXG4gIHJldHVybiBoZWxwZXJVc2VGYWN0b3J5KFxuICAgIHByb3ZpZGUsXG4gICAgKCkgPT4gTW9ja1NlcnZpY2UocHJvdmlkZSksXG4gICAgdmFsdWUgPT4ge1xuICAgICAgaWYgKG92ZXJyaWRlcyA9PT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG92ZXJyaWRlcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1vY2tIZWxwZXJTdHViKHZhbHVlLCBvdmVycmlkZXMpO1xuICAgIH0sXG4gICk7XG59XG4iXX0=