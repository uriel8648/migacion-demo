"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var decorate_inputs_1 = __importDefault(require("../common/decorate.inputs"));
var decorate_mock_1 = __importDefault(require("../common/decorate.mock"));
var decorate_outputs_1 = __importDefault(require("../common/decorate.outputs"));
var decorate_queries_1 = __importDefault(require("../common/decorate.queries"));
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var helper_mock_service_1 = __importDefault(require("../mock-service/helper.mock-service"));
var clone_providers_1 = __importDefault(require("./clone-providers"));
var to_existing_provider_1 = __importDefault(require("./to-existing-provider"));
var buildConfig = function (source, meta, setControlValueAccessor) { return ({
    config: ng_mocks_universe_1.default.config.get(source),
    outputs: meta.outputs,
    queryScanKeys: [],
    setControlValueAccessor: setControlValueAccessor,
}); };
exports.default = (function (source, mock, meta, params) {
    var data = (0, clone_providers_1.default)(source, mock, meta.providers || []);
    var providers = __spreadArray([(0, to_existing_provider_1.default)(source, mock)], __read(data.providers), false);
    var viewProviders = (0, clone_providers_1.default)(source, mock, meta.viewProviders || []).providers;
    var options = __assign(__assign({}, params), { providers: providers, viewProviders: viewProviders });
    if (data.setControlValueAccessor === undefined) {
        data.setControlValueAccessor =
            helper_mock_service_1.default.extractMethodsFromPrototype(source.prototype).indexOf('writeValue') !== -1;
    }
    var config = buildConfig(source, meta, data.setControlValueAccessor);
    (0, decorate_mock_1.default)(mock, source, config);
    // istanbul ignore else
    if (meta.queries) {
        (0, decorate_inputs_1.default)(mock, meta.inputs, Object.keys(meta.queries));
    }
    (0, decorate_outputs_1.default)(mock, meta.outputs);
    config.queryScanKeys = (0, decorate_queries_1.default)(mock, meta.queries);
    return options;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdGUtZGVjbGFyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay9kZWNvcmF0ZS1kZWNsYXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBLDhFQUF1RDtBQUN2RCwwRUFBbUQ7QUFDbkQsZ0ZBQXlEO0FBQ3pELGdGQUF5RDtBQUV6RCxrRkFBMEQ7QUFDMUQsNEZBQW9FO0FBRXBFLHNFQUErQztBQUMvQyxnRkFBd0Q7QUFFeEQsSUFBTSxXQUFXLEdBQUcsVUFDbEIsTUFBb0IsRUFDcEIsSUFLQyxFQUNELHVCQUFnQyxJQUNWLE9BQUEsQ0FBQztJQUN2QixNQUFNLEVBQUUsMkJBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUMxQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87SUFDckIsYUFBYSxFQUFFLEVBQUU7SUFDakIsdUJBQXVCLHlCQUFBO0NBQ3hCLENBQUMsRUFMc0IsQ0FLdEIsQ0FBQztBQUVILG1CQUFlLFVBQ2IsTUFBb0IsRUFDcEIsSUFBa0IsRUFDbEIsSUFNQyxFQUNELE1BQVM7SUFFVCxJQUFNLElBQUksR0FBRyxJQUFBLHlCQUFjLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLElBQU0sU0FBUyxrQkFBSSxJQUFBLDhCQUFrQixFQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBSyxJQUFJLENBQUMsU0FBUyxTQUFDLENBQUM7SUFDaEUsSUFBVyxhQUFhLEdBQUssSUFBQSx5QkFBYyxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsSUFBSSxFQUFFLENBQUMsVUFBM0QsQ0FBNEQ7SUFDNUYsSUFBTSxPQUFPLHlCQUFXLE1BQU0sS0FBRSxTQUFTLFdBQUEsRUFBRSxhQUFhLGVBQUEsR0FBRSxDQUFDO0lBRTNELElBQUksSUFBSSxDQUFDLHVCQUF1QixLQUFLLFNBQVMsRUFBRTtRQUM5QyxJQUFJLENBQUMsdUJBQXVCO1lBQzFCLDZCQUFpQixDQUFDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDaEc7SUFFRCxJQUFNLE1BQU0sR0FBc0IsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDMUYsSUFBQSx1QkFBWSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFbkMsdUJBQXVCO0lBQ3ZCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNoQixJQUFBLHlCQUFjLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUM5RDtJQUNELElBQUEsMEJBQWUsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsSUFBQSwwQkFBZSxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFM0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBEaXJlY3RpdmUsIFByb3ZpZGVyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQW55VHlwZSB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLnR5cGVzJztcbmltcG9ydCBkZWNvcmF0ZUlucHV0cyBmcm9tICcuLi9jb21tb24vZGVjb3JhdGUuaW5wdXRzJztcbmltcG9ydCBkZWNvcmF0ZU1vY2sgZnJvbSAnLi4vY29tbW9uL2RlY29yYXRlLm1vY2snO1xuaW1wb3J0IGRlY29yYXRlT3V0cHV0cyBmcm9tICcuLi9jb21tb24vZGVjb3JhdGUub3V0cHV0cyc7XG5pbXBvcnQgZGVjb3JhdGVRdWVyaWVzIGZyb20gJy4uL2NvbW1vbi9kZWNvcmF0ZS5xdWVyaWVzJztcbmltcG9ydCB7IG5nTW9ja3NNb2NrQ29uZmlnIH0gZnJvbSAnLi4vY29tbW9uL21vY2snO1xuaW1wb3J0IG5nTW9ja3NVbml2ZXJzZSBmcm9tICcuLi9jb21tb24vbmctbW9ja3MtdW5pdmVyc2UnO1xuaW1wb3J0IGhlbHBlck1vY2tTZXJ2aWNlIGZyb20gJy4uL21vY2stc2VydmljZS9oZWxwZXIubW9jay1zZXJ2aWNlJztcblxuaW1wb3J0IGNsb25lUHJvdmlkZXJzIGZyb20gJy4vY2xvbmUtcHJvdmlkZXJzJztcbmltcG9ydCB0b0V4aXN0aW5nUHJvdmlkZXIgZnJvbSAnLi90by1leGlzdGluZy1wcm92aWRlcic7XG5cbmNvbnN0IGJ1aWxkQ29uZmlnID0gKFxuICBzb3VyY2U6IEFueVR5cGU8YW55PixcbiAgbWV0YToge1xuICAgIGlucHV0cz86IHN0cmluZ1tdO1xuICAgIG91dHB1dHM/OiBzdHJpbmdbXTtcbiAgICBwcm92aWRlcnM/OiBQcm92aWRlcltdO1xuICAgIHF1ZXJpZXM/OiBSZWNvcmQ8c3RyaW5nLCBWaWV3Q2hpbGQ+O1xuICB9LFxuICBzZXRDb250cm9sVmFsdWVBY2Nlc3NvcjogYm9vbGVhbixcbik6IG5nTW9ja3NNb2NrQ29uZmlnID0+ICh7XG4gIGNvbmZpZzogbmdNb2Nrc1VuaXZlcnNlLmNvbmZpZy5nZXQoc291cmNlKSxcbiAgb3V0cHV0czogbWV0YS5vdXRwdXRzLFxuICBxdWVyeVNjYW5LZXlzOiBbXSxcbiAgc2V0Q29udHJvbFZhbHVlQWNjZXNzb3IsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgPFQgZXh0ZW5kcyBDb21wb25lbnQgfCBEaXJlY3RpdmU+KFxuICBzb3VyY2U6IEFueVR5cGU8YW55PixcbiAgbW9jazogQW55VHlwZTxhbnk+LFxuICBtZXRhOiB7XG4gICAgaW5wdXRzPzogc3RyaW5nW107XG4gICAgb3V0cHV0cz86IHN0cmluZ1tdO1xuICAgIHByb3ZpZGVycz86IFByb3ZpZGVyW107XG4gICAgcXVlcmllcz86IFJlY29yZDxzdHJpbmcsIFZpZXdDaGlsZD47XG4gICAgdmlld1Byb3ZpZGVycz86IFByb3ZpZGVyW107XG4gIH0sXG4gIHBhcmFtczogVCxcbik6IFQgPT4ge1xuICBjb25zdCBkYXRhID0gY2xvbmVQcm92aWRlcnMoc291cmNlLCBtb2NrLCBtZXRhLnByb3ZpZGVycyB8fCBbXSk7XG4gIGNvbnN0IHByb3ZpZGVycyA9IFt0b0V4aXN0aW5nUHJvdmlkZXIoc291cmNlLCBtb2NrKSwgLi4uZGF0YS5wcm92aWRlcnNdO1xuICBjb25zdCB7IHByb3ZpZGVyczogdmlld1Byb3ZpZGVycyB9ID0gY2xvbmVQcm92aWRlcnMoc291cmNlLCBtb2NrLCBtZXRhLnZpZXdQcm92aWRlcnMgfHwgW10pO1xuICBjb25zdCBvcHRpb25zOiBUID0geyAuLi5wYXJhbXMsIHByb3ZpZGVycywgdmlld1Byb3ZpZGVycyB9O1xuXG4gIGlmIChkYXRhLnNldENvbnRyb2xWYWx1ZUFjY2Vzc29yID09PSB1bmRlZmluZWQpIHtcbiAgICBkYXRhLnNldENvbnRyb2xWYWx1ZUFjY2Vzc29yID1cbiAgICAgIGhlbHBlck1vY2tTZXJ2aWNlLmV4dHJhY3RNZXRob2RzRnJvbVByb3RvdHlwZShzb3VyY2UucHJvdG90eXBlKS5pbmRleE9mKCd3cml0ZVZhbHVlJykgIT09IC0xO1xuICB9XG5cbiAgY29uc3QgY29uZmlnOiBuZ01vY2tzTW9ja0NvbmZpZyA9IGJ1aWxkQ29uZmlnKHNvdXJjZSwgbWV0YSwgZGF0YS5zZXRDb250cm9sVmFsdWVBY2Nlc3Nvcik7XG4gIGRlY29yYXRlTW9jayhtb2NrLCBzb3VyY2UsIGNvbmZpZyk7XG5cbiAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgaWYgKG1ldGEucXVlcmllcykge1xuICAgIGRlY29yYXRlSW5wdXRzKG1vY2ssIG1ldGEuaW5wdXRzLCBPYmplY3Qua2V5cyhtZXRhLnF1ZXJpZXMpKTtcbiAgfVxuICBkZWNvcmF0ZU91dHB1dHMobW9jaywgbWV0YS5vdXRwdXRzKTtcbiAgY29uZmlnLnF1ZXJ5U2NhbktleXMgPSBkZWNvcmF0ZVF1ZXJpZXMobW9jaywgbWV0YS5xdWVyaWVzKTtcblxuICByZXR1cm4gb3B0aW9ucztcbn07XG4iXX0=