"use strict";
// tslint:disable strict-type-predicates
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockDeclaration = exports.MockDeclarations = void 0;
var error_jest_mock_1 = __importDefault(require("../common/error.jest-mock"));
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var mock_component_1 = require("../mock-component/mock-component");
var mock_directive_1 = require("../mock-directive/mock-directive");
var mock_pipe_1 = require("../mock-pipe/mock-pipe");
function MockDeclarations() {
    var declarations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        declarations[_i] = arguments[_i];
    }
    return declarations.map(MockDeclaration);
}
exports.MockDeclarations = MockDeclarations;
function MockDeclaration(declaration) {
    if ((0, func_is_ng_def_1.isNgDef)(declaration, 'p')) {
        return (0, mock_pipe_1.MockPipe)(declaration);
    }
    if ((0, func_is_ng_def_1.isNgDef)(declaration, 'c')) {
        return (0, mock_component_1.MockComponent)(declaration);
    }
    if ((0, func_is_ng_def_1.isNgDef)(declaration, 'd')) {
        return (0, mock_directive_1.MockDirective)(declaration);
    }
    (0, error_jest_mock_1.default)(declaration);
    throw new Error([
        'MockDeclaration does not know how to mock',
        typeof declaration === 'function' ? declaration.name : declaration,
    ].join(' '));
}
exports.MockDeclaration = MockDeclaration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1kZWNsYXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWRlY2xhcmF0aW9uL21vY2stZGVjbGFyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHdDQUF3Qzs7Ozs7O0FBR3hDLDhFQUFzRDtBQUN0RCwyREFBbUQ7QUFDbkQsbUVBQWlFO0FBRWpFLG1FQUFpRTtBQUVqRSxvREFBa0Q7QUFHbEQsU0FBZ0IsZ0JBQWdCO0lBQUMsc0JBQWlDO1NBQWpDLFVBQWlDLEVBQWpDLHFCQUFpQyxFQUFqQyxJQUFpQztRQUFqQyxpQ0FBaUM7O0lBQ2hFLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRkQsNENBRUM7QUFJRCxTQUFnQixlQUFlLENBQzdCLFdBQW9CO0lBRXBCLElBQUksSUFBQSx3QkFBTyxFQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUM3QixPQUFPLElBQUEsb0JBQVEsRUFBQyxXQUFXLENBQUMsQ0FBQztLQUM5QjtJQUNELElBQUksSUFBQSx3QkFBTyxFQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUM3QixPQUFPLElBQUEsOEJBQWEsRUFBQyxXQUFXLENBQUMsQ0FBQztLQUNuQztJQUNELElBQUksSUFBQSx3QkFBTyxFQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUM3QixPQUFPLElBQUEsOEJBQWEsRUFBQyxXQUFXLENBQUMsQ0FBQztLQUNuQztJQUVELElBQUEseUJBQWEsRUFBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixNQUFNLElBQUksS0FBSyxDQUNiO1FBQ0UsMkNBQTJDO1FBQzNDLE9BQU8sV0FBVyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUUsV0FBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVc7S0FDNUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQ1osQ0FBQztBQUNKLENBQUM7QUFwQkQsMENBb0JDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGUgc3RyaWN0LXR5cGUtcHJlZGljYXRlc1xuXG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2NvcmUudHlwZXMnO1xuaW1wb3J0IGVycm9ySmVzdE1vY2sgZnJvbSAnLi4vY29tbW9uL2Vycm9yLmplc3QtbW9jayc7XG5pbXBvcnQgeyBpc05nRGVmIH0gZnJvbSAnLi4vY29tbW9uL2Z1bmMuaXMtbmctZGVmJztcbmltcG9ydCB7IE1vY2tDb21wb25lbnQgfSBmcm9tICcuLi9tb2NrLWNvbXBvbmVudC9tb2NrLWNvbXBvbmVudCc7XG5pbXBvcnQgeyBNb2NrZWRDb21wb25lbnQgfSBmcm9tICcuLi9tb2NrLWNvbXBvbmVudC90eXBlcyc7XG5pbXBvcnQgeyBNb2NrRGlyZWN0aXZlIH0gZnJvbSAnLi4vbW9jay1kaXJlY3RpdmUvbW9jay1kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTW9ja2VkRGlyZWN0aXZlIH0gZnJvbSAnLi4vbW9jay1kaXJlY3RpdmUvdHlwZXMnO1xuaW1wb3J0IHsgTW9ja1BpcGUgfSBmcm9tICcuLi9tb2NrLXBpcGUvbW9jay1waXBlJztcbmltcG9ydCB7IE1vY2tlZFBpcGUgfSBmcm9tICcuLi9tb2NrLXBpcGUvdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gTW9ja0RlY2xhcmF0aW9ucyguLi5kZWNsYXJhdGlvbnM6IEFycmF5PFR5cGU8YW55Pj4pOiBBcnJheTxUeXBlPGFueT4+IHtcbiAgcmV0dXJuIGRlY2xhcmF0aW9ucy5tYXAoTW9ja0RlY2xhcmF0aW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1vY2tEZWNsYXJhdGlvbjxUPihkZWNsYXJhdGlvbjogVHlwZTxUPik6IFR5cGU8TW9ja2VkUGlwZTxUPiB8IE1vY2tlZERpcmVjdGl2ZTxUPiB8IE1vY2tlZENvbXBvbmVudDxUPj47XG5cbmV4cG9ydCBmdW5jdGlvbiBNb2NrRGVjbGFyYXRpb248VD4oXG4gIGRlY2xhcmF0aW9uOiBUeXBlPFQ+LFxuKTogVHlwZTxNb2NrZWRQaXBlPFQ+IHwgTW9ja2VkRGlyZWN0aXZlPFQ+IHwgTW9ja2VkQ29tcG9uZW50PFQ+PiB7XG4gIGlmIChpc05nRGVmKGRlY2xhcmF0aW9uLCAncCcpKSB7XG4gICAgcmV0dXJuIE1vY2tQaXBlKGRlY2xhcmF0aW9uKTtcbiAgfVxuICBpZiAoaXNOZ0RlZihkZWNsYXJhdGlvbiwgJ2MnKSkge1xuICAgIHJldHVybiBNb2NrQ29tcG9uZW50KGRlY2xhcmF0aW9uKTtcbiAgfVxuICBpZiAoaXNOZ0RlZihkZWNsYXJhdGlvbiwgJ2QnKSkge1xuICAgIHJldHVybiBNb2NrRGlyZWN0aXZlKGRlY2xhcmF0aW9uKTtcbiAgfVxuXG4gIGVycm9ySmVzdE1vY2soZGVjbGFyYXRpb24pO1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgW1xuICAgICAgJ01vY2tEZWNsYXJhdGlvbiBkb2VzIG5vdCBrbm93IGhvdyB0byBtb2NrJyxcbiAgICAgIHR5cGVvZiBkZWNsYXJhdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IChkZWNsYXJhdGlvbiBhcyBhbnkpLm5hbWUgOiBkZWNsYXJhdGlvbixcbiAgICBdLmpvaW4oJyAnKSxcbiAgKTtcbn1cbiJdfQ==