"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockPipe = exports.MockPipes = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_pipe_resolve_1 = __importDefault(require("../common/core.reflect.pipe-resolve"));
var decorate_mock_1 = __importDefault(require("../common/decorate.mock"));
var func_get_mocked_ng_def_of_1 = require("../common/func.get-mocked-ng-def-of");
var func_import_exists_1 = __importDefault(require("../common/func.import-exists"));
var func_is_mock_ng_def_1 = require("../common/func.is-mock-ng-def");
var mock_1 = require("../common/mock");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var helper_mock_service_1 = __importDefault(require("../mock-service/helper.mock-service"));
/**
 * @see https://ng-mocks.sudo.eu/api/MockPipe
 */
function MockPipes() {
    var pipes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        pipes[_i] = arguments[_i];
    }
    return pipes.map(function (pipe) { return MockPipe(pipe, undefined); });
}
exports.MockPipes = MockPipes;
var getMockClass = function (pipe, transform) {
    var mock = (0, core_helpers_1.extendClass)(mock_1.Mock);
    (0, core_1.Pipe)((0, core_reflect_pipe_resolve_1.default)(pipe))(mock);
    (0, decorate_mock_1.default)(mock, pipe, {
        init: function (instance) {
            if (transform) {
                instance.transform = transform;
            }
            if (!instance.transform) {
                helper_mock_service_1.default.mock(instance, 'transform', instance.constructor.name + ".transform");
            }
        },
    });
    return mock;
};
function MockPipe(pipe, transform) {
    (0, func_import_exists_1.default)(pipe, 'MockPipe');
    if ((0, func_is_mock_ng_def_1.isMockNgDef)(pipe, 'p')) {
        return pipe;
    }
    // We are inside of an 'it'. It is fine to return a mock copy.
    if ((0, testing_1.getTestBed)()._instantiated) {
        try {
            return (0, func_get_mocked_ng_def_of_1.getMockedNgDefOf)(pipe, 'p');
        }
        catch (error) {
            // looks like an in-test mock.
        }
    }
    // istanbul ignore next
    if (ng_mocks_universe_1.default.flags.has('cachePipe') && ng_mocks_universe_1.default.cacheDeclarations.has(pipe)) {
        return ng_mocks_universe_1.default.cacheDeclarations.get(pipe);
    }
    var mock = getMockClass(pipe, transform);
    if (ng_mocks_universe_1.default.flags.has('cachePipe')) {
        ng_mocks_universe_1.default.cacheDeclarations.set(pipe, mock);
    }
    return mock;
}
exports.MockPipe = MockPipe;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL21vY2stcGlwZS9tb2NrLXBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0NBQW9EO0FBQ3BELGlEQUFtRDtBQUVuRCx1REFBcUQ7QUFDckQsa0dBQXlFO0FBRXpFLDBFQUFtRDtBQUNuRCxpRkFBdUU7QUFDdkUsb0ZBQTREO0FBQzVELHFFQUE0RDtBQUM1RCx1Q0FBc0M7QUFDdEMsa0ZBQTBEO0FBQzFELDRGQUFvRTtBQUlwRTs7R0FFRztBQUNILFNBQWdCLFNBQVM7SUFBQyxlQUFvQztTQUFwQyxVQUFvQyxFQUFwQyxxQkFBb0MsRUFBcEMsSUFBb0M7UUFBcEMsMEJBQW9DOztJQUM1RCxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUF6QixDQUF5QixDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUZELDhCQUVDO0FBRUQsSUFBTSxZQUFZLEdBQUcsVUFBQyxJQUFlLEVBQUUsU0FBc0M7SUFDM0UsSUFBTSxJQUFJLEdBQUcsSUFBQSwwQkFBVyxFQUFDLFdBQUksQ0FBQyxDQUFDO0lBQy9CLElBQUEsV0FBSSxFQUFDLElBQUEsbUNBQXNCLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxJQUFBLHVCQUFZLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRTtRQUN2QixJQUFJLEVBQUUsVUFBQyxRQUF1QjtZQUM1QixJQUFJLFNBQVMsRUFBRTtnQkFDYixRQUFRLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQzthQUNoQztZQUNELElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO2dCQUN2Qiw2QkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBSyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksZUFBWSxDQUFDLENBQUM7YUFDekY7UUFDSCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFVRixTQUFnQixRQUFRLENBQ3RCLElBQWlCLEVBQ2pCLFNBQThCO0lBRTlCLElBQUEsNEJBQWdCLEVBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRW5DLElBQUksSUFBQSxpQ0FBVyxFQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsOERBQThEO0lBQzlELElBQUssSUFBQSxvQkFBVSxHQUFVLENBQUMsYUFBYSxFQUFFO1FBQ3ZDLElBQUk7WUFDRixPQUFPLElBQUEsNENBQWdCLEVBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3BDO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCw4QkFBOEI7U0FDL0I7S0FDRjtJQUNELHVCQUF1QjtJQUN2QixJQUFJLDJCQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSwyQkFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN6RixPQUFPLDJCQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3BEO0lBRUQsSUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMzQyxJQUFJLDJCQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtRQUMxQywyQkFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDbkQ7SUFFRCxPQUFPLElBQVcsQ0FBQztBQUNyQixDQUFDO0FBN0JELDRCQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGdldFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBleHRlbmRDbGFzcyB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLmhlbHBlcnMnO1xuaW1wb3J0IGNvcmVSZWZsZWN0UGlwZVJlc29sdmUgZnJvbSAnLi4vY29tbW9uL2NvcmUucmVmbGVjdC5waXBlLXJlc29sdmUnO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLnR5cGVzJztcbmltcG9ydCBkZWNvcmF0ZU1vY2sgZnJvbSAnLi4vY29tbW9uL2RlY29yYXRlLm1vY2snO1xuaW1wb3J0IHsgZ2V0TW9ja2VkTmdEZWZPZiB9IGZyb20gJy4uL2NvbW1vbi9mdW5jLmdldC1tb2NrZWQtbmctZGVmLW9mJztcbmltcG9ydCBmdW5jSW1wb3J0RXhpc3RzIGZyb20gJy4uL2NvbW1vbi9mdW5jLmltcG9ydC1leGlzdHMnO1xuaW1wb3J0IHsgaXNNb2NrTmdEZWYgfSBmcm9tICcuLi9jb21tb24vZnVuYy5pcy1tb2NrLW5nLWRlZic7XG5pbXBvcnQgeyBNb2NrIH0gZnJvbSAnLi4vY29tbW9uL21vY2snO1xuaW1wb3J0IG5nTW9ja3NVbml2ZXJzZSBmcm9tICcuLi9jb21tb24vbmctbW9ja3MtdW5pdmVyc2UnO1xuaW1wb3J0IGhlbHBlck1vY2tTZXJ2aWNlIGZyb20gJy4uL21vY2stc2VydmljZS9oZWxwZXIubW9jay1zZXJ2aWNlJztcblxuaW1wb3J0IHsgTW9ja2VkUGlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9uZy1tb2Nrcy5zdWRvLmV1L2FwaS9Nb2NrUGlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gTW9ja1BpcGVzKC4uLnBpcGVzOiBBcnJheTxUeXBlPFBpcGVUcmFuc2Zvcm0+Pik6IEFycmF5PFR5cGU8UGlwZVRyYW5zZm9ybT4+IHtcbiAgcmV0dXJuIHBpcGVzLm1hcChwaXBlID0+IE1vY2tQaXBlKHBpcGUsIHVuZGVmaW5lZCkpO1xufVxuXG5jb25zdCBnZXRNb2NrQ2xhc3MgPSAocGlwZTogVHlwZTxhbnk+LCB0cmFuc2Zvcm0/OiBQaXBlVHJhbnNmb3JtWyd0cmFuc2Zvcm0nXSk6IFR5cGU8YW55PiA9PiB7XG4gIGNvbnN0IG1vY2sgPSBleHRlbmRDbGFzcyhNb2NrKTtcbiAgUGlwZShjb3JlUmVmbGVjdFBpcGVSZXNvbHZlKHBpcGUpKShtb2NrKTtcbiAgZGVjb3JhdGVNb2NrKG1vY2ssIHBpcGUsIHtcbiAgICBpbml0OiAoaW5zdGFuY2U6IFBpcGVUcmFuc2Zvcm0pID0+IHtcbiAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgaW5zdGFuY2UudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKCFpbnN0YW5jZS50cmFuc2Zvcm0pIHtcbiAgICAgICAgaGVscGVyTW9ja1NlcnZpY2UubW9jayhpbnN0YW5jZSwgJ3RyYW5zZm9ybScsIGAke2luc3RhbmNlLmNvbnN0cnVjdG9yLm5hbWV9LnRyYW5zZm9ybWApO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiBtb2NrO1xufTtcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvTW9ja1BpcGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1vY2tQaXBlPFRQaXBlIGV4dGVuZHMgUGlwZVRyYW5zZm9ybT4oXG4gIHBpcGU6IFR5cGU8VFBpcGU+LFxuICB0cmFuc2Zvcm0/OiBUUGlwZVsndHJhbnNmb3JtJ10sXG4pOiBUeXBlPE1vY2tlZFBpcGU8VFBpcGU+PjtcblxuZXhwb3J0IGZ1bmN0aW9uIE1vY2tQaXBlPFRQaXBlIGV4dGVuZHMgUGlwZVRyYW5zZm9ybT4oXG4gIHBpcGU6IFR5cGU8VFBpcGU+LFxuICB0cmFuc2Zvcm0/OiBUUGlwZVsndHJhbnNmb3JtJ10sXG4pOiBUeXBlPE1vY2tlZFBpcGU8VFBpcGU+PiB7XG4gIGZ1bmNJbXBvcnRFeGlzdHMocGlwZSwgJ01vY2tQaXBlJyk7XG5cbiAgaWYgKGlzTW9ja05nRGVmKHBpcGUsICdwJykpIHtcbiAgICByZXR1cm4gcGlwZTtcbiAgfVxuXG4gIC8vIFdlIGFyZSBpbnNpZGUgb2YgYW4gJ2l0Jy4gSXQgaXMgZmluZSB0byByZXR1cm4gYSBtb2NrIGNvcHkuXG4gIGlmICgoZ2V0VGVzdEJlZCgpIGFzIGFueSkuX2luc3RhbnRpYXRlZCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZ2V0TW9ja2VkTmdEZWZPZihwaXBlLCAncCcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBsb29rcyBsaWtlIGFuIGluLXRlc3QgbW9jay5cbiAgICB9XG4gIH1cbiAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgaWYgKG5nTW9ja3NVbml2ZXJzZS5mbGFncy5oYXMoJ2NhY2hlUGlwZScpICYmIG5nTW9ja3NVbml2ZXJzZS5jYWNoZURlY2xhcmF0aW9ucy5oYXMocGlwZSkpIHtcbiAgICByZXR1cm4gbmdNb2Nrc1VuaXZlcnNlLmNhY2hlRGVjbGFyYXRpb25zLmdldChwaXBlKTtcbiAgfVxuXG4gIGNvbnN0IG1vY2sgPSBnZXRNb2NrQ2xhc3MocGlwZSwgdHJhbnNmb3JtKTtcbiAgaWYgKG5nTW9ja3NVbml2ZXJzZS5mbGFncy5oYXMoJ2NhY2hlUGlwZScpKSB7XG4gICAgbmdNb2Nrc1VuaXZlcnNlLmNhY2hlRGVjbGFyYXRpb25zLnNldChwaXBlLCBtb2NrKTtcbiAgfVxuXG4gIHJldHVybiBtb2NrIGFzIGFueTtcbn1cbiJdfQ==