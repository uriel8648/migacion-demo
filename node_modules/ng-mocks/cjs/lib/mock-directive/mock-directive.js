"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockDirective = exports.MockDirectives = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var core_define_property_1 = __importDefault(require("../common/core.define-property"));
var core_form_1 = __importDefault(require("../common/core.form"));
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_directive_resolve_1 = __importDefault(require("../common/core.reflect.directive-resolve"));
var func_get_mocked_ng_def_of_1 = require("../common/func.get-mocked-ng-def-of");
var func_import_exists_1 = __importDefault(require("../common/func.import-exists"));
var func_is_mock_ng_def_1 = require("../common/func.is-mock-ng-def");
var mock_control_value_accessor_1 = require("../common/mock-control-value-accessor");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var decorate_declaration_1 = __importDefault(require("../mock/decorate-declaration"));
var DirectiveMockBase = /** @class */ (function (_super) {
    __extends(DirectiveMockBase, _super);
    // istanbul ignore next
    function DirectiveMockBase(injector, ngControl, // NgControl
    cdr, vcr, element, template) {
        if (element === void 0) { element = null; }
        if (template === void 0) { template = null; }
        var _this = _super.call(this, injector, ngControl) || this;
        _this.__ngMocksInstall(vcr, cdr, element, template);
        return _this;
    }
    DirectiveMockBase.prototype.ngOnInit = function () {
        var config = this.__ngMocksConfig.config;
        if (config === null || config === void 0 ? void 0 : config.render) {
            var _a = config.render !== true
                ? config.render
                : {
                    $implicit: undefined,
                    variables: {},
                }, $implicit = _a.$implicit, variables = _a.variables;
            this.__render($implicit, variables);
        }
    };
    DirectiveMockBase.prototype.__ngMocksInstall = function (vcr, cdr, element, template) {
        // Basically any directive on ng-template is treated as structural, even it does not control render process.
        // In our case we do not if we should render it or not and due to this we do nothing.
        (0, core_define_property_1.default)(this, '__element', element);
        (0, core_define_property_1.default)(this, '__template', template);
        (0, core_define_property_1.default)(this, '__viewContainer', vcr);
        (0, core_define_property_1.default)(this, '__vcr', vcr);
        (0, core_define_property_1.default)(this, '__cdr', cdr);
        (0, core_define_property_1.default)(this, '__isStructural', template && vcr);
        // Providing method to render mock values.
        (0, core_define_property_1.default)(this, '__render', function ($implicit, variables) {
            if (vcr && template) {
                vcr.clear();
                vcr.createEmbeddedView(template, __assign(__assign({}, variables), { $implicit: $implicit }));
                cdr.detectChanges();
            }
        });
    };
    return DirectiveMockBase;
}(mock_control_value_accessor_1.LegacyControlValueAccessor));
(0, core_define_property_1.default)(DirectiveMockBase, 'parameters', [
    [core_1.Injector],
    [core_form_1.default.NgControl || /* istanbul ignore next */ (function () { return undefined; }), new core_1.Optional(), new core_1.Self()],
    [core_1.ChangeDetectorRef],
    [core_1.ViewContainerRef],
    [core_1.ElementRef, new core_1.Optional(), new core_1.Self()],
    [core_1.TemplateRef, new core_1.Optional(), new core_1.Self()],
]);
var decorateClass = function (directive, mock) {
    var meta = (0, core_reflect_directive_resolve_1.default)(directive);
    var selector = meta.selector, exportAs = meta.exportAs, inputs = meta.inputs, outputs = meta.outputs, queries = meta.queries, providers = meta.providers;
    var mockMeta = { inputs: inputs, outputs: outputs, providers: providers, queries: queries };
    var mockParams = { exportAs: exportAs, selector: selector };
    var options = (0, decorate_declaration_1.default)(directive, mock, mockMeta, mockParams);
    (0, core_1.Directive)(options)(mock);
};
function MockDirectives() {
    var directives = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        directives[_i] = arguments[_i];
    }
    return directives.map(MockDirective);
}
exports.MockDirectives = MockDirectives;
/**
 * @see https://ng-mocks.sudo.eu/api/MockDirective
 */
function MockDirective(directive) {
    (0, func_import_exists_1.default)(directive, 'MockDirective');
    if ((0, func_is_mock_ng_def_1.isMockNgDef)(directive, 'd')) {
        return directive;
    }
    // We are inside of an 'it'.
    // It is fine to to return a mock copy or to throw an exception if it was not replaced with its mock copy in TestBed.
    if ((0, testing_1.getTestBed)()._instantiated) {
        try {
            return (0, func_get_mocked_ng_def_of_1.getMockedNgDefOf)(directive, 'd');
        }
        catch (error) {
            // looks like an in-test mock.
        }
    }
    if (ng_mocks_universe_1.default.flags.has('cacheDirective') && ng_mocks_universe_1.default.cacheDeclarations.has(directive)) {
        return ng_mocks_universe_1.default.cacheDeclarations.get(directive);
    }
    var mock = (0, core_helpers_1.extendClass)(DirectiveMockBase);
    decorateClass(directive, mock);
    // istanbul ignore else
    if (ng_mocks_universe_1.default.flags.has('cacheDirective')) {
        ng_mocks_universe_1.default.cacheDeclarations.set(directive, mock);
    }
    return mock;
}
exports.MockDirective = MockDirective;
//# sourceMappingURL=data:application/json;base64,