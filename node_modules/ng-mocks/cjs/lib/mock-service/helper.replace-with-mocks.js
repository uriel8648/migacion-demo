"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_tokens_1 = require("../common/core.tokens");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var handleSection = function (section) {
    var e_1, _a;
    var guards = [];
    try {
        for (var section_1 = __values(section), section_1_1 = section_1.next(); !section_1_1.done; section_1_1 = section_1.next()) {
            var guard = section_1_1.value;
            if (ng_mocks_universe_1.default.isProvidedDef(guard)) {
                guards.push(guard);
                continue;
            }
            if (ng_mocks_universe_1.default.isExcludedDef(core_tokens_1.NG_MOCKS_GUARDS)) {
                continue;
            }
            guards.push(guard);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (section_1_1 && !section_1_1.done && (_a = section_1.return)) _a.call(section_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return guards;
};
var handleArray = function (value, callback) {
    var e_2, _a;
    var mock = [];
    var updated = false;
    try {
        for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
            var valueItem = value_1_1.value;
            if (ng_mocks_universe_1.default.isExcludedDef(valueItem)) {
                updated = updated || true;
                continue;
            }
            mock.push(callback(valueItem));
            updated = updated || mock[mock.length - 1] !== valueItem;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return [updated, mock];
};
var handleItemKeys = ['canActivate', 'canActivateChild', 'canDeactivate', 'canLoad'];
var handleItemGetGuards = function (mock, section) {
    return Array.isArray(mock[section]) ? handleSection(mock[section]) : mock[section];
};
var handleItem = function (value, callback) {
    var e_3, _a, e_4, _b, _c;
    var mock = {};
    var updated = false;
    try {
        for (var _d = __values(Object.keys(value)), _e = _d.next(); !_e.done; _e = _d.next()) {
            var key = _e.value;
            if (ng_mocks_universe_1.default.isExcludedDef(value[key])) {
                updated = updated || true;
                continue;
            }
            mock[key] = callback(value[key]);
            updated = updated || mock[key] !== value[key];
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_3) throw e_3.error; }
    }
    try {
        // Removal of guards.
        for (var handleItemKeys_1 = __values(handleItemKeys), handleItemKeys_1_1 = handleItemKeys_1.next(); !handleItemKeys_1_1.done; handleItemKeys_1_1 = handleItemKeys_1.next()) {
            var section = handleItemKeys_1_1.value;
            var guards = handleItemGetGuards(mock, section);
            if (guards && mock[section].length !== guards.length) {
                updated = updated || true;
                mock = __assign(__assign({}, mock), (_c = {}, _c[section] = guards, _c));
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (handleItemKeys_1_1 && !handleItemKeys_1_1.done && (_b = handleItemKeys_1.return)) _b.call(handleItemKeys_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return [updated, mock];
};
var replaceWithMocks = function (value) {
    var _a, _b;
    if (ng_mocks_universe_1.default.cacheDeclarations.has(value)) {
        return ng_mocks_universe_1.default.cacheDeclarations.get(value);
    }
    if (typeof value !== 'object') {
        return value;
    }
    var mock;
    var updated = false;
    if (Array.isArray(value)) {
        _a = __read(handleArray(value, replaceWithMocks), 2), updated = _a[0], mock = _a[1];
    }
    else if (value) {
        _b = __read(handleItem(value, replaceWithMocks), 2), updated = _b[0], mock = _b[1];
    }
    if (updated) {
        Object.setPrototypeOf(mock, Object.getPrototypeOf(value));
        return mock;
    }
    return value;
};
exports.default = (function () { return replaceWithMocks; })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLnJlcGxhY2Utd2l0aC1tb2Nrcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLXNlcnZpY2UvaGVscGVyLnJlcGxhY2Utd2l0aC1tb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscURBQXdEO0FBQ3hELGtGQUEwRDtBQUUxRCxJQUFNLGFBQWEsR0FBRyxVQUFDLE9BQWM7O0lBQ25DLElBQU0sTUFBTSxHQUFVLEVBQUUsQ0FBQzs7UUFFekIsS0FBb0IsSUFBQSxZQUFBLFNBQUEsT0FBTyxDQUFBLGdDQUFBLHFEQUFFO1lBQXhCLElBQU0sS0FBSyxvQkFBQTtZQUNkLElBQUksMkJBQWUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25CLFNBQVM7YUFDVjtZQUNELElBQUksMkJBQWUsQ0FBQyxhQUFhLENBQUMsNkJBQWUsQ0FBQyxFQUFFO2dCQUNsRCxTQUFTO2FBQ1Y7WUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BCOzs7Ozs7Ozs7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixJQUFNLFdBQVcsR0FBRyxVQUFDLEtBQVksRUFBRSxRQUFhOztJQUM5QyxJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7SUFDaEIsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDOztRQUVwQixLQUF3QixJQUFBLFVBQUEsU0FBQSxLQUFLLENBQUEsNEJBQUEsK0NBQUU7WUFBMUIsSUFBTSxTQUFTLGtCQUFBO1lBQ2xCLElBQUksMkJBQWUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQzVDLE9BQU8sR0FBRyxPQUFPLElBQUksSUFB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QixLQUFBLE9BQWtCLFVBQVUsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsSUFBQSxFQUFwRCxPQUFPLFFBQUEsRUFBRSxJQUFJLFFBQUEsQ0FBd0M7S0FDdkQ7SUFFRCxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUUxRCxPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUM7QUFFRixrQkFBZSxDQUFDLGNBQU0sT0FBQSxnQkFBZ0IsRUFBaEIsQ0FBZ0IsQ0FBQyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOR19NT0NLU19HVUFSRFMgfSBmcm9tICcuLi9jb21tb24vY29yZS50b2tlbnMnO1xuaW1wb3J0IG5nTW9ja3NVbml2ZXJzZSBmcm9tICcuLi9jb21tb24vbmctbW9ja3MtdW5pdmVyc2UnO1xuXG5jb25zdCBoYW5kbGVTZWN0aW9uID0gKHNlY3Rpb246IGFueVtdKSA9PiB7XG4gIGNvbnN0IGd1YXJkczogYW55W10gPSBbXTtcblxuICBmb3IgKGNvbnN0IGd1YXJkIG9mIHNlY3Rpb24pIHtcbiAgICBpZiAobmdNb2Nrc1VuaXZlcnNlLmlzUHJvdmlkZWREZWYoZ3VhcmQpKSB7XG4gICAgICBndWFyZHMucHVzaChndWFyZCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5nTW9ja3NVbml2ZXJzZS5pc0V4Y2x1ZGVkRGVmKE5HX01PQ0tTX0dVQVJEUykpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBndWFyZHMucHVzaChndWFyZCk7XG4gIH1cblxuICByZXR1cm4gZ3VhcmRzO1xufTtcblxuY29uc3QgaGFuZGxlQXJyYXkgPSAodmFsdWU6IGFueVtdLCBjYWxsYmFjazogYW55KTogW2Jvb2xlYW4sIGFueVtdXSA9PiB7XG4gIGNvbnN0IG1vY2sgPSBbXTtcbiAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcblxuICBmb3IgKGNvbnN0IHZhbHVlSXRlbSBvZiB2YWx1ZSkge1xuICAgIGlmIChuZ01vY2tzVW5pdmVyc2UuaXNFeGNsdWRlZERlZih2YWx1ZUl0ZW0pKSB7XG4gICAgICB1cGRhdGVkID0gdXBkYXRlZCB8fCB0cnVlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIG1vY2sucHVzaChjYWxsYmFjayh2YWx1ZUl0ZW0pKTtcbiAgICB1cGRhdGVkID0gdXBkYXRlZCB8fCBtb2NrW21vY2subGVuZ3RoIC0gMV0gIT09IHZhbHVlSXRlbTtcbiAgfVxuXG4gIHJldHVybiBbdXBkYXRlZCwgbW9ja107XG59O1xuXG5jb25zdCBoYW5kbGVJdGVtS2V5cyA9IFsnY2FuQWN0aXZhdGUnLCAnY2FuQWN0aXZhdGVDaGlsZCcsICdjYW5EZWFjdGl2YXRlJywgJ2NhbkxvYWQnXTtcbmNvbnN0IGhhbmRsZUl0ZW1HZXRHdWFyZHMgPSAobW9jazogYW55LCBzZWN0aW9uOiBzdHJpbmcpID0+XG4gIEFycmF5LmlzQXJyYXkobW9ja1tzZWN0aW9uXSkgPyBoYW5kbGVTZWN0aW9uKG1vY2tbc2VjdGlvbl0pIDogbW9ja1tzZWN0aW9uXTtcblxuY29uc3QgaGFuZGxlSXRlbSA9ICh2YWx1ZTogUmVjb3JkPGtleW9mIGFueSwgYW55PiwgY2FsbGJhY2s6IGFueSk6IFtib29sZWFuLCBSZWNvcmQ8a2V5b2YgYW55LCBhbnk+XSA9PiB7XG4gIGxldCBtb2NrOiBSZWNvcmQ8a2V5b2YgYW55LCBhbnk+ID0ge307XG4gIGxldCB1cGRhdGVkID0gZmFsc2U7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XG4gICAgaWYgKG5nTW9ja3NVbml2ZXJzZS5pc0V4Y2x1ZGVkRGVmKHZhbHVlW2tleV0pKSB7XG4gICAgICB1cGRhdGVkID0gdXBkYXRlZCB8fCB0cnVlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIG1vY2tba2V5XSA9IGNhbGxiYWNrKHZhbHVlW2tleV0pO1xuICAgIHVwZGF0ZWQgPSB1cGRhdGVkIHx8IG1vY2tba2V5XSAhPT0gdmFsdWVba2V5XTtcbiAgfVxuXG4gIC8vIFJlbW92YWwgb2YgZ3VhcmRzLlxuICBmb3IgKGNvbnN0IHNlY3Rpb24gb2YgaGFuZGxlSXRlbUtleXMpIHtcbiAgICBjb25zdCBndWFyZHM6IGFueVtdID0gaGFuZGxlSXRlbUdldEd1YXJkcyhtb2NrLCBzZWN0aW9uKTtcbiAgICBpZiAoZ3VhcmRzICYmIG1vY2tbc2VjdGlvbl0ubGVuZ3RoICE9PSBndWFyZHMubGVuZ3RoKSB7XG4gICAgICB1cGRhdGVkID0gdXBkYXRlZCB8fCB0cnVlO1xuICAgICAgbW9jayA9IHsgLi4ubW9jaywgW3NlY3Rpb25dOiBndWFyZHMgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3VwZGF0ZWQsIG1vY2tdO1xufTtcblxuY29uc3QgcmVwbGFjZVdpdGhNb2NrcyA9ICh2YWx1ZTogYW55KTogYW55ID0+IHtcbiAgaWYgKG5nTW9ja3NVbml2ZXJzZS5jYWNoZURlY2xhcmF0aW9ucy5oYXModmFsdWUpKSB7XG4gICAgcmV0dXJuIG5nTW9ja3NVbml2ZXJzZS5jYWNoZURlY2xhcmF0aW9ucy5nZXQodmFsdWUpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgbGV0IG1vY2s6IGFueTtcbiAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBbdXBkYXRlZCwgbW9ja10gPSBoYW5kbGVBcnJheSh2YWx1ZSwgcmVwbGFjZVdpdGhNb2Nrcyk7XG4gIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICBbdXBkYXRlZCwgbW9ja10gPSBoYW5kbGVJdGVtKHZhbHVlLCByZXBsYWNlV2l0aE1vY2tzKTtcbiAgfVxuXG4gIGlmICh1cGRhdGVkKSB7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG1vY2ssIE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkpO1xuXG4gICAgcmV0dXJuIG1vY2s7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4gcmVwbGFjZVdpdGhNb2NrcykoKTtcbiJdfQ==