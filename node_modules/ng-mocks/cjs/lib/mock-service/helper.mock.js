"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var helper_mock_service_1 = __importDefault(require("./helper.mock-service"));
// istanbul ignore next
var createName = function (name, mockName, instance, accessType) {
    return (mockName
        ? mockName
        : typeof instance.prototype === 'function'
            ? instance.prototype.name
            : typeof instance.constructor === 'function'
                ? instance.constructor.name
                : 'unknown') + "." + name + (accessType || '');
};
var generateMockDef = function (def, mock, accessType) {
    var _a;
    return (__assign(__assign(__assign(__assign({}, (accessType === 'get' && def && def.set
        ? {
            set: def.set,
        }
        : {})), (accessType === 'set' && def && def.get
        ? {
            get: def.get,
        }
        : {})), (accessType
        ? {}
        : {
            writable: true,
        })), (_a = {}, _a[accessType || 'value'] = mock, _a.configurable = true, _a.enumerable = true, _a)));
};
var parseArgs = function (args) {
    var accessType;
    var mockName;
    if (args.length && args[0] !== 'get' && args[0] !== 'set') {
        mockName = args[0];
    }
    else if (args.length && (args[0] === 'get' || args[0] === 'set')) {
        accessType = args[0];
        mockName = args[1];
    }
    return { accessType: accessType, mockName: mockName };
};
exports.default = (function (instance, name) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var _a = parseArgs(args), accessType = _a.accessType, mockName = _a.mockName;
    var def = Object.getOwnPropertyDescriptor(instance, name);
    if (def && def[accessType || 'value']) {
        return def[accessType || 'value'];
    }
    var detectedMockName = createName(name, mockName, instance, accessType);
    var mock = helper_mock_service_1.default.mockFunction(detectedMockName, !!accessType);
    var mockDef = generateMockDef(def, mock, accessType);
    if (mockDef.get && mockDef.set && mockDef.get.__ngMocks && mockDef.set.__ngMocks) {
        mockDef.set.__ngMocksSet(function (val) { return mockDef.get.__ngMocksGet(val); });
    }
    Object.defineProperty(instance, name, mockDef);
    return mock;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLm1vY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1zZXJ2aWNlL2hlbHBlci5tb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4RUFBc0Q7QUFHdEQsdUJBQXVCO0FBQ3ZCLElBQU0sVUFBVSxHQUFHLFVBQUMsSUFBWSxFQUFFLFFBQWlCLEVBQUUsUUFBYyxFQUFFLFVBQW1CO0lBQ3RGLE9BQUEsQ0FDRSxRQUFRO1FBQ04sQ0FBQyxDQUFDLFFBQVE7UUFDVixDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsU0FBUyxLQUFLLFVBQVU7WUFDMUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSTtZQUN6QixDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsV0FBVyxLQUFLLFVBQVU7Z0JBQzVDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUk7Z0JBQzNCLENBQUMsQ0FBQyxTQUFTLFVBQ1gsSUFBSSxJQUFHLFVBQVUsSUFBSSxFQUFFLENBQUU7QUFSN0IsQ0FRNkIsQ0FBQztBQUVoQyxJQUFNLGVBQWUsR0FBRyxVQUFDLEdBQVEsRUFBRSxJQUFTLEVBQUUsVUFBbUI7O0lBQXlCLE9BQUEseUNBQ3JGLENBQUMsVUFBVSxLQUFLLEtBQUssSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUc7UUFDeEMsQ0FBQyxDQUFDO1lBQ0UsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHO1NBQ2I7UUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLEdBRUosQ0FBQyxVQUFVLEtBQUssS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRztRQUN4QyxDQUFDLENBQUM7WUFDRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7U0FDYjtRQUNILENBQUMsQ0FBQyxFQUFFLENBQUMsR0FFSixDQUFDLFVBQVU7UUFDWixDQUFDLENBQUMsRUFBRTtRQUNKLENBQUMsQ0FBQztZQUNFLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxnQkFFTCxVQUFVLElBQUksT0FBTyxJQUFHLElBQUksRUFDN0IsZUFBWSxHQUFFLElBQUksRUFDbEIsYUFBVSxHQUFFLElBQUksT0FDaEI7QUF0QndGLENBc0J4RixDQUFDO0FBRUgsSUFBTSxTQUFTLEdBQUcsVUFDaEIsSUFBVztJQUtYLElBQUksVUFBcUMsQ0FBQztJQUMxQyxJQUFJLFFBQTRCLENBQUM7SUFFakMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRTtRQUN6RCxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO1NBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDbEUsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0lBRUQsT0FBTyxFQUFFLFVBQVUsWUFBQSxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUM7QUFDbEMsQ0FBQyxDQUFDO0FBRUYsbUJBQWUsVUFBcUIsUUFBYSxFQUFFLElBQVk7SUFBRSxjQUFrQztTQUFsQyxVQUFrQyxFQUFsQyxxQkFBa0MsRUFBbEMsSUFBa0M7UUFBbEMsNkJBQWtDOztJQUMzRixJQUFBLEtBQTJCLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBeEMsVUFBVSxnQkFBQSxFQUFFLFFBQVEsY0FBb0IsQ0FBQztJQUVqRCxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVELElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLEVBQUU7UUFDckMsT0FBTyxHQUFHLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxDQUFDO0tBQ25DO0lBRUQsSUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDMUUsSUFBTSxJQUFJLEdBQVEsNkJBQWlCLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVqRixJQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN2RCxJQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsSUFBSyxPQUFPLENBQUMsR0FBVyxDQUFDLFNBQVMsSUFBSyxPQUFPLENBQUMsR0FBVyxDQUFDLFNBQVMsRUFBRTtRQUNqRyxPQUFPLENBQUMsR0FBVyxDQUFDLFlBQVksQ0FBQyxVQUFDLEdBQVEsSUFBSyxPQUFDLE9BQU8sQ0FBQyxHQUFXLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUF0QyxDQUFzQyxDQUFDLENBQUM7S0FDekY7SUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFL0MsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaGVscGVyTW9ja1NlcnZpY2UgZnJvbSAnLi9oZWxwZXIubW9jay1zZXJ2aWNlJztcbmltcG9ydCB7IE1vY2tlZEZ1bmN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5jb25zdCBjcmVhdGVOYW1lID0gKG5hbWU6IHN0cmluZywgbW9ja05hbWU/OiBzdHJpbmcsIGluc3RhbmNlPzogYW55LCBhY2Nlc3NUeXBlPzogc3RyaW5nKSA9PlxuICBgJHtcbiAgICBtb2NrTmFtZVxuICAgICAgPyBtb2NrTmFtZVxuICAgICAgOiB0eXBlb2YgaW5zdGFuY2UucHJvdG90eXBlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IGluc3RhbmNlLnByb3RvdHlwZS5uYW1lXG4gICAgICA6IHR5cGVvZiBpbnN0YW5jZS5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBpbnN0YW5jZS5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICA6ICd1bmtub3duJ1xuICB9LiR7bmFtZX0ke2FjY2Vzc1R5cGUgfHwgJyd9YDtcblxuY29uc3QgZ2VuZXJhdGVNb2NrRGVmID0gKGRlZjogYW55LCBtb2NrOiBhbnksIGFjY2Vzc1R5cGU/OiBzdHJpbmcpOiBQcm9wZXJ0eURlc2NyaXB0b3IgPT4gKHtcbiAgLi4uKGFjY2Vzc1R5cGUgPT09ICdnZXQnICYmIGRlZiAmJiBkZWYuc2V0XG4gICAgPyB7XG4gICAgICAgIHNldDogZGVmLnNldCxcbiAgICAgIH1cbiAgICA6IHt9KSxcblxuICAuLi4oYWNjZXNzVHlwZSA9PT0gJ3NldCcgJiYgZGVmICYmIGRlZi5nZXRcbiAgICA/IHtcbiAgICAgICAgZ2V0OiBkZWYuZ2V0LFxuICAgICAgfVxuICAgIDoge30pLFxuXG4gIC4uLihhY2Nlc3NUeXBlXG4gICAgPyB7fVxuICAgIDoge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIH0pLFxuXG4gIFthY2Nlc3NUeXBlIHx8ICd2YWx1ZSddOiBtb2NrLFxuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG59KTtcblxuY29uc3QgcGFyc2VBcmdzID0gKFxuICBhcmdzOiBhbnlbXSxcbik6IHtcbiAgYWNjZXNzVHlwZT86ICdnZXQnIHwgJ3NldCc7XG4gIG1vY2tOYW1lPzogc3RyaW5nO1xufSA9PiB7XG4gIGxldCBhY2Nlc3NUeXBlOiAnZ2V0JyB8ICdzZXQnIHwgdW5kZWZpbmVkO1xuICBsZXQgbW9ja05hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICBpZiAoYXJncy5sZW5ndGggJiYgYXJnc1swXSAhPT0gJ2dldCcgJiYgYXJnc1swXSAhPT0gJ3NldCcpIHtcbiAgICBtb2NrTmFtZSA9IGFyZ3NbMF07XG4gIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggJiYgKGFyZ3NbMF0gPT09ICdnZXQnIHx8IGFyZ3NbMF0gPT09ICdzZXQnKSkge1xuICAgIGFjY2Vzc1R5cGUgPSBhcmdzWzBdO1xuICAgIG1vY2tOYW1lID0gYXJnc1sxXTtcbiAgfVxuXG4gIHJldHVybiB7IGFjY2Vzc1R5cGUsIG1vY2tOYW1lIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCA8VCA9IE1vY2tlZEZ1bmN0aW9uPihpbnN0YW5jZTogYW55LCBuYW1lOiBzdHJpbmcsIC4uLmFyZ3M6IEFycmF5PHN0cmluZyB8IHVuZGVmaW5lZD4pOiBUID0+IHtcbiAgY29uc3QgeyBhY2Nlc3NUeXBlLCBtb2NrTmFtZSB9ID0gcGFyc2VBcmdzKGFyZ3MpO1xuXG4gIGNvbnN0IGRlZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaW5zdGFuY2UsIG5hbWUpO1xuICBpZiAoZGVmICYmIGRlZlthY2Nlc3NUeXBlIHx8ICd2YWx1ZSddKSB7XG4gICAgcmV0dXJuIGRlZlthY2Nlc3NUeXBlIHx8ICd2YWx1ZSddO1xuICB9XG5cbiAgY29uc3QgZGV0ZWN0ZWRNb2NrTmFtZSA9IGNyZWF0ZU5hbWUobmFtZSwgbW9ja05hbWUsIGluc3RhbmNlLCBhY2Nlc3NUeXBlKTtcbiAgY29uc3QgbW9jazogYW55ID0gaGVscGVyTW9ja1NlcnZpY2UubW9ja0Z1bmN0aW9uKGRldGVjdGVkTW9ja05hbWUsICEhYWNjZXNzVHlwZSk7XG5cbiAgY29uc3QgbW9ja0RlZiA9IGdlbmVyYXRlTW9ja0RlZihkZWYsIG1vY2ssIGFjY2Vzc1R5cGUpO1xuICBpZiAobW9ja0RlZi5nZXQgJiYgbW9ja0RlZi5zZXQgJiYgKG1vY2tEZWYuZ2V0IGFzIGFueSkuX19uZ01vY2tzICYmIChtb2NrRGVmLnNldCBhcyBhbnkpLl9fbmdNb2Nrcykge1xuICAgIChtb2NrRGVmLnNldCBhcyBhbnkpLl9fbmdNb2Nrc1NldCgodmFsOiBhbnkpID0+IChtb2NrRGVmLmdldCBhcyBhbnkpLl9fbmdNb2Nrc0dldCh2YWwpKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbnN0YW5jZSwgbmFtZSwgbW9ja0RlZik7XG5cbiAgcmV0dXJuIG1vY2s7XG59O1xuIl19