"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_config_1 = __importDefault(require("../common/core.config"));
var func_get_provider_1 = __importDefault(require("../common/func.get-provider"));
var func_is_ng_injection_token_1 = require("../common/func.is-ng-injection-token");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var helper_define_property_descriptor_1 = __importDefault(require("./helper.define-property-descriptor"));
var helper_extract_property_descriptor_1 = __importDefault(require("./helper.extract-property-descriptor"));
var helper_use_factory_1 = __importDefault(require("./helper.use-factory"));
var mock_service_1 = require("./mock-service");
var neverMockProvidedFunction = core_config_1.default.neverMockProvidedFunction, neverMockToken = core_config_1.default.neverMockToken;
var applyMissingClassProperties = function (instance, useClass) {
    var e_1, _a;
    var existing = Object.getOwnPropertyNames(instance);
    var child = (0, mock_service_1.MockService)(useClass);
    try {
        for (var _b = __values(Object.getOwnPropertyNames(child)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var name_1 = _c.value;
            if (existing.indexOf(name_1) !== -1) {
                continue;
            }
            var def = (0, helper_extract_property_descriptor_1.default)(child, name_1);
            (0, helper_define_property_descriptor_1.default)(instance, name_1, def);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
var createFactoryProvider = function (provider, provide) {
    return (0, helper_use_factory_1.default)(provide, function () {
        var instance = (0, mock_service_1.MockService)(provide);
        // Magic below adds missed properties to the instance to
        // fulfill missed abstract methods.
        if (provide !== provider && Object.keys(provider).indexOf('useClass') !== -1) {
            applyMissingClassProperties(instance, provider.useClass);
        }
        return instance;
    });
};
var normalizePrimitivesMap = [
    [function (value) { return typeof value === 'boolean'; }, false],
    [function (value) { return typeof value === 'number'; }, 0],
    [function (value) { return typeof value === 'string'; }, ''],
    [function (value) { return value === null; }, null],
];
var normalizePrimitives = function (value) {
    var e_2, _a;
    try {
        for (var normalizePrimitivesMap_1 = __values(normalizePrimitivesMap), normalizePrimitivesMap_1_1 = normalizePrimitivesMap_1.next(); !normalizePrimitivesMap_1_1.done; normalizePrimitivesMap_1_1 = normalizePrimitivesMap_1.next()) {
            var _b = __read(normalizePrimitivesMap_1_1.value, 2), check = _b[0], result = _b[1];
            if (check(value)) {
                return result;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (normalizePrimitivesMap_1_1 && !normalizePrimitivesMap_1_1.done && (_a = normalizePrimitivesMap_1.return)) _a.call(normalizePrimitivesMap_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return undefined;
};
var createValueProvider = function (provider, provide) {
    return (0, helper_use_factory_1.default)(provide, function () {
        return provider.useValue && typeof provider.useValue === 'object'
            ? (0, mock_service_1.MockService)(provider.useValue)
            : normalizePrimitives(provider.useValue);
    });
};
var createClassProvider = function (provider, provide) {
    return ng_mocks_universe_1.default.builtProviders.has(provider.useClass) &&
        ng_mocks_universe_1.default.builtProviders.get(provider.useClass) === provider.useClass
        ? provider
        : (0, helper_use_factory_1.default)(provide, function () { return (0, mock_service_1.MockService)(provider.useClass); });
};
var createMockProvider = function (provider, provide, cacheProviders) {
    var mockProvider;
    if (typeof provide === 'function') {
        mockProvider = createFactoryProvider(provider, provide);
    }
    if (provide === provider && mockProvider && cacheProviders) {
        cacheProviders.set(provide, mockProvider);
    }
    return mockProvider;
};
// Tokens are special subject, we can skip adding them because in a mock module they are useless.
// The main problem is that providing undefined to HTTP_INTERCEPTORS and others breaks their code.
// If a testing module / component requires omitted tokens then they should be provided manually
// during creation of TestBed module.
var handleProvider = function (provider, provide, useFactory) {
    var _a;
    if (provide === provider) {
        return useFactory ? (0, helper_use_factory_1.default)(provider, function () { return undefined; }) : undefined;
    }
    if (provider.multi) {
        (_a = ng_mocks_universe_1.default.config.get('ngMocksMulti')) === null || _a === void 0 ? void 0 : _a.add(provide);
        return undefined;
    }
    var mockProvider;
    // istanbul ignore else
    if (Object.keys(provider).indexOf('useValue') !== -1) {
        mockProvider = createValueProvider(provider, provide);
    }
    else if (Object.keys(provider).indexOf('useExisting') !== -1) {
        mockProvider = provider;
    }
    else if (Object.keys(provider).indexOf('useClass') !== -1) {
        mockProvider = createClassProvider(provider, provide);
    }
    else if (Object.keys(provider).indexOf('useFactory') !== -1) {
        mockProvider = (0, helper_use_factory_1.default)(provide, function () { return ({}); });
    }
    return mockProvider;
};
var isNeverMockFunction = function (provide) {
    return typeof provide === 'function' && neverMockProvidedFunction.indexOf(provide.name) !== -1;
};
var isNeverMockToken = function (provide) {
    return (0, func_is_ng_injection_token_1.isNgInjectionToken)(provide) && neverMockToken.indexOf(provide.toString()) !== -1;
};
function default_1(provider, useFactory) {
    if (useFactory === void 0) { useFactory = false; }
    var provide = (0, func_get_provider_1.default)(provider);
    if (ng_mocks_universe_1.default.getResolution(provide) === 'mock') {
        // nothing to do
    }
    else if (isNeverMockFunction(provide)) {
        return provider;
    } /* istanbul ignore if because we mock BrowserModule */
    else if (isNeverMockToken(provide)) {
        return undefined;
    }
    // Only pure provides should be cached to avoid their influence on
    // another different declarations.
    var cacheProviders = ng_mocks_universe_1.default.flags.has('cacheProvider')
        ? ng_mocks_universe_1.default.cacheProviders
        : /* istanbul ignore next */ undefined;
    if (provide === provider && cacheProviders && cacheProviders.has(provide)) {
        return cacheProviders.get(provide);
    }
    return createMockProvider(provider, provide, cacheProviders) || handleProvider(provider, provide, useFactory);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,