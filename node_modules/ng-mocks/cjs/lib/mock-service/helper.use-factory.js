"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var core_helpers_1 = require("../common/core.helpers");
var func_is_ng_injection_token_1 = require("../common/func.is-ng-injection-token");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var mock_helper_stub_1 = __importDefault(require("../mock-helper/mock-helper.stub"));
var mock_instance_apply_1 = __importDefault(require("../mock-instance/mock-instance-apply"));
var mock_service_1 = require("./mock-service");
var applyCallbackToken = function (def) { return (0, func_is_ng_injection_token_1.isNgInjectionToken)(def) || typeof def === 'string'; };
var applyCallback = function (def, inst, callbacks, injector, overrides) {
    var e_1, _a;
    var instance = inst;
    try {
        for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
            var callback = callbacks_1_1.value;
            var override = callback(instance, injector);
            if (applyCallbackToken(def)) {
                instance = override;
                continue;
            }
            // overrides return real value.
            if (callback === overrides) {
                instance = override;
                continue;
            }
            if (!override) {
                continue;
            }
            instance = (0, mock_helper_stub_1.default)(instance, override);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return instance;
};
exports.default = (function (def, init, overrides) { return ({
    deps: [core_1.Injector],
    provide: def,
    useFactory: function (injector) {
        var instance = init ? init() : (0, mock_service_1.MockService)(def);
        var configGlobal = ng_mocks_universe_1.default.getOverrides().get(def);
        var callbacks = configGlobal ? (0, core_helpers_1.mapValues)(configGlobal) : [];
        if (overrides) {
            callbacks.push(overrides);
        }
        callbacks.push.apply(callbacks, __spreadArray([], __read((0, mock_instance_apply_1.default)(def)), false));
        return applyCallback(def, instance, callbacks, injector, overrides);
    },
}); });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLnVzZS1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL21vY2stc2VydmljZS9oZWxwZXIudXNlLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxzQ0FBMEQ7QUFFMUQsdURBQW1EO0FBQ25ELG1GQUEwRTtBQUMxRSxrRkFBMEQ7QUFDMUQscUZBQTZEO0FBQzdELDZGQUFxRTtBQUVyRSwrQ0FBNkM7QUFFN0MsSUFBTSxrQkFBa0IsR0FBRyxVQUFDLEdBQVEsSUFBYyxPQUFBLElBQUEsK0NBQWtCLEVBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFsRCxDQUFrRCxDQUFDO0FBRXJHLElBQU0sYUFBYSxHQUFHLFVBQUMsR0FBUSxFQUFFLElBQVMsRUFBRSxTQUFnQixFQUFFLFFBQW1CLEVBQUUsU0FBZTs7SUFDaEcsSUFBSSxRQUFRLEdBQVEsSUFBSSxDQUFDOztRQUV6QixLQUF1QixJQUFBLGNBQUEsU0FBQSxTQUFTLENBQUEsb0NBQUEsMkRBQUU7WUFBN0IsSUFBTSxRQUFRLHNCQUFBO1lBQ2pCLElBQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDOUMsSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDM0IsUUFBUSxHQUFHLFFBQVEsQ0FBQztnQkFDcEIsU0FBUzthQUNWO1lBRUQsK0JBQStCO1lBQy9CLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDMUIsUUFBUSxHQUFHLFFBQVEsQ0FBQztnQkFDcEIsU0FBUzthQUNWO1lBRUQsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDYixTQUFTO2FBQ1Y7WUFFRCxRQUFRLEdBQUcsSUFBQSwwQkFBYyxFQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUMvQzs7Ozs7Ozs7O0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBRUYsbUJBQWUsVUFDYixHQUFNLEVBQ04sSUFBYyxFQUNkLFNBQStELElBQzNDLE9BQUEsQ0FBQztJQUNyQixJQUFJLEVBQUUsQ0FBQyxlQUFRLENBQUM7SUFDaEIsT0FBTyxFQUFFLEdBQUc7SUFDWixVQUFVLEVBQUUsVUFBQyxRQUFtQjtRQUM5QixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFBLDBCQUFXLEVBQUMsR0FBVSxDQUFDLENBQUM7UUFFekQsSUFBTSxZQUFZLEdBQXlCLDJCQUFlLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25GLElBQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBQSx3QkFBUyxFQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDOUQsSUFBSSxTQUFTLEVBQUU7WUFDYixTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsU0FBUyxDQUFDLElBQUksT0FBZCxTQUFTLDJCQUFTLElBQUEsNkJBQWlCLEVBQUMsR0FBRyxDQUFDLFdBQUU7UUFFMUMsT0FBTyxhQUFhLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Q0FDRixDQUFDLEVBZm9CLENBZXBCLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGYWN0b3J5UHJvdmlkZXIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IG1hcFZhbHVlcyB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLmhlbHBlcnMnO1xuaW1wb3J0IHsgaXNOZ0luamVjdGlvblRva2VuIH0gZnJvbSAnLi4vY29tbW9uL2Z1bmMuaXMtbmctaW5qZWN0aW9uLXRva2VuJztcbmltcG9ydCBuZ01vY2tzVW5pdmVyc2UgZnJvbSAnLi4vY29tbW9uL25nLW1vY2tzLXVuaXZlcnNlJztcbmltcG9ydCBtb2NrSGVscGVyU3R1YiBmcm9tICcuLi9tb2NrLWhlbHBlci9tb2NrLWhlbHBlci5zdHViJztcbmltcG9ydCBtb2NrSW5zdGFuY2VBcHBseSBmcm9tICcuLi9tb2NrLWluc3RhbmNlL21vY2staW5zdGFuY2UtYXBwbHknO1xuXG5pbXBvcnQgeyBNb2NrU2VydmljZSB9IGZyb20gJy4vbW9jay1zZXJ2aWNlJztcblxuY29uc3QgYXBwbHlDYWxsYmFja1Rva2VuID0gKGRlZjogYW55KTogYm9vbGVhbiA9PiBpc05nSW5qZWN0aW9uVG9rZW4oZGVmKSB8fCB0eXBlb2YgZGVmID09PSAnc3RyaW5nJztcblxuY29uc3QgYXBwbHlDYWxsYmFjayA9IChkZWY6IGFueSwgaW5zdDogYW55LCBjYWxsYmFja3M6IGFueVtdLCBpbmplY3Rvcj86IEluamVjdG9yLCBvdmVycmlkZXM/OiBhbnkpOiB2b2lkID0+IHtcbiAgbGV0IGluc3RhbmNlOiBhbnkgPSBpbnN0O1xuXG4gIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGUgPSBjYWxsYmFjayhpbnN0YW5jZSwgaW5qZWN0b3IpO1xuICAgIGlmIChhcHBseUNhbGxiYWNrVG9rZW4oZGVmKSkge1xuICAgICAgaW5zdGFuY2UgPSBvdmVycmlkZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIG92ZXJyaWRlcyByZXR1cm4gcmVhbCB2YWx1ZS5cbiAgICBpZiAoY2FsbGJhY2sgPT09IG92ZXJyaWRlcykge1xuICAgICAgaW5zdGFuY2UgPSBvdmVycmlkZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICghb3ZlcnJpZGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGluc3RhbmNlID0gbW9ja0hlbHBlclN0dWIoaW5zdGFuY2UsIG92ZXJyaWRlKTtcbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IDxELCBJPihcbiAgZGVmOiBELFxuICBpbml0PzogKCkgPT4gSSxcbiAgb3ZlcnJpZGVzPzogKGluc3RhbmNlOiBJLCBpbmplY3RvcjogSW5qZWN0b3IpID0+IEkgfCBQYXJ0aWFsPEk+LFxuKTogRmFjdG9yeVByb3ZpZGVyID0+ICh7XG4gIGRlcHM6IFtJbmplY3Rvcl0sXG4gIHByb3ZpZGU6IGRlZixcbiAgdXNlRmFjdG9yeTogKGluamVjdG9yPzogSW5qZWN0b3IpID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGluaXQgPyBpbml0KCkgOiBNb2NrU2VydmljZShkZWYgYXMgYW55KTtcblxuICAgIGNvbnN0IGNvbmZpZ0dsb2JhbDogU2V0PGFueT4gfCB1bmRlZmluZWQgPSBuZ01vY2tzVW5pdmVyc2UuZ2V0T3ZlcnJpZGVzKCkuZ2V0KGRlZik7XG4gICAgY29uc3QgY2FsbGJhY2tzID0gY29uZmlnR2xvYmFsID8gbWFwVmFsdWVzKGNvbmZpZ0dsb2JhbCkgOiBbXTtcbiAgICBpZiAob3ZlcnJpZGVzKSB7XG4gICAgICBjYWxsYmFja3MucHVzaChvdmVycmlkZXMpO1xuICAgIH1cbiAgICBjYWxsYmFja3MucHVzaCguLi5tb2NrSW5zdGFuY2VBcHBseShkZWYpKTtcblxuICAgIHJldHVybiBhcHBseUNhbGxiYWNrKGRlZiwgaW5zdGFuY2UsIGNhbGxiYWNrcywgaW5qZWN0b3IsIG92ZXJyaWRlcyk7XG4gIH0sXG59KTtcbiJdfQ==