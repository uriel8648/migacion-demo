"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../common/core.helpers");
var core_tokens_1 = require("../common/core.tokens");
var func_get_provider_1 = __importDefault(require("../common/func.get-provider"));
var func_is_ng_injection_token_1 = require("../common/func.is-ng-injection-token");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var helper_mock_service_1 = __importDefault(require("./helper.mock-service"));
var mock_provider_1 = __importDefault(require("./mock-provider"));
var anyDiffers = function (a, b) {
    var e_1, _a;
    var keys = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        keys[_i - 2] = arguments[_i];
    }
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key = keys_1_1.value;
            if (a[key] !== b[key]) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
};
var createFromResolution = function (provide, resolution) {
    var mockDef = resolution;
    var existingMock = ng_mocks_universe_1.default.builtProviders.get(provide);
    if (existingMock) {
        mockDef = existingMock;
    }
    // A case when a provider is actually a component, directive, pipe.
    if (typeof mockDef === 'function') {
        mockDef = {
            provide: provide,
            useClass: mockDef,
        };
    }
    return mockDef;
};
var isSuitableProvider = function (provider, provide) {
    return ng_mocks_universe_1.default.builtProviders.has(core_tokens_1.NG_MOCKS_INTERCEPTORS) &&
        ng_mocks_universe_1.default.builtProviders.get(core_tokens_1.NG_MOCKS_INTERCEPTORS) === null &&
        (0, func_is_ng_injection_token_1.isNgInjectionToken)(provide) &&
        provide.toString() === 'InjectionToken HTTP_INTERCEPTORS' &&
        provide !== provider;
};
var excludeInterceptors = function (provider, provide) {
    if (isSuitableProvider(provider, provide)) {
        if (provider.useFactory || provider.useValue) {
            return true;
        }
        var interceptor = provider.useExisting || provider.useClass;
        if (!ng_mocks_universe_1.default.builtProviders.has(interceptor) || ng_mocks_universe_1.default.builtProviders.get(interceptor) === null) {
            return true;
        }
    }
    return false;
};
var parseProvider = function (provider, callback) {
    var provide = (0, func_get_provider_1.default)(provider);
    var multi = provider !== provide && !!provider.multi;
    return {
        change: function () {
            if (callback) {
                callback();
            }
        },
        multi: multi,
        provide: provide,
    };
};
// if the provider is a value, we need to go through the value and to replace all mock instances.
var replaceWithMocks = function (provider, provide, mockDef) {
    if (provide !== provider && mockDef && mockDef.useValue) {
        var useValue = helper_mock_service_1.default.replaceWithMocks(mockDef.useValue);
        return useValue === mockDef.useValue
            ? mockDef
            : __assign(__assign({}, mockDef), { useValue: useValue });
    }
    return mockDef;
};
var createPredefinedMockProvider = function (provider, provide) {
    // Then we check decisions whether we should keep or replace a provider.
    if (ng_mocks_universe_1.default.builtProviders.has(provide)) {
        var mockDef = ng_mocks_universe_1.default.builtProviders.get(provide);
        if (mockDef === provide) {
            return provider;
        }
        return mockDef;
    }
    return undefined;
};
var createMockProvider = function (provider, provide, change) {
    var _a;
    var mockDef = createPredefinedMockProvider(provider, provide);
    if (!mockDef && ng_mocks_universe_1.default.flags.has('skipMock') && ng_mocks_universe_1.default.getResolution(provide) !== 'mock') {
        (_a = ng_mocks_universe_1.default.config.get('ngMocksDepsSkip')) === null || _a === void 0 ? void 0 : _a.add(provide);
        mockDef = provider;
    }
    if (!mockDef) {
        mockDef = (0, mock_provider_1.default)(provider);
    }
    mockDef = replaceWithMocks(provider, provide, mockDef);
    if (!areEqualDefs(mockDef, provider, provide)) {
        change();
    }
    // Touching only when we really provide a value.
    if (mockDef) {
        ng_mocks_universe_1.default.touches.add(provide);
    }
    return mockDef;
};
var areEqualDefs = function (mockDef, provider, provide) {
    var providerDiffers = false;
    var defDiffers = !mockDef;
    if (provider && mockDef && !defDiffers) {
        defDiffers = anyDiffers(provider, mockDef, 'provide', 'useValue', 'useClass', 'useExisting', 'useFactory', 'deps');
    }
    if (provider === provide && mockDef !== provider) {
        providerDiffers = true;
    }
    else if (provider !== provide && defDiffers) {
        providerDiffers = true;
    }
    return !providerDiffers;
};
var isPreconfiguredDependency = function (provider, provide) {
    //  we should not touch excluded providers.
    if (ng_mocks_universe_1.default.builtProviders.has(provide) && ng_mocks_universe_1.default.builtProviders.get(provide) === null) {
        return true;
    }
    if (provide !== provider && provider.deps) {
        (0, core_helpers_1.extractDependency)(provider.deps, ng_mocks_universe_1.default.config.get('ngMocksDeps'));
    }
    return excludeInterceptors(provider, provide);
};
// tries to resolve a provider based on current universe state.
exports.default = (function (provider, resolutions, changed) {
    var _a = parseProvider(provider, changed), provide = _a.provide, multi = _a.multi, change = _a.change;
    //  we should not touch our system providers.
    if (provider && typeof provider === 'object' && provider.useExisting && provider.useExisting.mockOf) {
        return provider;
    }
    if (isPreconfiguredDependency(provider, provide)) {
        return change();
    }
    if (resolutions.has(provide)) {
        return createFromResolution(provide, resolutions.get(provide));
    }
    var mockDef = createMockProvider(provider, provide, change);
    return multi && typeof mockDef === 'object' ? __assign(__assign({}, mockDef), { multi: multi }) : mockDef;
});
//# sourceMappingURL=data:application/json;base64,