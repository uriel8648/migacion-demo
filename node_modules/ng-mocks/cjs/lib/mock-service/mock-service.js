"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockService = void 0;
var mock_helper_stub_1 = __importDefault(require("../mock-helper/mock-helper.stub"));
var check_is_class_1 = __importDefault(require("./check.is-class"));
var check_is_func_1 = __importDefault(require("./check.is-func"));
var check_is_inst_1 = __importDefault(require("./check.is-inst"));
var helper_mock_service_1 = __importDefault(require("./helper.mock-service"));
var mockVariableMap = [
    [check_is_class_1.default, function (service) { return helper_mock_service_1.default.createMockFromPrototype(service.prototype); }],
    [
        check_is_func_1.default,
        function (service, prefix) {
            return helper_mock_service_1.default.mockFunction("func:" + (prefix || service.name || 'arrow-function'));
        },
    ],
    [function (def) { return Array.isArray(def); }, function () { return []; }],
    [
        check_is_inst_1.default,
        function (service, prefix, callback) {
            var e_1, _a;
            var value = helper_mock_service_1.default.createMockFromPrototype(service.constructor.prototype);
            try {
                for (var _b = __values(Object.keys(service)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var property = _c.value;
                    var mock = callback(service[property], (prefix || 'instance') + "." + property);
                    if (mock !== undefined) {
                        value[property] = mock;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            Object.setPrototypeOf(value, Object.getPrototypeOf(service));
            return value;
        },
    ],
];
var mockVariable = function (service, prefix, callback) {
    var e_2, _a;
    try {
        for (var mockVariableMap_1 = __values(mockVariableMap), mockVariableMap_1_1 = mockVariableMap_1.next(); !mockVariableMap_1_1.done; mockVariableMap_1_1 = mockVariableMap_1.next()) {
            var _b = __read(mockVariableMap_1_1.value, 2), check = _b[0], createMock = _b[1];
            if (!check(service)) {
                continue;
            }
            return createMock(service, prefix, callback);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (mockVariableMap_1_1 && !mockVariableMap_1_1.done && (_a = mockVariableMap_1.return)) _a.call(mockVariableMap_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
};
function MockService(service) {
    // mocking all methods / properties of a class / object.
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var mockNamePrefix = args.length > 0 && typeof args[0] === 'string' ? args[0] : args[1];
    var overrides = args.length > 0 && args[0] && typeof args[0] === 'object' ? args[0] : undefined;
    var value = mockVariable(service, mockNamePrefix, MockService);
    if (overrides) {
        (0, mock_helper_stub_1.default)(value, overrides);
    }
    return value;
}
exports.MockService = MockService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL21vY2stc2VydmljZS9tb2NrLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EscUZBQTZEO0FBRTdELG9FQUE0QztBQUM1QyxrRUFBMEM7QUFDMUMsa0VBQTBDO0FBQzFDLDhFQUFzRDtBQUV0RCxJQUFNLGVBQWUsR0FFakI7SUFDRixDQUFDLHdCQUFZLEVBQUUsVUFBQyxPQUFZLElBQUssT0FBQSw2QkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQTVELENBQTRELENBQUM7SUFDOUY7UUFDRSx1QkFBVztRQUNYLFVBQUMsT0FBWSxFQUFFLE1BQWM7WUFDM0IsT0FBQSw2QkFBaUIsQ0FBQyxZQUFZLENBQUMsV0FBUSxNQUFNLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxnQkFBZ0IsQ0FBRSxDQUFDO1FBQXBGLENBQW9GO0tBQ3ZGO0lBQ0QsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQWxCLENBQWtCLEVBQUUsY0FBTSxPQUFBLEVBQUUsRUFBRixDQUFFLENBQUM7SUFDckM7UUFDRSx1QkFBVztRQUNYLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFROztZQUN4QixJQUFNLEtBQUssR0FBRyw2QkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztnQkFDdkYsS0FBdUIsSUFBQSxLQUFBLFNBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQSxnQkFBQSw0QkFBRTtvQkFBeEMsSUFBTSxRQUFRLFdBQUE7b0JBQ2pCLElBQU0sSUFBSSxHQUFRLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBRyxNQUFNLElBQUksVUFBVSxVQUFJLFFBQVUsQ0FBQyxDQUFDO29CQUNyRixJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7d0JBQ3RCLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7cUJBQ3hCO2lCQUNGOzs7Ozs7Ozs7WUFDRCxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFFN0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0tBQ0Y7Q0FDRixDQUFDO0FBRUYsSUFBTSxZQUFZLEdBQUcsVUFBQyxPQUFZLEVBQUUsTUFBYyxFQUFFLFFBQTRCOzs7UUFDOUUsS0FBa0MsSUFBQSxvQkFBQSxTQUFBLGVBQWUsQ0FBQSxnREFBQSw2RUFBRTtZQUF4QyxJQUFBLEtBQUEsb0NBQW1CLEVBQWxCLEtBQUssUUFBQSxFQUFFLFVBQVUsUUFBQTtZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNuQixTQUFTO2FBQ1Y7WUFFRCxPQUFPLFVBQVUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzlDOzs7Ozs7Ozs7QUFDSCxDQUFDLENBQUM7QUFzQkYsU0FBZ0IsV0FBVyxDQUFDLE9BQVk7SUFDdEMsd0RBQXdEO0lBRGhCLGNBQWM7U0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1FBQWQsNkJBQWM7O0lBR3RELElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUYsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFbEcsSUFBTSxLQUFLLEdBQVEsWUFBWSxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFdEUsSUFBSSxTQUFTLEVBQUU7UUFDYixJQUFBLDBCQUFjLEVBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBYkQsa0NBYUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbnlUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2NvcmUudHlwZXMnO1xuaW1wb3J0IG1vY2tIZWxwZXJTdHViIGZyb20gJy4uL21vY2staGVscGVyL21vY2staGVscGVyLnN0dWInO1xuXG5pbXBvcnQgY2hlY2tJc0NsYXNzIGZyb20gJy4vY2hlY2suaXMtY2xhc3MnO1xuaW1wb3J0IGNoZWNrSXNGdW5jIGZyb20gJy4vY2hlY2suaXMtZnVuYyc7XG5pbXBvcnQgY2hlY2tJc0luc3QgZnJvbSAnLi9jaGVjay5pcy1pbnN0JztcbmltcG9ydCBoZWxwZXJNb2NrU2VydmljZSBmcm9tICcuL2hlbHBlci5tb2NrLXNlcnZpY2UnO1xuXG5jb25zdCBtb2NrVmFyaWFibGVNYXA6IEFycmF5PFxuICBbKGRlZjogYW55KSA9PiBib29sZWFuLCAoc2VydmljZTogYW55LCBwcmVmaXg6IHN0cmluZywgY2FsbGJhY2s6IHR5cGVvZiBNb2NrU2VydmljZSkgPT4gYW55XVxuPiA9IFtcbiAgW2NoZWNrSXNDbGFzcywgKHNlcnZpY2U6IGFueSkgPT4gaGVscGVyTW9ja1NlcnZpY2UuY3JlYXRlTW9ja0Zyb21Qcm90b3R5cGUoc2VydmljZS5wcm90b3R5cGUpXSxcbiAgW1xuICAgIGNoZWNrSXNGdW5jLFxuICAgIChzZXJ2aWNlOiBhbnksIHByZWZpeDogc3RyaW5nKSA9PlxuICAgICAgaGVscGVyTW9ja1NlcnZpY2UubW9ja0Z1bmN0aW9uKGBmdW5jOiR7cHJlZml4IHx8IHNlcnZpY2UubmFtZSB8fCAnYXJyb3ctZnVuY3Rpb24nfWApLFxuICBdLFxuICBbZGVmID0+IEFycmF5LmlzQXJyYXkoZGVmKSwgKCkgPT4gW11dLFxuICBbXG4gICAgY2hlY2tJc0luc3QsXG4gICAgKHNlcnZpY2UsIHByZWZpeCwgY2FsbGJhY2spID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaGVscGVyTW9ja1NlcnZpY2UuY3JlYXRlTW9ja0Zyb21Qcm90b3R5cGUoc2VydmljZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xuICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBPYmplY3Qua2V5cyhzZXJ2aWNlKSkge1xuICAgICAgICBjb25zdCBtb2NrOiBhbnkgPSBjYWxsYmFjayhzZXJ2aWNlW3Byb3BlcnR5XSwgYCR7cHJlZml4IHx8ICdpbnN0YW5jZSd9LiR7cHJvcGVydHl9YCk7XG4gICAgICAgIGlmIChtb2NrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YWx1ZVtwcm9wZXJ0eV0gPSBtb2NrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodmFsdWUsIE9iamVjdC5nZXRQcm90b3R5cGVPZihzZXJ2aWNlKSk7XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICBdLFxuXTtcblxuY29uc3QgbW9ja1ZhcmlhYmxlID0gKHNlcnZpY2U6IGFueSwgcHJlZml4OiBzdHJpbmcsIGNhbGxiYWNrOiB0eXBlb2YgTW9ja1NlcnZpY2UpID0+IHtcbiAgZm9yIChjb25zdCBbY2hlY2ssIGNyZWF0ZU1vY2tdIG9mIG1vY2tWYXJpYWJsZU1hcCkge1xuICAgIGlmICghY2hlY2soc2VydmljZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVNb2NrKHNlcnZpY2UsIHByZWZpeCwgY2FsbGJhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9uZy1tb2Nrcy5zdWRvLmV1L2FwaS9Nb2NrU2VydmljZVxuICovXG5leHBvcnQgZnVuY3Rpb24gTW9ja1NlcnZpY2Uoc2VydmljZTogYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL01vY2tTZXJ2aWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNb2NrU2VydmljZTxUPihzZXJ2aWNlOiBBbnlUeXBlPFQ+LCBvdmVycmlkZXM/OiBQYXJ0aWFsPFQ+LCBtb2NrTmFtZVByZWZpeD86IHN0cmluZyk6IFQ7XG5cbi8qKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL01vY2tTZXJ2aWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNb2NrU2VydmljZTxUPihzZXJ2aWNlOiBBbnlUeXBlPFQ+LCBtb2NrTmFtZVByZWZpeD86IHN0cmluZyk6IFQ7XG5cbi8qKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL01vY2tTZXJ2aWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNb2NrU2VydmljZTxUID0gYW55PihzZXJ2aWNlOiBvYmplY3QsIG1vY2tOYW1lUHJlZml4Pzogc3RyaW5nKTogVDtcblxuZXhwb3J0IGZ1bmN0aW9uIE1vY2tTZXJ2aWNlKHNlcnZpY2U6IGFueSwgLi4uYXJnczogYW55W10pOiBhbnkge1xuICAvLyBtb2NraW5nIGFsbCBtZXRob2RzIC8gcHJvcGVydGllcyBvZiBhIGNsYXNzIC8gb2JqZWN0LlxuXG4gIGNvbnN0IG1vY2tOYW1lUHJlZml4ID0gYXJncy5sZW5ndGggPiAwICYmIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyA/IGFyZ3NbMF0gOiBhcmdzWzFdO1xuICBjb25zdCBvdmVycmlkZXMgPSBhcmdzLmxlbmd0aCA+IDAgJiYgYXJnc1swXSAmJiB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgPyBhcmdzWzBdIDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IHZhbHVlOiBhbnkgPSBtb2NrVmFyaWFibGUoc2VydmljZSwgbW9ja05hbWVQcmVmaXgsIE1vY2tTZXJ2aWNlKTtcblxuICBpZiAob3ZlcnJpZGVzKSB7XG4gICAgbW9ja0hlbHBlclN0dWIodmFsdWUsIG92ZXJyaWRlcyk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4iXX0=