"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_define_property_1 = __importDefault(require("../common/core.define-property"));
var helper_define_property_descriptor_1 = __importDefault(require("../mock-service/helper.define-property-descriptor"));
var helper_mock_service_1 = __importDefault(require("../mock-service/helper.mock-service"));
var createPropertyGet = function (key, reader, source) { return function () {
    if (typeof source[key] === 'function') {
        if (reader["__ngMocks_" + key + "__origin"] !== source[key]) {
            var clone = helper_mock_service_1.default.createClone(source[key], reader, source);
            (0, core_define_property_1.default)(reader, "__ngMocks_" + key, clone, false);
            (0, core_define_property_1.default)(reader, "__ngMocks_" + key + "__origin", source[key], false);
        }
        return reader["__ngMocks_" + key];
    }
    return source[key];
}; };
var createPropertySet = function (key, reader, source) { return function (newValue) {
    if (reader["__ngMocks_" + key]) {
        reader["__ngMocks_" + key] = undefined;
    }
    if (reader["__ngMocks_" + key + "__origin"]) {
        reader["__ngMocks_" + key + "__origin"] = undefined;
    }
    source[key] = newValue;
}; };
var extractAllKeys = function (instance) { return __spreadArray(__spreadArray(__spreadArray([], __read(helper_mock_service_1.default.extractPropertiesFromPrototype(Object.getPrototypeOf(instance))), false), __read(helper_mock_service_1.default.extractMethodsFromPrototype(Object.getPrototypeOf(instance))), false), __read(Object.keys(instance)), false); };
var extractOwnKeys = function (instance) { return __spreadArray(__spreadArray([], __read(Object.getOwnPropertyNames(instance)), false), __read(Object.keys(instance)), false); };
exports.default = (function (reader, source, extra, force) {
    var e_1, _a;
    if (force === void 0) { force = false; }
    if (!source) {
        return;
    }
    var exists = extractOwnKeys(reader);
    var fields = __spreadArray(__spreadArray([], __read(extractAllKeys(source)), false), __read(extra), false);
    try {
        for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
            var key = fields_1_1.value;
            if (!force && exists.indexOf(key) !== -1) {
                continue;
            }
            (0, helper_define_property_descriptor_1.default)(reader, key, {
                get: createPropertyGet(key, reader, source),
                set: createPropertySet(key, reader, source),
            });
            exists.push(key);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5pbnN0YWxsLXByb3AtcmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL21vY2stcmVuZGVyL2Z1bmMuaW5zdGFsbC1wcm9wLXJlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHdGQUFnRTtBQUNoRSx3SEFBK0Y7QUFDL0YsNEZBQW9FO0FBRXBFLElBQU0saUJBQWlCLEdBQ3JCLFVBQUMsR0FBdUIsRUFBRSxNQUE4QixFQUFFLE1BQThCLElBQUssT0FBQTtJQUMzRixJQUFJLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFVBQVUsRUFBRTtRQUNyQyxJQUFJLE1BQU0sQ0FBQyxlQUFhLEdBQUcsYUFBVSxDQUFDLEtBQUssTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3RELElBQU0sS0FBSyxHQUFHLDZCQUFpQixDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3pFLElBQUEsOEJBQWtCLEVBQUMsTUFBTSxFQUFFLGVBQWEsR0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM3RCxJQUFBLDhCQUFrQixFQUFDLE1BQU0sRUFBRSxlQUFhLEdBQUcsYUFBVSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM1RTtRQUVELE9BQU8sTUFBTSxDQUFDLGVBQWEsR0FBSyxDQUFDLENBQUM7S0FDbkM7SUFFRCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQixDQUFDLEVBWjRGLENBWTVGLENBQUM7QUFFSixJQUFNLGlCQUFpQixHQUNyQixVQUFDLEdBQXVCLEVBQUUsTUFBOEIsRUFBRSxNQUE4QixJQUFLLE9BQUEsVUFBQyxRQUFhO0lBQ3pHLElBQUksTUFBTSxDQUFDLGVBQWEsR0FBSyxDQUFDLEVBQUU7UUFDOUIsTUFBTSxDQUFDLGVBQWEsR0FBSyxDQUFDLEdBQUcsU0FBUyxDQUFDO0tBQ3hDO0lBQ0QsSUFBSSxNQUFNLENBQUMsZUFBYSxHQUFHLGFBQVUsQ0FBQyxFQUFFO1FBQ3RDLE1BQU0sQ0FBQyxlQUFhLEdBQUcsYUFBVSxDQUFDLEdBQUcsU0FBUyxDQUFDO0tBQ2hEO0lBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQztBQUN6QixDQUFDLEVBUjRGLENBUTVGLENBQUM7QUFFSixJQUFNLGNBQWMsR0FBRyxVQUFDLFFBQWdCLElBQUssNERBQ3hDLDZCQUFpQixDQUFDLDhCQUE4QixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsa0JBQ2pGLDZCQUFpQixDQUFDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsa0JBQzlFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBSG1CLENBSTVDLENBQUM7QUFFRixJQUFNLGNBQWMsR0FBRyxVQUFDLFFBQWdCLElBQUssOENBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxrQkFBSyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFsRSxDQUFtRSxDQUFDO0FBRWpILG1CQUFlLFVBQ2IsTUFBOEIsRUFDOUIsTUFBMEMsRUFDMUMsS0FBZSxFQUNmLEtBQXNCOztJQUF0QixzQkFBQSxFQUFBLGFBQXNCO0lBRXRCLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxPQUFPO0tBQ1I7SUFDRCxJQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsSUFBTSxNQUFNLDBDQUFPLGNBQWMsQ0FBQyxNQUFNLENBQUMsa0JBQUssS0FBSyxTQUFDLENBQUM7O1FBQ3JELEtBQWtCLElBQUEsV0FBQSxTQUFBLE1BQU0sQ0FBQSw4QkFBQSxrREFBRTtZQUFyQixJQUFNLEdBQUcsbUJBQUE7WUFDWixJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3hDLFNBQVM7YUFDVjtZQUNELElBQUEsMkNBQThCLEVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtnQkFDMUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO2dCQUMzQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7YUFDNUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjs7Ozs7Ozs7O0FBQ0gsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvcmVEZWZpbmVQcm9wZXJ0eSBmcm9tICcuLi9jb21tb24vY29yZS5kZWZpbmUtcHJvcGVydHknO1xuaW1wb3J0IGhlbHBlckRlZmluZVByb3BlcnR5RGVzY3JpcHRvciBmcm9tICcuLi9tb2NrLXNlcnZpY2UvaGVscGVyLmRlZmluZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJztcbmltcG9ydCBoZWxwZXJNb2NrU2VydmljZSBmcm9tICcuLi9tb2NrLXNlcnZpY2UvaGVscGVyLm1vY2stc2VydmljZSc7XG5cbmNvbnN0IGNyZWF0ZVByb3BlcnR5R2V0ID1cbiAgKGtleToga2V5b2YgYW55ICYgc3RyaW5nLCByZWFkZXI6IFJlY29yZDxrZXlvZiBhbnksIGFueT4sIHNvdXJjZTogUmVjb3JkPGtleW9mIGFueSwgYW55PikgPT4gKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygc291cmNlW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChyZWFkZXJbYF9fbmdNb2Nrc18ke2tleX1fX29yaWdpbmBdICE9PSBzb3VyY2Vba2V5XSkge1xuICAgICAgICBjb25zdCBjbG9uZSA9IGhlbHBlck1vY2tTZXJ2aWNlLmNyZWF0ZUNsb25lKHNvdXJjZVtrZXldLCByZWFkZXIsIHNvdXJjZSk7XG4gICAgICAgIGNvcmVEZWZpbmVQcm9wZXJ0eShyZWFkZXIsIGBfX25nTW9ja3NfJHtrZXl9YCwgY2xvbmUsIGZhbHNlKTtcbiAgICAgICAgY29yZURlZmluZVByb3BlcnR5KHJlYWRlciwgYF9fbmdNb2Nrc18ke2tleX1fX29yaWdpbmAsIHNvdXJjZVtrZXldLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZWFkZXJbYF9fbmdNb2Nrc18ke2tleX1gXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlW2tleV07XG4gIH07XG5cbmNvbnN0IGNyZWF0ZVByb3BlcnR5U2V0ID1cbiAgKGtleToga2V5b2YgYW55ICYgc3RyaW5nLCByZWFkZXI6IFJlY29yZDxrZXlvZiBhbnksIGFueT4sIHNvdXJjZTogUmVjb3JkPGtleW9mIGFueSwgYW55PikgPT4gKG5ld1ZhbHVlOiBhbnkpID0+IHtcbiAgICBpZiAocmVhZGVyW2BfX25nTW9ja3NfJHtrZXl9YF0pIHtcbiAgICAgIHJlYWRlcltgX19uZ01vY2tzXyR7a2V5fWBdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAocmVhZGVyW2BfX25nTW9ja3NfJHtrZXl9X19vcmlnaW5gXSkge1xuICAgICAgcmVhZGVyW2BfX25nTW9ja3NfJHtrZXl9X19vcmlnaW5gXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc291cmNlW2tleV0gPSBuZXdWYWx1ZTtcbiAgfTtcblxuY29uc3QgZXh0cmFjdEFsbEtleXMgPSAoaW5zdGFuY2U6IG9iamVjdCkgPT4gW1xuICAuLi5oZWxwZXJNb2NrU2VydmljZS5leHRyYWN0UHJvcGVydGllc0Zyb21Qcm90b3R5cGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKGluc3RhbmNlKSksXG4gIC4uLmhlbHBlck1vY2tTZXJ2aWNlLmV4dHJhY3RNZXRob2RzRnJvbVByb3RvdHlwZShPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5zdGFuY2UpKSxcbiAgLi4uT2JqZWN0LmtleXMoaW5zdGFuY2UpLFxuXTtcblxuY29uc3QgZXh0cmFjdE93bktleXMgPSAoaW5zdGFuY2U6IG9iamVjdCkgPT4gWy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGluc3RhbmNlKSwgLi4uT2JqZWN0LmtleXMoaW5zdGFuY2UpXTtcblxuZXhwb3J0IGRlZmF1bHQgKFxuICByZWFkZXI6IFJlY29yZDxrZXlvZiBhbnksIGFueT4sXG4gIHNvdXJjZTogUmVjb3JkPGtleW9mIGFueSwgYW55PiB8IHVuZGVmaW5lZCxcbiAgZXh0cmE6IHN0cmluZ1tdLFxuICBmb3JjZTogYm9vbGVhbiA9IGZhbHNlLFxuKTogdm9pZCA9PiB7XG4gIGlmICghc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGV4aXN0cyA9IGV4dHJhY3RPd25LZXlzKHJlYWRlcik7XG4gIGNvbnN0IGZpZWxkcyA9IFsuLi5leHRyYWN0QWxsS2V5cyhzb3VyY2UpLCAuLi5leHRyYV07XG4gIGZvciAoY29uc3Qga2V5IG9mIGZpZWxkcykge1xuICAgIGlmICghZm9yY2UgJiYgZXhpc3RzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBoZWxwZXJEZWZpbmVQcm9wZXJ0eURlc2NyaXB0b3IocmVhZGVyLCBrZXksIHtcbiAgICAgIGdldDogY3JlYXRlUHJvcGVydHlHZXQoa2V5LCByZWFkZXIsIHNvdXJjZSksXG4gICAgICBzZXQ6IGNyZWF0ZVByb3BlcnR5U2V0KGtleSwgcmVhZGVyLCBzb3VyY2UpLFxuICAgIH0pO1xuICAgIGV4aXN0cy5wdXNoKGtleSk7XG4gIH1cbn07XG4iXX0=