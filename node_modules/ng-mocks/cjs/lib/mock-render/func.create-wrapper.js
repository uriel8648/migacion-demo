"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var core_config_1 = __importDefault(require("../common/core.config"));
var core_define_property_1 = __importDefault(require("../common/core.define-property"));
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var helper_define_property_descriptor_1 = __importDefault(require("../mock-service/helper.define-property-descriptor"));
var func_generate_template_1 = __importDefault(require("./func.generate-template"));
var generateWrapperOutput = function (instance) {
    return function (prop, event) {
        if (typeof instance[prop] === 'function') {
            return instance[prop](event);
        }
        if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].emit === 'function') {
            return instance[prop].emit(event);
        }
        if (instance[prop] && typeof instance[prop] === 'object' && typeof instance[prop].next === 'function') {
            return instance[prop].next(event);
        }
        instance[prop] = event;
    };
};
var generateWrapper = function (_a) {
    var bindings = _a.bindings, options = _a.options, inputs = _a.inputs;
    var MockRenderComponent = /** @class */ (function () {
        function MockRenderComponent() {
            var e_1, _a;
            (0, core_define_property_1.default)(this, '__ngMocksOutput', generateWrapperOutput(this));
            if (!bindings) {
                var _loop_1 = function (input) {
                    var value = null;
                    (0, helper_define_property_descriptor_1.default)(this_1, input, {
                        get: function () { return value; },
                        set: function (newValue) { return (value = newValue); },
                    });
                };
                var this_1 = this;
                try {
                    for (var _b = __values(inputs || []), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var input = _c.value;
                        _loop_1(input);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        return MockRenderComponent;
    }());
    (0, core_1.Component)(options)(MockRenderComponent);
    return MockRenderComponent;
};
var getCache = function () {
    var _a;
    var caches = (_a = ng_mocks_universe_1.default.config.get('MockRenderCaches')) !== null && _a !== void 0 ? _a : [];
    if (caches.length === 0) {
        ng_mocks_universe_1.default.config.set('MockRenderCaches', caches);
    }
    return caches;
};
var checkCache = function (caches, cacheKey) {
    var e_2, _a;
    try {
        for (var caches_1 = __values(caches), caches_1_1 = caches_1.next(); !caches_1_1.done; caches_1_1 = caches_1.next()) {
            var cache = caches_1_1.value;
            if (cache.cacheKey.length !== cacheKey.length) {
                continue;
            }
            var isValid = true;
            for (var i = 0; i < cacheKey.length; i += 1) {
                if (cache.cacheKey[i] !== cacheKey[i]) {
                    isValid = false;
                    break;
                }
            }
            if (isValid) {
                return cache;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (caches_1_1 && !caches_1_1.done && (_a = caches_1.return)) _a.call(caches_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return undefined;
};
exports.default = (function (template, meta, bindings, flags) {
    var _a, _b;
    var caches = getCache();
    // nulls help to detect defaults
    var cacheKey = __spreadArray(__spreadArray([template], __read((bindings !== null && bindings !== void 0 ? bindings : [null])), false), __read(((_a = flags.providers) !== null && _a !== void 0 ? _a : [null])), false);
    var ctor = checkCache(caches, cacheKey);
    if (ctor) {
        return ctor;
    }
    var mockTemplate = (0, func_generate_template_1.default)(template, __assign(__assign({}, meta), { bindings: bindings }));
    var options = {
        providers: flags.providers,
        selector: 'mock-render',
        template: mockTemplate,
    };
    ctor = generateWrapper(__assign(__assign({}, meta), { bindings: bindings, options: options }));
    (0, core_define_property_1.default)(ctor, 'cacheKey', cacheKey, false);
    caches.unshift(ctor);
    caches.splice((_b = ng_mocks_universe_1.default.global.get('mockRenderCacheSize')) !== null && _b !== void 0 ? _b : core_config_1.default.mockRenderCacheSize);
    return ctor;
});
//# sourceMappingURL=data:application/json;base64,