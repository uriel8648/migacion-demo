"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var generateTemplateAttrWrap = function (prop, type) { return (type === 'i' ? "[" + prop + "]" : "(" + prop + ")"); };
var generateTemplateAttrWithParams = function (prop, type) {
    var tpl = " " + generateTemplateAttrWrap(prop, type) + "=\"";
    if (type === 'i') {
        tpl += prop;
    }
    else {
        tpl += "__ngMocksOutput('" + prop + "', $event)";
    }
    tpl += "\"";
    return tpl;
};
var generateTemplateAttr = function (bindings, attr, type) {
    var e_1, _a;
    // unprovided params for inputs should render empty placeholders
    if (!bindings && type === 'o') {
        return '';
    }
    var mockTemplate = '';
    var keys = bindings !== null && bindings !== void 0 ? bindings : attr;
    try {
        for (var attr_1 = __values(attr), attr_1_1 = attr_1.next(); !attr_1_1.done; attr_1_1 = attr_1.next()) {
            var definition = attr_1_1.value;
            var _b = __read(definition.split(': '), 2), property = _b[0], alias = _b[1];
            mockTemplate +=
                keys.indexOf(alias || property) === -1 ? '' : generateTemplateAttrWithParams(alias || property, type);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (attr_1_1 && !attr_1_1.done && (_a = attr_1.return)) _a.call(attr_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return mockTemplate;
};
exports.default = (function (declaration, _a) {
    var selector = _a.selector, bindings = _a.bindings, inputs = _a.inputs, outputs = _a.outputs;
    var mockTemplate = '';
    // istanbul ignore else
    if (typeof declaration === 'string') {
        mockTemplate = declaration;
    }
    else if (selector) {
        mockTemplate += "<" + selector;
        mockTemplate += generateTemplateAttr(bindings, inputs, 'i');
        mockTemplate += generateTemplateAttr(bindings, outputs, 'o');
        mockTemplate += "></" + selector + ">";
    }
    return mockTemplate;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5nZW5lcmF0ZS10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLXJlbmRlci9mdW5jLmdlbmVyYXRlLXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBTSx3QkFBd0IsR0FBRyxVQUFDLElBQVksRUFBRSxJQUFlLElBQUssT0FBQSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQUksSUFBSSxNQUFHLENBQUMsQ0FBQyxDQUFDLE1BQUksSUFBSSxNQUFHLENBQUMsRUFBMUMsQ0FBMEMsQ0FBQztBQUUvRyxJQUFNLDhCQUE4QixHQUFHLFVBQUMsSUFBWSxFQUFFLElBQWU7SUFDbkUsSUFBSSxHQUFHLEdBQUcsTUFBSSx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQUksQ0FBQztJQUN2RCxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7UUFDaEIsR0FBRyxJQUFJLElBQUksQ0FBQztLQUNiO1NBQU07UUFDTCxHQUFHLElBQUksc0JBQW9CLElBQUksZUFBWSxDQUFDO0tBQzdDO0lBQ0QsR0FBRyxJQUFJLElBQUcsQ0FBQztJQUVYLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUYsSUFBTSxvQkFBb0IsR0FBRyxVQUFDLFFBQWtDLEVBQUUsSUFBUyxFQUFFLElBQWU7O0lBQzFGLGdFQUFnRTtJQUNoRSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7UUFDN0IsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUVELElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUN0QixJQUFNLElBQUksR0FBRyxRQUFRLGFBQVIsUUFBUSxjQUFSLFFBQVEsR0FBSSxJQUFJLENBQUM7O1FBQzlCLEtBQXlCLElBQUEsU0FBQSxTQUFBLElBQUksQ0FBQSwwQkFBQSw0Q0FBRTtZQUExQixJQUFNLFVBQVUsaUJBQUE7WUFDYixJQUFBLEtBQUEsT0FBb0IsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBQSxFQUF6QyxRQUFRLFFBQUEsRUFBRSxLQUFLLFFBQTBCLENBQUM7WUFDakQsWUFBWTtnQkFDVixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxLQUFLLElBQUksUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3pHOzs7Ozs7Ozs7SUFFRCxPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDLENBQUM7QUFFRixtQkFBZSxVQUFDLFdBQWdCLEVBQUUsRUFBNEM7UUFBMUMsUUFBUSxjQUFBLEVBQUUsUUFBUSxjQUFBLEVBQUUsTUFBTSxZQUFBLEVBQUUsT0FBTyxhQUFBO0lBQ3JFLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUV0Qix1QkFBdUI7SUFDdkIsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDbkMsWUFBWSxHQUFHLFdBQVcsQ0FBQztLQUM1QjtTQUFNLElBQUksUUFBUSxFQUFFO1FBQ25CLFlBQVksSUFBSSxNQUFJLFFBQVUsQ0FBQztRQUMvQixZQUFZLElBQUksb0JBQW9CLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM1RCxZQUFZLElBQUksb0JBQW9CLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM3RCxZQUFZLElBQUksUUFBTSxRQUFRLE1BQUcsQ0FBQztLQUNuQztJQUVELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdlbmVyYXRlVGVtcGxhdGVBdHRyV3JhcCA9IChwcm9wOiBzdHJpbmcsIHR5cGU6ICdpJyB8ICdvJykgPT4gKHR5cGUgPT09ICdpJyA/IGBbJHtwcm9wfV1gIDogYCgke3Byb3B9KWApO1xuXG5jb25zdCBnZW5lcmF0ZVRlbXBsYXRlQXR0cldpdGhQYXJhbXMgPSAocHJvcDogc3RyaW5nLCB0eXBlOiAnaScgfCAnbycpOiBzdHJpbmcgPT4ge1xuICBsZXQgdHBsID0gYCAke2dlbmVyYXRlVGVtcGxhdGVBdHRyV3JhcChwcm9wLCB0eXBlKX09XCJgO1xuICBpZiAodHlwZSA9PT0gJ2knKSB7XG4gICAgdHBsICs9IHByb3A7XG4gIH0gZWxzZSB7XG4gICAgdHBsICs9IGBfX25nTW9ja3NPdXRwdXQoJyR7cHJvcH0nLCAkZXZlbnQpYDtcbiAgfVxuICB0cGwgKz0gYFwiYDtcblxuICByZXR1cm4gdHBsO1xufTtcblxuY29uc3QgZ2VuZXJhdGVUZW1wbGF0ZUF0dHIgPSAoYmluZGluZ3M6IG51bGwgfCB1bmRlZmluZWQgfCBhbnlbXSwgYXR0cjogYW55LCB0eXBlOiAnaScgfCAnbycpID0+IHtcbiAgLy8gdW5wcm92aWRlZCBwYXJhbXMgZm9yIGlucHV0cyBzaG91bGQgcmVuZGVyIGVtcHR5IHBsYWNlaG9sZGVyc1xuICBpZiAoIWJpbmRpbmdzICYmIHR5cGUgPT09ICdvJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGxldCBtb2NrVGVtcGxhdGUgPSAnJztcbiAgY29uc3Qga2V5cyA9IGJpbmRpbmdzID8/IGF0dHI7XG4gIGZvciAoY29uc3QgZGVmaW5pdGlvbiBvZiBhdHRyKSB7XG4gICAgY29uc3QgW3Byb3BlcnR5LCBhbGlhc10gPSBkZWZpbml0aW9uLnNwbGl0KCc6ICcpO1xuICAgIG1vY2tUZW1wbGF0ZSArPVxuICAgICAga2V5cy5pbmRleE9mKGFsaWFzIHx8IHByb3BlcnR5KSA9PT0gLTEgPyAnJyA6IGdlbmVyYXRlVGVtcGxhdGVBdHRyV2l0aFBhcmFtcyhhbGlhcyB8fCBwcm9wZXJ0eSwgdHlwZSk7XG4gIH1cblxuICByZXR1cm4gbW9ja1RlbXBsYXRlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKGRlY2xhcmF0aW9uOiBhbnksIHsgc2VsZWN0b3IsIGJpbmRpbmdzLCBpbnB1dHMsIG91dHB1dHMgfTogYW55KTogc3RyaW5nID0+IHtcbiAgbGV0IG1vY2tUZW1wbGF0ZSA9ICcnO1xuXG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlXG4gIGlmICh0eXBlb2YgZGVjbGFyYXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgbW9ja1RlbXBsYXRlID0gZGVjbGFyYXRpb247XG4gIH0gZWxzZSBpZiAoc2VsZWN0b3IpIHtcbiAgICBtb2NrVGVtcGxhdGUgKz0gYDwke3NlbGVjdG9yfWA7XG4gICAgbW9ja1RlbXBsYXRlICs9IGdlbmVyYXRlVGVtcGxhdGVBdHRyKGJpbmRpbmdzLCBpbnB1dHMsICdpJyk7XG4gICAgbW9ja1RlbXBsYXRlICs9IGdlbmVyYXRlVGVtcGxhdGVBdHRyKGJpbmRpbmdzLCBvdXRwdXRzLCAnbycpO1xuICAgIG1vY2tUZW1wbGF0ZSArPSBgPjwvJHtzZWxlY3Rvcn0+YDtcbiAgfVxuXG4gIHJldHVybiBtb2NrVGVtcGxhdGU7XG59O1xuIl19