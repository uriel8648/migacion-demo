"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRenderFactory = void 0;
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var core_define_property_1 = __importDefault(require("../common/core.define-property"));
var func_import_exists_1 = __importDefault(require("../common/func.import-exists"));
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var ng_mocks_stack_1 = __importDefault(require("../common/ng-mocks-stack"));
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var mock_helper_1 = require("../mock-helper/mock-helper");
var helper_define_property_descriptor_1 = __importDefault(require("../mock-service/helper.define-property-descriptor"));
var mock_service_1 = require("../mock-service/mock-service");
var func_create_wrapper_1 = __importDefault(require("./func.create-wrapper"));
var func_install_prop_reader_1 = __importDefault(require("./func.install-prop-reader"));
var func_reflect_template_1 = __importDefault(require("./func.reflect-template"));
var isExpectedRender = function (template) {
    return typeof template === 'string' || (0, func_is_ng_def_1.isNgDef)(template, 'c') || (0, func_is_ng_def_1.isNgDef)(template, 'd');
};
var renderDeclaration = function (fixture, template, params) {
    fixture.point = fixture.debugElement.children[0] || fixture.debugElement.childNodes[0];
    if ((0, func_is_ng_def_1.isNgDef)(template, 'd')) {
        (0, helper_define_property_descriptor_1.default)(fixture.point, 'componentInstance', {
            get: function () { return mock_helper_1.ngMocks.get(fixture.point, template); },
        });
    }
    tryWhen(!params, function () { var _a; return (0, func_install_prop_reader_1.default)(fixture.componentInstance, (_a = fixture.point) === null || _a === void 0 ? void 0 : _a.componentInstance, []); });
};
var renderInjection = function (fixture, template, params) {
    var instance = testing_1.TestBed.get(template);
    if (params) {
        mock_helper_1.ngMocks.stub(instance, params);
    }
    fixture.point = (0, mock_service_1.MockService)(core_1.DebugElement, {
        childNodes: [],
        children: [],
        componentInstance: instance,
        nativeElement: (0, mock_service_1.MockService)(HTMLElement),
    });
    (0, func_install_prop_reader_1.default)(fixture.componentInstance, fixture.point.componentInstance, [], true);
};
var tryWhen = function (flag, callback) {
    if (!flag) {
        return;
    }
    try {
        // ivy throws Error: Expecting instance of DOM Element
        callback();
    }
    catch (e) {
        // nothing to do
    }
};
var fixtureMessage = [
    'Forgot to flush TestBed?',
    'MockRender cannot be used without a reset after TestBed.get / TestBed.inject / TestBed.createComponent and another MockRender in the same test.',
    'If you want to mock a service before rendering, consider usage of MockRenderFactory or MockInstance.',
    'To flush TestBed, add a call of ngMocks.flushTestBed() before the call of MockRender, or pass `reset: true` to MockRender options.',
].join(' ');
var handleFixtureError = function (e) {
    var error = new Error(fixtureMessage);
    (0, core_define_property_1.default)(error, 'parent', e, false);
    throw error;
};
var flushTestBed = function (flags) {
    var globalFlags = ng_mocks_universe_1.default.global.get('flags');
    var testBed = (0, testing_1.getTestBed)();
    if (flags.reset || (!testBed._instantiated && !testBed._testModuleRef)) {
        mock_helper_1.ngMocks.flushTestBed();
    }
    else if (globalFlags.onTestBedFlushNeed !== 'throw' && (testBed._testModuleRef || testBed._instantiated)) {
        if (globalFlags.onTestBedFlushNeed === 'warn') {
            // tslint:disable-next-line:no-console
            console.warn(fixtureMessage);
        }
        mock_helper_1.ngMocks.flushTestBed();
    }
};
var generateFactoryInstall = function (ctor, options) { return function () {
    var _a;
    var testBed = (0, testing_1.getTestBed)();
    var declarations = ((_a = testBed._compiler) === null || _a === void 0 ? void 0 : _a.declarations) || testBed.declarations || testBed._declarations;
    if (!declarations || declarations.indexOf(ctor) === -1) {
        flushTestBed(options);
        try {
            testing_1.TestBed.configureTestingModule({
                declarations: [ctor],
            });
        }
        catch (e) {
            handleFixtureError(e);
        }
    }
}; };
var generateFactory = function (componentCtor, bindings, template, options) {
    var result = function (params, detectChanges) {
        result.configureTestBed();
        var fixture = testing_1.TestBed.createComponent(componentCtor);
        (0, func_install_prop_reader_1.default)(fixture.componentInstance, params !== null && params !== void 0 ? params : {}, bindings !== null && bindings !== void 0 ? bindings : []);
        (0, core_define_property_1.default)(fixture, 'ngMocksStackId', ng_mocks_universe_1.default.global.get('bullet:stack:id'));
        if (detectChanges === undefined || detectChanges) {
            fixture.detectChanges();
        }
        if (isExpectedRender(template)) {
            renderDeclaration(fixture, template, params);
        }
        else {
            renderInjection(fixture, template, params);
        }
        return fixture;
    };
    result.declaration = componentCtor;
    result.bindings = bindings;
    result.configureTestBed = generateFactoryInstall(componentCtor, options);
    return result;
};
function MockRenderFactory(template, bindings, options) {
    if (options === void 0) { options = {}; }
    (0, func_import_exists_1.default)(template, 'MockRender');
    var meta = typeof template === 'string' || (0, func_is_ng_def_1.isNgDef)(template, 't') ? {} : (0, func_reflect_template_1.default)(template);
    var componentCtor = (0, func_create_wrapper_1.default)(template, meta, bindings, options);
    var factory = generateFactory(componentCtor, bindings, template, options);
    if (ng_mocks_stack_1.default.current().level !== 'root' && options.configureTestBed !== false) {
        factory.configureTestBed();
    }
    return factory;
}
exports.MockRenderFactory = MockRenderFactory;
//# sourceMappingURL=data:application/json;base64,