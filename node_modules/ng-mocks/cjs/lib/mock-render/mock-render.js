"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRender = void 0;
var mock_render_factory_1 = require("./mock-render-factory");
function MockRender(template, params, flags) {
    if (flags === void 0) { flags = true; }
    var bindings = params && typeof params === 'object' ? Object.keys(params) : params;
    var options = typeof flags === 'boolean' ? { detectChanges: flags } : __assign({}, flags);
    var factory = mock_render_factory_1.MockRenderFactory(template, bindings, options);
    return factory(params, options.detectChanges);
}
exports.MockRender = MockRender;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1yZW5kZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1yZW5kZXIvbW9jay1yZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFLQSw2REFBMEQ7QUF1RjFELFNBQVMsVUFBVSxDQUNqQixRQUFtRSxFQUNuRSxNQUFtQixFQUNuQixLQUEwQztJQUExQyxzQkFBQSxFQUFBLFlBQTBDO0lBRTFDLElBQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNyRixJQUFNLE9BQU8sR0FBRyxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsY0FBTSxLQUFLLENBQUUsQ0FBQztJQUNyRixJQUFNLE9BQU8sR0FBSSx1Q0FBeUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXhFLE9BQU8sT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUVRLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBBbnlUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2NvcmUudHlwZXMnO1xuXG5pbXBvcnQgeyBNb2NrUmVuZGVyRmFjdG9yeSB9IGZyb20gJy4vbW9jay1yZW5kZXItZmFjdG9yeSc7XG5pbXBvcnQgeyBJTW9ja1JlbmRlck9wdGlvbnMsIE1vY2tlZENvbXBvbmVudEZpeHR1cmUgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvTW9ja1JlbmRlclxuICovXG5mdW5jdGlvbiBNb2NrUmVuZGVyPE1Db21wb25lbnQ+KFxuICB0ZW1wbGF0ZTogSW5qZWN0aW9uVG9rZW48TUNvbXBvbmVudD4sXG4gIHBhcmFtcz86IHVuZGVmaW5lZCB8IG51bGwsXG4gIGRldGVjdENoYW5nZXNPck9wdGlvbnM/OiBib29sZWFuIHwgSU1vY2tSZW5kZXJPcHRpb25zLFxuKTogTW9ja2VkQ29tcG9uZW50Rml4dHVyZTxNQ29tcG9uZW50LCB2b2lkPjtcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvTW9ja1JlbmRlclxuICovXG5mdW5jdGlvbiBNb2NrUmVuZGVyPE1Db21wb25lbnQ+KFxuICB0ZW1wbGF0ZTogQW55VHlwZTxNQ29tcG9uZW50PixcbiAgcGFyYW1zOiB1bmRlZmluZWQgfCBudWxsLFxuICBkZXRlY3RDaGFuZ2VzT3JPcHRpb25zPzogYm9vbGVhbiB8IElNb2NrUmVuZGVyT3B0aW9ucyxcbik6IE1vY2tlZENvbXBvbmVudEZpeHR1cmU8TUNvbXBvbmVudCwgTUNvbXBvbmVudD47XG5cbi8qKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL01vY2tSZW5kZXJcbiAqL1xuZnVuY3Rpb24gTW9ja1JlbmRlcjxNQ29tcG9uZW50LCBUQ29tcG9uZW50IGV4dGVuZHMgb2JqZWN0PihcbiAgdGVtcGxhdGU6IEFueVR5cGU8TUNvbXBvbmVudD4sXG4gIHBhcmFtczogVENvbXBvbmVudCxcbiAgZGV0ZWN0Q2hhbmdlc09yT3B0aW9ucz86IGJvb2xlYW4gfCBJTW9ja1JlbmRlck9wdGlvbnMsXG4pOiBNb2NrZWRDb21wb25lbnRGaXh0dXJlPE1Db21wb25lbnQsIFRDb21wb25lbnQ+O1xuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9uZy1tb2Nrcy5zdWRvLmV1L2FwaS9Nb2NrUmVuZGVyXG4gKi9cbmZ1bmN0aW9uIE1vY2tSZW5kZXI8TUNvbXBvbmVudCwgVENvbXBvbmVudCBleHRlbmRzIG9iamVjdCA9IFJlY29yZDxrZXlvZiBhbnksIGFueT4+KFxuICB0ZW1wbGF0ZTogQW55VHlwZTxNQ29tcG9uZW50PixcbiAgcGFyYW1zOiBUQ29tcG9uZW50LFxuICBkZXRlY3RDaGFuZ2VzT3JPcHRpb25zPzogYm9vbGVhbiB8IElNb2NrUmVuZGVyT3B0aW9ucyxcbik6IE1vY2tlZENvbXBvbmVudEZpeHR1cmU8TUNvbXBvbmVudCwgVENvbXBvbmVudD47XG5cbi8qKlxuICogV2l0aG91dCBwYXJhbXMgd2Ugc2hvdWxkIG5vdCBhdXRvY29tcGxldGUgYW55IGtleXMgb2YgYW55IHR5cGVzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9uZy1tb2Nrcy5zdWRvLmV1L2FwaS9Nb2NrUmVuZGVyXG4gKi9cbmZ1bmN0aW9uIE1vY2tSZW5kZXI8TUNvbXBvbmVudD4odGVtcGxhdGU6IEFueVR5cGU8TUNvbXBvbmVudD4pOiBNb2NrZWRDb21wb25lbnRGaXh0dXJlPE1Db21wb25lbnQsIE1Db21wb25lbnQ+O1xuXG4vKipcbiAqIEFuIGVtcHR5IHN0cmluZyBkb2VzIG5vdCBoYXZlIHBvaW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9uZy1tb2Nrcy5zdWRvLmV1L2FwaS9Nb2NrUmVuZGVyXG4gKi9cbmZ1bmN0aW9uIE1vY2tSZW5kZXIodGVtcGxhdGU6ICcnKTogQ29tcG9uZW50Rml4dHVyZTx2b2lkPiAmIHsgcG9pbnQ6IHVuZGVmaW5lZCB9O1xuXG4vKipcbiAqIFdpdGhvdXQgcGFyYW1zIHdlIHNob3VsZCBub3QgYXV0b2NvbXBsZXRlIGFueSBrZXlzIG9mIGFueSB0eXBlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvTW9ja1JlbmRlclxuICovXG5mdW5jdGlvbiBNb2NrUmVuZGVyPE1Db21wb25lbnQgPSB2b2lkPih0ZW1wbGF0ZTogc3RyaW5nKTogTW9ja2VkQ29tcG9uZW50Rml4dHVyZTxNQ29tcG9uZW50PjtcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vbmctbW9ja3Muc3Vkby5ldS9hcGkvTW9ja1JlbmRlclxuICovXG5mdW5jdGlvbiBNb2NrUmVuZGVyPE1Db21wb25lbnQgPSB2b2lkPihcbiAgdGVtcGxhdGU6IHN0cmluZyxcbiAgcGFyYW1zOiB1bmRlZmluZWQgfCBudWxsLFxuICBkZXRlY3RDaGFuZ2VzT3JPcHRpb25zPzogYm9vbGVhbiB8IElNb2NrUmVuZGVyT3B0aW9ucyxcbik6IE1vY2tlZENvbXBvbmVudEZpeHR1cmU8TUNvbXBvbmVudCwgdm9pZD47XG5cbi8qKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL01vY2tSZW5kZXJcbiAqL1xuZnVuY3Rpb24gTW9ja1JlbmRlcjxNQ29tcG9uZW50ID0gdm9pZCwgVENvbXBvbmVudCBleHRlbmRzIFJlY29yZDxrZXlvZiBhbnksIGFueT4gPSBSZWNvcmQ8a2V5b2YgYW55LCBhbnk+PihcbiAgdGVtcGxhdGU6IHN0cmluZyxcbiAgcGFyYW1zOiBUQ29tcG9uZW50LFxuICBkZXRlY3RDaGFuZ2VzT3JPcHRpb25zPzogYm9vbGVhbiB8IElNb2NrUmVuZGVyT3B0aW9ucyxcbik6IE1vY2tlZENvbXBvbmVudEZpeHR1cmU8TUNvbXBvbmVudCwgVENvbXBvbmVudD47XG5cbi8qKlxuICogQHNlZSBodHRwczovL25nLW1vY2tzLnN1ZG8uZXUvYXBpL01vY2tSZW5kZXJcbiAqL1xuZnVuY3Rpb24gTW9ja1JlbmRlcjxNQ29tcG9uZW50LCBUQ29tcG9uZW50IGV4dGVuZHMgUmVjb3JkPGtleW9mIGFueSwgYW55PiA9IFJlY29yZDxrZXlvZiBhbnksIGFueT4+KFxuICB0ZW1wbGF0ZTogc3RyaW5nLFxuICBwYXJhbXM6IFRDb21wb25lbnQsXG4gIGRldGVjdENoYW5nZXNPck9wdGlvbnM/OiBib29sZWFuIHwgSU1vY2tSZW5kZXJPcHRpb25zLFxuKTogTW9ja2VkQ29tcG9uZW50Rml4dHVyZTxNQ29tcG9uZW50LCBUQ29tcG9uZW50PjtcblxuZnVuY3Rpb24gTW9ja1JlbmRlcjxNQ29tcG9uZW50LCBUQ29tcG9uZW50IGV4dGVuZHMgUmVjb3JkPGtleW9mIGFueSwgYW55Pj4oXG4gIHRlbXBsYXRlOiBzdHJpbmcgfCBBbnlUeXBlPE1Db21wb25lbnQ+IHwgSW5qZWN0aW9uVG9rZW48TUNvbXBvbmVudD4sXG4gIHBhcmFtcz86IFRDb21wb25lbnQsXG4gIGZsYWdzOiBib29sZWFuIHwgSU1vY2tSZW5kZXJPcHRpb25zID0gdHJ1ZSxcbik6IGFueSB7XG4gIGNvbnN0IGJpbmRpbmdzID0gcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09ICdvYmplY3QnID8gT2JqZWN0LmtleXMocGFyYW1zKSA6IHBhcmFtcztcbiAgY29uc3Qgb3B0aW9ucyA9IHR5cGVvZiBmbGFncyA9PT0gJ2Jvb2xlYW4nID8geyBkZXRlY3RDaGFuZ2VzOiBmbGFncyB9IDogeyAuLi5mbGFncyB9O1xuICBjb25zdCBmYWN0b3J5ID0gKE1vY2tSZW5kZXJGYWN0b3J5IGFzIGFueSkodGVtcGxhdGUsIGJpbmRpbmdzLCBvcHRpb25zKTtcblxuICByZXR1cm4gZmFjdG9yeShwYXJhbXMsIG9wdGlvbnMuZGV0ZWN0Q2hhbmdlcyk7XG59XG5cbmV4cG9ydCB7IE1vY2tSZW5kZXIgfTtcbiJdfQ==