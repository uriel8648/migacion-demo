"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_directive_resolve_1 = __importDefault(require("../common/core.reflect.directive-resolve"));
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var registerTemplateMiddleware = function (template, meta) {
    var child = (0, core_helpers_1.extendClass)(template);
    var providers = meta.providers || [];
    providers = __spreadArray(__spreadArray([], __read(providers), false), [
        {
            provide: template,
            useExisting: child,
        },
    ], false);
    meta.providers = providers;
    if ((0, func_is_ng_def_1.isNgDef)(template, 'c')) {
        (0, core_1.Component)(meta)(child);
    }
    else {
        (0, core_1.Directive)(meta)(child);
    }
    testing_1.TestBed.configureTestingModule({
        declarations: [child],
    });
};
exports.default = (function (template) {
    var _a;
    if (!(0, func_is_ng_def_1.isNgDef)(template, 'c') && !(0, func_is_ng_def_1.isNgDef)(template, 'd')) {
        return {};
    }
    var meta = __assign({}, (0, core_reflect_directive_resolve_1.default)(template));
    if (meta.selector && meta.selector.match(/[\[\],\s]/)) {
        meta.selector = '';
    }
    if (!meta.selector) {
        // istanbul ignore next
        meta.selector = ((_a = testing_1.TestBed.ngMocksSelectors) === null || _a === void 0 ? void 0 : _a.get(template)) || '';
        if (!meta.selector) {
            meta.selector = "ng-mocks-" + template.name;
            registerTemplateMiddleware(template, meta);
            // istanbul ignore else
            if (testing_1.TestBed.ngMocksSelectors) {
                testing_1.TestBed.ngMocksSelectors.set(template, meta.selector);
            }
        }
    }
    return meta;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5yZWZsZWN0LXRlbXBsYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL21vY2stcmVuZGVyL2Z1bmMucmVmbGVjdC10ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNDQUFxRDtBQUNyRCxpREFBZ0Q7QUFFaEQsdURBQXFEO0FBQ3JELDRHQUFtRjtBQUVuRiwyREFBbUQ7QUFFbkQsSUFBTSwwQkFBMEIsR0FBRyxVQUFDLFFBQXNCLEVBQUUsSUFBZTtJQUN6RSxJQUFNLEtBQUssR0FBRyxJQUFBLDBCQUFXLEVBQUMsUUFBUSxDQUFDLENBQUM7SUFFcEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7SUFDckMsU0FBUywwQ0FDSixTQUFTO1FBQ1o7WUFDRSxPQUFPLEVBQUUsUUFBUTtZQUNqQixXQUFXLEVBQUUsS0FBSztTQUNuQjthQUNGLENBQUM7SUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUUzQixJQUFJLElBQUEsd0JBQU8sRUFBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDMUIsSUFBQSxnQkFBUyxFQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3hCO1NBQU07UUFDTCxJQUFBLGdCQUFTLEVBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDeEI7SUFDRCxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1FBQzdCLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQztLQUN0QixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixtQkFBZSxVQUFDLFFBQXNCOztJQUNwQyxJQUFJLENBQUMsSUFBQSx3QkFBTyxFQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUEsd0JBQU8sRUFBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDdEQsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUVELElBQU0sSUFBSSxnQkFBUSxJQUFBLHdDQUEyQixFQUFDLFFBQVEsQ0FBQyxDQUFFLENBQUM7SUFFMUQsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQ3JELElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0tBQ3BCO0lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDbEIsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQSxNQUFDLGlCQUFlLENBQUMsZ0JBQWdCLDBDQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSSxFQUFFLENBQUM7UUFDdkUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFZLFFBQVEsQ0FBQyxJQUFNLENBQUM7WUFDNUMsMEJBQTBCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNDLHVCQUF1QjtZQUN2QixJQUFLLGlCQUFlLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3BDLGlCQUFlLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDaEU7U0FDRjtLQUNGO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCB7IGV4dGVuZENsYXNzIH0gZnJvbSAnLi4vY29tbW9uL2NvcmUuaGVscGVycyc7XG5pbXBvcnQgY29yZVJlZmxlY3REaXJlY3RpdmVSZXNvbHZlIGZyb20gJy4uL2NvbW1vbi9jb3JlLnJlZmxlY3QuZGlyZWN0aXZlLXJlc29sdmUnO1xuaW1wb3J0IHsgQW55VHlwZSB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLnR5cGVzJztcbmltcG9ydCB7IGlzTmdEZWYgfSBmcm9tICcuLi9jb21tb24vZnVuYy5pcy1uZy1kZWYnO1xuXG5jb25zdCByZWdpc3RlclRlbXBsYXRlTWlkZGxld2FyZSA9ICh0ZW1wbGF0ZTogQW55VHlwZTxhbnk+LCBtZXRhOiBEaXJlY3RpdmUpOiB2b2lkID0+IHtcbiAgY29uc3QgY2hpbGQgPSBleHRlbmRDbGFzcyh0ZW1wbGF0ZSk7XG5cbiAgbGV0IHByb3ZpZGVycyA9IG1ldGEucHJvdmlkZXJzIHx8IFtdO1xuICBwcm92aWRlcnMgPSBbXG4gICAgLi4ucHJvdmlkZXJzLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IHRlbXBsYXRlLFxuICAgICAgdXNlRXhpc3Rpbmc6IGNoaWxkLFxuICAgIH0sXG4gIF07XG4gIG1ldGEucHJvdmlkZXJzID0gcHJvdmlkZXJzO1xuXG4gIGlmIChpc05nRGVmKHRlbXBsYXRlLCAnYycpKSB7XG4gICAgQ29tcG9uZW50KG1ldGEpKGNoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBEaXJlY3RpdmUobWV0YSkoY2hpbGQpO1xuICB9XG4gIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbY2hpbGRdLFxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICh0ZW1wbGF0ZTogQW55VHlwZTxhbnk+KTogRGlyZWN0aXZlID0+IHtcbiAgaWYgKCFpc05nRGVmKHRlbXBsYXRlLCAnYycpICYmICFpc05nRGVmKHRlbXBsYXRlLCAnZCcpKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgbWV0YSA9IHsgLi4uY29yZVJlZmxlY3REaXJlY3RpdmVSZXNvbHZlKHRlbXBsYXRlKSB9O1xuXG4gIGlmIChtZXRhLnNlbGVjdG9yICYmIG1ldGEuc2VsZWN0b3IubWF0Y2goL1tcXFtcXF0sXFxzXS8pKSB7XG4gICAgbWV0YS5zZWxlY3RvciA9ICcnO1xuICB9XG5cbiAgaWYgKCFtZXRhLnNlbGVjdG9yKSB7XG4gICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICBtZXRhLnNlbGVjdG9yID0gKFRlc3RCZWQgYXMgYW55KS5uZ01vY2tzU2VsZWN0b3JzPy5nZXQodGVtcGxhdGUpIHx8ICcnO1xuICAgIGlmICghbWV0YS5zZWxlY3Rvcikge1xuICAgICAgbWV0YS5zZWxlY3RvciA9IGBuZy1tb2Nrcy0ke3RlbXBsYXRlLm5hbWV9YDtcbiAgICAgIHJlZ2lzdGVyVGVtcGxhdGVNaWRkbGV3YXJlKHRlbXBsYXRlLCBtZXRhKTtcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlXG4gICAgICBpZiAoKFRlc3RCZWQgYXMgYW55KS5uZ01vY2tzU2VsZWN0b3JzKSB7XG4gICAgICAgIChUZXN0QmVkIGFzIGFueSkubmdNb2Nrc1NlbGVjdG9ycy5zZXQodGVtcGxhdGUsIG1ldGEuc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZXRhO1xufTtcbiJdfQ==