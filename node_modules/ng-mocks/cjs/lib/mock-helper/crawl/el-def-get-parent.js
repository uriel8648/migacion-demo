"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var core_injector_1 = __importDefault(require("../../common/core.injector"));
var el_def_get_node_1 = __importDefault(require("./el-def-get-node"));
var getVcr = function (node, child) {
    if (node === child) {
        return undefined;
    }
    if (child.nativeNode.nodeName !== '#comment') {
        return undefined;
    }
    return (0, core_injector_1.default)(core_1.ViewContainerRef, child.injector);
};
var getScanViewRefRootNodes = function (node, child) {
    var vcr = getVcr(node, child);
    if (!vcr) {
        return [];
    }
    var result = [];
    for (var vrIndex = 0; vrIndex < vcr.length; vrIndex += 1) {
        var vr = vcr.get(vrIndex);
        for (var rnIndex = 0; rnIndex < vr.rootNodes.length; rnIndex += 1) {
            result.push([rnIndex, vr.rootNodes[rnIndex]]);
        }
    }
    return result;
};
var scanViewRef = function (node) {
    var e_1, _a, e_2, _b;
    var _c;
    var result;
    var index;
    try {
        for (var _d = __values(((_c = node.parent) === null || _c === void 0 ? void 0 : _c.childNodes) || []), _e = _d.next(); !_e.done; _e = _d.next()) {
            var child = _e.value;
            try {
                for (var _f = (e_2 = void 0, __values(getScanViewRefRootNodes(node, child))), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var _h = __read(_g.value, 2), rnIndex = _h[0], rootNode = _h[1];
                    if (rootNode === node.nativeNode && (index === undefined || rnIndex < index)) {
                        result = (0, el_def_get_node_1.default)(child);
                        index = rnIndex;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
};
exports.default = (function (node) {
    var _a, _b, _c, _d;
    return (((_a = node.injector._tNode) === null || _a === void 0 ? void 0 : _a.parent) || // ivy
        ((_b = node.injector.elDef) === null || _b === void 0 ? void 0 : _b.parent) || // classic
        scanViewRef(node) ||
        ((_c = node.parent) === null || _c === void 0 ? void 0 : _c.injector._tNode) || // ivy
        ((_d = node.parent) === null || _d === void 0 ? void 0 : _d.injector.elDef) || // classic
        undefined);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWwtZGVmLWdldC1wYXJlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1oZWxwZXIvY3Jhd2wvZWwtZGVmLWdldC1wYXJlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxzQ0FBK0Q7QUFFL0QsNkVBQXNEO0FBRXRELHNFQUE2QztBQUU3QyxJQUFNLE1BQU0sR0FBRyxVQUFDLElBQVMsRUFBRSxLQUFVO0lBQ25DLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtRQUNsQixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUNELElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEtBQUssVUFBVSxFQUFFO1FBQzVDLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBRUQsT0FBTyxJQUFBLHVCQUFZLEVBQUMsdUJBQWdCLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hELENBQUMsQ0FBQztBQUVGLElBQU0sdUJBQXVCLEdBQUcsVUFBQyxJQUFTLEVBQUUsS0FBVTtJQUNwRCxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDUixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBTSxNQUFNLEdBQXlCLEVBQUUsQ0FBQztJQUN4QyxLQUFLLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFO1FBQ3hELElBQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsS0FBSyxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFJLEVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUU7WUFDMUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRyxFQUFVLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN4RDtLQUNGO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBRUYsSUFBTSxXQUFXLEdBQUcsVUFBQyxJQUFrQjs7O0lBQ3JDLElBQUksTUFBVyxDQUFDO0lBQ2hCLElBQUksS0FBVSxDQUFDOztRQUVmLEtBQW9CLElBQUEsS0FBQSxTQUFBLENBQUEsTUFBQSxJQUFJLENBQUMsTUFBTSwwQ0FBRSxVQUFVLEtBQUksRUFBRSxDQUFBLGdCQUFBLDRCQUFFO1lBQTlDLElBQU0sS0FBSyxXQUFBOztnQkFDZCxLQUFrQyxJQUFBLG9CQUFBLFNBQUEsdUJBQXVCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBLENBQUEsZ0JBQUEsNEJBQUU7b0JBQTdELElBQUEsS0FBQSxtQkFBbUIsRUFBbEIsT0FBTyxRQUFBLEVBQUUsUUFBUSxRQUFBO29CQUMzQixJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQUU7d0JBQzVFLE1BQU0sR0FBRyxJQUFBLHlCQUFZLEVBQUMsS0FBSyxDQUFDLENBQUM7d0JBQzdCLEtBQUssR0FBRyxPQUFPLENBQUM7cUJBQ2pCO2lCQUNGOzs7Ozs7Ozs7U0FDRjs7Ozs7Ozs7O0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBRUYsbUJBQWUsVUFBQyxJQUFTOztJQUN2QixPQUFPLENBQ0wsQ0FBQSxNQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSwwQ0FBRSxNQUFNLEtBQUksTUFBTTtTQUN0QyxNQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSywwQ0FBRSxNQUFNLENBQUEsSUFBSSxVQUFVO1FBQ3pDLFdBQVcsQ0FBQyxJQUFJLENBQUM7U0FDakIsTUFBQSxJQUFJLENBQUMsTUFBTSwwQ0FBRSxRQUFRLENBQUMsTUFBTSxDQUFBLElBQUksTUFBTTtTQUN0QyxNQUFBLElBQUksQ0FBQyxNQUFNLDBDQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUEsSUFBSSxVQUFVO1FBQ3pDLFNBQVMsQ0FDVixDQUFDO0FBQ0osQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWdFbGVtZW50LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCBjb3JlSW5qZWN0b3IgZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUuaW5qZWN0b3InO1xuXG5pbXBvcnQgZWxEZWZHZXROb2RlIGZyb20gJy4vZWwtZGVmLWdldC1ub2RlJztcblxuY29uc3QgZ2V0VmNyID0gKG5vZGU6IGFueSwgY2hpbGQ6IGFueSk6IHVuZGVmaW5lZCB8IFZpZXdDb250YWluZXJSZWYgPT4ge1xuICBpZiAobm9kZSA9PT0gY2hpbGQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChjaGlsZC5uYXRpdmVOb2RlLm5vZGVOYW1lICE9PSAnI2NvbW1lbnQnKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBjb3JlSW5qZWN0b3IoVmlld0NvbnRhaW5lclJlZiwgY2hpbGQuaW5qZWN0b3IpO1xufTtcblxuY29uc3QgZ2V0U2NhblZpZXdSZWZSb290Tm9kZXMgPSAobm9kZTogYW55LCBjaGlsZDogYW55KTogQXJyYXk8W251bWJlciwgYW55XT4gPT4ge1xuICBjb25zdCB2Y3IgPSBnZXRWY3Iobm9kZSwgY2hpbGQpO1xuICBpZiAoIXZjcikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdDogQXJyYXk8W251bWJlciwgYW55XT4gPSBbXTtcbiAgZm9yIChsZXQgdnJJbmRleCA9IDA7IHZySW5kZXggPCB2Y3IubGVuZ3RoOyB2ckluZGV4ICs9IDEpIHtcbiAgICBjb25zdCB2ciA9IHZjci5nZXQodnJJbmRleCk7XG4gICAgZm9yIChsZXQgcm5JbmRleCA9IDA7IHJuSW5kZXggPCAodnIgYXMgYW55KS5yb290Tm9kZXMubGVuZ3RoOyBybkluZGV4ICs9IDEpIHtcbiAgICAgIHJlc3VsdC5wdXNoKFtybkluZGV4LCAodnIgYXMgYW55KS5yb290Tm9kZXNbcm5JbmRleF1dKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuY29uc3Qgc2NhblZpZXdSZWYgPSAobm9kZTogRGVidWdFbGVtZW50KSA9PiB7XG4gIGxldCByZXN1bHQ6IGFueTtcbiAgbGV0IGluZGV4OiBhbnk7XG5cbiAgZm9yIChjb25zdCBjaGlsZCBvZiBub2RlLnBhcmVudD8uY2hpbGROb2RlcyB8fCBbXSkge1xuICAgIGZvciAoY29uc3QgW3JuSW5kZXgsIHJvb3ROb2RlXSBvZiBnZXRTY2FuVmlld1JlZlJvb3ROb2Rlcyhub2RlLCBjaGlsZCkpIHtcbiAgICAgIGlmIChyb290Tm9kZSA9PT0gbm9kZS5uYXRpdmVOb2RlICYmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8IHJuSW5kZXggPCBpbmRleCkpIHtcbiAgICAgICAgcmVzdWx0ID0gZWxEZWZHZXROb2RlKGNoaWxkKTtcbiAgICAgICAgaW5kZXggPSBybkluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAobm9kZTogYW55KSA9PiB7XG4gIHJldHVybiAoXG4gICAgbm9kZS5pbmplY3Rvci5fdE5vZGU/LnBhcmVudCB8fCAvLyBpdnlcbiAgICBub2RlLmluamVjdG9yLmVsRGVmPy5wYXJlbnQgfHwgLy8gY2xhc3NpY1xuICAgIHNjYW5WaWV3UmVmKG5vZGUpIHx8XG4gICAgbm9kZS5wYXJlbnQ/LmluamVjdG9yLl90Tm9kZSB8fCAvLyBpdnlcbiAgICBub2RlLnBhcmVudD8uaW5qZWN0b3IuZWxEZWYgfHwgLy8gY2xhc3NpY1xuICAgIHVuZGVmaW5lZFxuICApO1xufTtcbiJdfQ==