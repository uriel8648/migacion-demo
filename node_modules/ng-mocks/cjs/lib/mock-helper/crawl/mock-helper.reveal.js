"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mock_helper_find_1 = __importDefault(require("../find/mock-helper.find"));
var func_get_last_fixture_1 = __importDefault(require("../func.get-last-fixture"));
var func_parse_find_args_1 = __importDefault(require("../func.parse-find-args"));
var func_parse_find_args_name_1 = __importDefault(require("../func.parse-find-args-name"));
var detect_crawler_1 = __importDefault(require("./detect-crawler"));
var detect_text_node_1 = __importDefault(require("./detect-text-node"));
var func_is_valid_reveal_selector_1 = __importDefault(require("./func.is-valid-reveal-selector"));
var mock_helper_crawl_1 = __importDefault(require("./mock-helper.crawl"));
var defaultNotFoundValue = {}; // simulating Symbol
exports.default = (function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var _a = __read((0, func_parse_find_args_1.default)(args, func_is_valid_reveal_selector_1.default, defaultNotFoundValue), 3), el = _a[0], sel = _a[1], notFoundValue = _a[2];
    var root = (0, mock_helper_find_1.default)((0, func_get_last_fixture_1.default)(), el, undefined);
    var detector = (0, detect_crawler_1.default)(sel);
    var result;
    (0, mock_helper_crawl_1.default)(root, function (node) {
        if (node !== root && !(0, detect_text_node_1.default)(node) && detector(node)) {
            result = node;
            return true;
        }
        return false;
    });
    if (result) {
        return result;
    }
    if (notFoundValue !== defaultNotFoundValue) {
        return notFoundValue;
    }
    throw new Error("Cannot find a DebugElement via ngMocks.reveal(" + (0, func_parse_find_args_name_1.default)(sel) + ")");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIucmV2ZWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL21vY2staGVscGVyL2NyYXdsL21vY2staGVscGVyLnJldmVhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4RUFBc0Q7QUFDdEQsbUZBQTBEO0FBQzFELGlGQUF3RDtBQUN4RCwyRkFBaUU7QUFFakUsb0VBQTZDO0FBQzdDLHdFQUFnRDtBQUNoRCxrR0FBd0U7QUFDeEUsMEVBQWtEO0FBRWxELElBQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDLENBQUMsb0JBQW9CO0FBRXJELG1CQUFlO0lBQUMsY0FBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCx5QkFBYzs7SUFDdEIsSUFBQSxLQUFBLE9BQTJCLElBQUEsOEJBQWlCLEVBQUMsSUFBSSxFQUFFLHVDQUF5QixFQUFFLG9CQUFvQixDQUFDLElBQUEsRUFBbEcsRUFBRSxRQUFBLEVBQUUsR0FBRyxRQUFBLEVBQUUsYUFBYSxRQUE0RSxDQUFDO0lBQzFHLElBQU0sSUFBSSxHQUFHLElBQUEsMEJBQWMsRUFBQyxJQUFBLCtCQUFrQixHQUFFLEVBQUUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWpFLElBQU0sUUFBUSxHQUFHLElBQUEsd0JBQWEsRUFBQyxHQUFHLENBQUMsQ0FBQztJQUVwQyxJQUFJLE1BQU0sQ0FBQztJQUNYLElBQUEsMkJBQWUsRUFBQyxJQUFJLEVBQUUsVUFBQSxJQUFJO1FBQ3hCLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLElBQUEsMEJBQWMsRUFBQyxJQUFJLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUQsTUFBTSxHQUFHLElBQUksQ0FBQztZQUVkLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxNQUFNLEVBQUU7UUFDVixPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsSUFBSSxhQUFhLEtBQUssb0JBQW9CLEVBQUU7UUFDMUMsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFpRCxJQUFBLG1DQUFxQixFQUFDLEdBQUcsQ0FBQyxNQUFHLENBQUMsQ0FBQztBQUNsRyxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9ja0hlbHBlckZpbmQgZnJvbSAnLi4vZmluZC9tb2NrLWhlbHBlci5maW5kJztcbmltcG9ydCBmdW5jR2V0TGFzdEZpeHR1cmUgZnJvbSAnLi4vZnVuYy5nZXQtbGFzdC1maXh0dXJlJztcbmltcG9ydCBmdW5jUGFyc2VGaW5kQXJncyBmcm9tICcuLi9mdW5jLnBhcnNlLWZpbmQtYXJncyc7XG5pbXBvcnQgZnVuY1BhcnNlRmluZEFyZ3NOYW1lIGZyb20gJy4uL2Z1bmMucGFyc2UtZmluZC1hcmdzLW5hbWUnO1xuXG5pbXBvcnQgZGV0ZWN0Q3Jhd2xlciBmcm9tICcuL2RldGVjdC1jcmF3bGVyJztcbmltcG9ydCBkZXRlY3RUZXh0Tm9kZSBmcm9tICcuL2RldGVjdC10ZXh0LW5vZGUnO1xuaW1wb3J0IGZ1bmNJc1ZhbGlkUmV2ZWFsU2VsZWN0b3IgZnJvbSAnLi9mdW5jLmlzLXZhbGlkLXJldmVhbC1zZWxlY3Rvcic7XG5pbXBvcnQgbW9ja0hlbHBlckNyYXdsIGZyb20gJy4vbW9jay1oZWxwZXIuY3Jhd2wnO1xuXG5jb25zdCBkZWZhdWx0Tm90Rm91bmRWYWx1ZSA9IHt9OyAvLyBzaW11bGF0aW5nIFN5bWJvbFxuXG5leHBvcnQgZGVmYXVsdCAoLi4uYXJnczogYW55W10pOiBhbnkgPT4ge1xuICBjb25zdCBbZWwsIHNlbCwgbm90Rm91bmRWYWx1ZV0gPSBmdW5jUGFyc2VGaW5kQXJncyhhcmdzLCBmdW5jSXNWYWxpZFJldmVhbFNlbGVjdG9yLCBkZWZhdWx0Tm90Rm91bmRWYWx1ZSk7XG4gIGNvbnN0IHJvb3QgPSBtb2NrSGVscGVyRmluZChmdW5jR2V0TGFzdEZpeHR1cmUoKSwgZWwsIHVuZGVmaW5lZCk7XG5cbiAgY29uc3QgZGV0ZWN0b3IgPSBkZXRlY3RDcmF3bGVyKHNlbCk7XG5cbiAgbGV0IHJlc3VsdDtcbiAgbW9ja0hlbHBlckNyYXdsKHJvb3QsIG5vZGUgPT4ge1xuICAgIGlmIChub2RlICE9PSByb290ICYmICFkZXRlY3RUZXh0Tm9kZShub2RlKSAmJiBkZXRlY3Rvcihub2RlKSkge1xuICAgICAgcmVzdWx0ID0gbm9kZTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKG5vdEZvdW5kVmFsdWUgIT09IGRlZmF1bHROb3RGb3VuZFZhbHVlKSB7XG4gICAgcmV0dXJuIG5vdEZvdW5kVmFsdWU7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kIGEgRGVidWdFbGVtZW50IHZpYSBuZ01vY2tzLnJldmVhbCgke2Z1bmNQYXJzZUZpbmRBcmdzTmFtZShzZWwpfSlgKTtcbn07XG4iXX0=