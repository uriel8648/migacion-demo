"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mock_helper_find_1 = __importDefault(require("../find/mock-helper.find"));
var func_get_last_fixture_1 = __importDefault(require("../func.get-last-fixture"));
var func_parse_find_args_1 = __importDefault(require("../func.parse-find-args"));
var detect_crawler_1 = __importDefault(require("./detect-crawler"));
var detect_text_node_1 = __importDefault(require("./detect-text-node"));
var func_is_valid_reveal_selector_1 = __importDefault(require("./func.is-valid-reveal-selector"));
var mock_helper_crawl_1 = __importDefault(require("./mock-helper.crawl"));
exports.default = (function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var _a = __read((0, func_parse_find_args_1.default)(args, func_is_valid_reveal_selector_1.default), 2), el = _a[0], sel = _a[1];
    var root = (0, mock_helper_find_1.default)((0, func_get_last_fixture_1.default)(), el, undefined);
    var detector = (0, detect_crawler_1.default)(sel);
    var result = [];
    (0, mock_helper_crawl_1.default)(root, function (node) {
        if (node !== root && !(0, detect_text_node_1.default)(node) && detector(node)) {
            result.push(node);
        }
    });
    return result;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIucmV2ZWFsLWFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWhlbHBlci9jcmF3bC9tb2NrLWhlbHBlci5yZXZlYWwtYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhFQUFzRDtBQUN0RCxtRkFBMEQ7QUFDMUQsaUZBQXdEO0FBRXhELG9FQUE2QztBQUM3Qyx3RUFBZ0Q7QUFDaEQsa0dBQXdFO0FBQ3hFLDBFQUFrRDtBQUVsRCxtQkFBZTtJQUFDLGNBQWM7U0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1FBQWQseUJBQWM7O0lBQ3RCLElBQUEsS0FBQSxPQUFZLElBQUEsOEJBQWlCLEVBQUMsSUFBSSxFQUFFLHVDQUF5QixDQUFDLElBQUEsRUFBN0QsRUFBRSxRQUFBLEVBQUUsR0FBRyxRQUFzRCxDQUFDO0lBQ3JFLElBQU0sSUFBSSxHQUFHLElBQUEsMEJBQWMsRUFBQyxJQUFBLCtCQUFrQixHQUFFLEVBQUUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWpFLElBQU0sUUFBUSxHQUFHLElBQUEsd0JBQWEsRUFBQyxHQUFHLENBQUMsQ0FBQztJQUVwQyxJQUFNLE1BQU0sR0FBVSxFQUFFLENBQUM7SUFDekIsSUFBQSwyQkFBZSxFQUFDLElBQUksRUFBRSxVQUFBLElBQUk7UUFDeEIsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBQSwwQkFBYyxFQUFDLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1RCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9ja0hlbHBlckZpbmQgZnJvbSAnLi4vZmluZC9tb2NrLWhlbHBlci5maW5kJztcbmltcG9ydCBmdW5jR2V0TGFzdEZpeHR1cmUgZnJvbSAnLi4vZnVuYy5nZXQtbGFzdC1maXh0dXJlJztcbmltcG9ydCBmdW5jUGFyc2VGaW5kQXJncyBmcm9tICcuLi9mdW5jLnBhcnNlLWZpbmQtYXJncyc7XG5cbmltcG9ydCBkZXRlY3RDcmF3bGVyIGZyb20gJy4vZGV0ZWN0LWNyYXdsZXInO1xuaW1wb3J0IGRldGVjdFRleHROb2RlIGZyb20gJy4vZGV0ZWN0LXRleHQtbm9kZSc7XG5pbXBvcnQgZnVuY0lzVmFsaWRSZXZlYWxTZWxlY3RvciBmcm9tICcuL2Z1bmMuaXMtdmFsaWQtcmV2ZWFsLXNlbGVjdG9yJztcbmltcG9ydCBtb2NrSGVscGVyQ3Jhd2wgZnJvbSAnLi9tb2NrLWhlbHBlci5jcmF3bCc7XG5cbmV4cG9ydCBkZWZhdWx0ICguLi5hcmdzOiBhbnlbXSk6IGFueVtdID0+IHtcbiAgY29uc3QgW2VsLCBzZWxdID0gZnVuY1BhcnNlRmluZEFyZ3MoYXJncywgZnVuY0lzVmFsaWRSZXZlYWxTZWxlY3Rvcik7XG4gIGNvbnN0IHJvb3QgPSBtb2NrSGVscGVyRmluZChmdW5jR2V0TGFzdEZpeHR1cmUoKSwgZWwsIHVuZGVmaW5lZCk7XG5cbiAgY29uc3QgZGV0ZWN0b3IgPSBkZXRlY3RDcmF3bGVyKHNlbCk7XG5cbiAgY29uc3QgcmVzdWx0OiBhbnlbXSA9IFtdO1xuICBtb2NrSGVscGVyQ3Jhd2wocm9vdCwgbm9kZSA9PiB7XG4gICAgaWYgKG5vZGUgIT09IHJvb3QgJiYgIWRldGVjdFRleHROb2RlKG5vZGUpICYmIGRldGVjdG9yKG5vZGUpKSB7XG4gICAgICByZXN1bHQucHVzaChub2RlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl19