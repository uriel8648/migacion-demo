"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var regExp = new RegExp('\\[.*?\\]', 'g');
exports.default = (function (selectors, query) {
    var e_1, _a, e_2, _b;
    try {
        for (var selectors_1 = __values(selectors), selectors_1_1 = selectors_1.next(); !selectors_1_1.done; selectors_1_1 = selectors_1.next()) {
            var selector = selectors_1_1.value;
            var attributes = selector.replace(regExp, '').split(',');
            try {
                for (var attributes_1 = (e_2 = void 0, __values(attributes)), attributes_1_1 = attributes_1.next(); !attributes_1_1.done; attributes_1_1 = attributes_1.next()) {
                    var attribute = attributes_1_1.value;
                    if (attribute.trim() === query) {
                        return true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (attributes_1_1 && !attributes_1_1.done && (_b = attributes_1.return)) _b.call(attributes_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (selectors_1_1 && !selectors_1_1.done && (_a = selectors_1.return)) _a.call(selectors_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0ZWN0LXRhZy1uYW1lLWluLXNlbGVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWhlbHBlci9jcmF3bC9kZXRlY3QtdGFnLW5hbWUtaW4tc2VsZWN0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFNUMsbUJBQWUsVUFBQyxTQUFtQixFQUFFLEtBQWE7OztRQUNoRCxLQUF1QixJQUFBLGNBQUEsU0FBQSxTQUFTLENBQUEsb0NBQUEsMkRBQUU7WUFBN0IsSUFBTSxRQUFRLHNCQUFBO1lBQ2pCLElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Z0JBRTNELEtBQXdCLElBQUEsOEJBQUEsU0FBQSxVQUFVLENBQUEsQ0FBQSxzQ0FBQSw4REFBRTtvQkFBL0IsSUFBTSxTQUFTLHVCQUFBO29CQUNsQixJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxLQUFLLEVBQUU7d0JBQzlCLE9BQU8sSUFBSSxDQUFDO3FCQUNiO2lCQUNGOzs7Ozs7Ozs7U0FDRjs7Ozs7Ozs7O0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZWdFeHAgPSBuZXcgUmVnRXhwKCdcXFxcWy4qP1xcXFxdJywgJ2cnKTtcblxuZXhwb3J0IGRlZmF1bHQgKHNlbGVjdG9yczogc3RyaW5nW10sIHF1ZXJ5OiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgZm9yIChjb25zdCBzZWxlY3RvciBvZiBzZWxlY3RvcnMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gc2VsZWN0b3IucmVwbGFjZShyZWdFeHAsICcnKS5zcGxpdCgnLCcpO1xuXG4gICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgYXR0cmlidXRlcykge1xuICAgICAgaWYgKGF0dHJpYnV0ZS50cmltKCkgPT09IHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iXX0=