"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var is_fixture_1 = __importDefault(require("../format/is-fixture"));
var func_get_last_fixture_1 = __importDefault(require("../func.get-last-fixture"));
var findDebugElement = function (el) {
    if ((0, is_fixture_1.default)(el)) {
        return findDebugElement(el.debugElement);
    }
    if (el && el.injector && el.query) {
        return el;
    }
    return undefined;
};
exports.default = (function (args, defaultNotFoundValue) {
    var _a, _b;
    var _c;
    var el;
    var sel;
    var notFoundValue = defaultNotFoundValue;
    if (args.length === 3) {
        el = findDebugElement(args[0]);
        sel = args[1];
        notFoundValue = args[2];
    }
    else if (args.length === 1) {
        el = findDebugElement((0, func_get_last_fixture_1.default)());
        _a = __read(args, 1), sel = _a[0];
    }
    else if (!args[0]) {
        sel = args[1];
    }
    else {
        el = findDebugElement(args[0]);
        if (el) {
            sel = args[1];
        }
        else {
            el = findDebugElement((0, func_get_last_fixture_1.default)());
            _b = __read(args, 2), sel = _b[0], notFoundValue = _b[1];
        }
    }
    sel = (_c = findDebugElement(sel)) !== null && _c !== void 0 ? _c : sel;
    return [el, sel, notFoundValue];
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5wYXJzZS1maW5kLWFyZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1oZWxwZXIvZmluZC9mdW5jLnBhcnNlLWZpbmQtYXJncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxvRUFBNkM7QUFDN0MsbUZBQTBEO0FBRTFELElBQU0sZ0JBQWdCLEdBQUcsVUFBQyxFQUFPO0lBQy9CLElBQUksSUFBQSxvQkFBUyxFQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ2pCLE9BQU8sZ0JBQWdCLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFO1FBQ2pDLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixtQkFBZSxVQUFDLElBQVcsRUFBRSxvQkFBMEI7OztJQUNyRCxJQUFJLEVBQUUsQ0FBQztJQUNQLElBQUksR0FBRyxDQUFDO0lBQ1IsSUFBSSxhQUFhLEdBQUcsb0JBQW9CLENBQUM7SUFDekMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNyQixFQUFFLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLGFBQWEsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDekI7U0FBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzVCLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFBLCtCQUFrQixHQUFFLENBQUMsQ0FBQztRQUM1QyxLQUFBLE9BQVEsSUFBSSxJQUFBLEVBQVgsR0FBRyxRQUFBLENBQVM7S0FDZDtTQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDbkIsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNmO1NBQU07UUFDTCxFQUFFLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxFQUFFLEVBQUU7WUFDTixHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2Y7YUFBTTtZQUNMLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFBLCtCQUFrQixHQUFFLENBQUMsQ0FBQztZQUM1QyxLQUFBLE9BQXVCLElBQUksSUFBQSxFQUExQixHQUFHLFFBQUEsRUFBRSxhQUFhLFFBQUEsQ0FBUztTQUM3QjtLQUNGO0lBQ0QsR0FBRyxHQUFHLE1BQUEsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLG1DQUFJLEdBQUcsQ0FBQztJQUVuQyxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNsQyxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWJ1Z0VsZW1lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IGlzRml4dHVyZSBmcm9tICcuLi9mb3JtYXQvaXMtZml4dHVyZSc7XG5pbXBvcnQgZnVuY0dldExhc3RGaXh0dXJlIGZyb20gJy4uL2Z1bmMuZ2V0LWxhc3QtZml4dHVyZSc7XG5cbmNvbnN0IGZpbmREZWJ1Z0VsZW1lbnQgPSAoZWw6IGFueSk6IERlYnVnRWxlbWVudCB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmIChpc0ZpeHR1cmUoZWwpKSB7XG4gICAgcmV0dXJuIGZpbmREZWJ1Z0VsZW1lbnQoZWwuZGVidWdFbGVtZW50KTtcbiAgfVxuICBpZiAoZWwgJiYgZWwuaW5qZWN0b3IgJiYgZWwucXVlcnkpIHtcbiAgICByZXR1cm4gZWw7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKGFyZ3M6IGFueVtdLCBkZWZhdWx0Tm90Rm91bmRWYWx1ZT86IGFueSk6IFthbnksIGFueSwgYW55XSA9PiB7XG4gIGxldCBlbDtcbiAgbGV0IHNlbDtcbiAgbGV0IG5vdEZvdW5kVmFsdWUgPSBkZWZhdWx0Tm90Rm91bmRWYWx1ZTtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgZWwgPSBmaW5kRGVidWdFbGVtZW50KGFyZ3NbMF0pO1xuICAgIHNlbCA9IGFyZ3NbMV07XG4gICAgbm90Rm91bmRWYWx1ZSA9IGFyZ3NbMl07XG4gIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICBlbCA9IGZpbmREZWJ1Z0VsZW1lbnQoZnVuY0dldExhc3RGaXh0dXJlKCkpO1xuICAgIFtzZWxdID0gYXJncztcbiAgfSBlbHNlIGlmICghYXJnc1swXSkge1xuICAgIHNlbCA9IGFyZ3NbMV07XG4gIH0gZWxzZSB7XG4gICAgZWwgPSBmaW5kRGVidWdFbGVtZW50KGFyZ3NbMF0pO1xuICAgIGlmIChlbCkge1xuICAgICAgc2VsID0gYXJnc1sxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwgPSBmaW5kRGVidWdFbGVtZW50KGZ1bmNHZXRMYXN0Rml4dHVyZSgpKTtcbiAgICAgIFtzZWwsIG5vdEZvdW5kVmFsdWVdID0gYXJncztcbiAgICB9XG4gIH1cbiAgc2VsID0gZmluZERlYnVnRWxlbWVudChzZWwpID8/IHNlbDtcblxuICByZXR1cm4gW2VsLCBzZWwsIG5vdEZvdW5kVmFsdWVdO1xufTtcbiJdfQ==