"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var func_get_from_node_element_1 = __importDefault(require("./func.get-from-node-element"));
var func_get_from_node_scan_1 = __importDefault(require("./func.get-from-node-scan"));
var detectContextByIndex = function (rootView, index) {
    if (typeof rootView[1] === 'object' && rootView[20] === index) {
        return rootView;
    }
    for (var i = 21; i < rootView.length; i += 1) {
        var item = rootView[i];
        if (Array.isArray(item) && typeof item[1] === 'object' && item[20] === index) {
            return item;
        }
    }
    return undefined;
};
var detectContext = function (node) {
    var _a;
    var current = node;
    var context = (_a = current.nativeNode) === null || _a === void 0 ? void 0 : _a.__ngContext__;
    while (context === undefined && current.parent) {
        current = current.parent;
        context = current.nativeNode.__ngContext__;
    }
    if (typeof context !== 'number') {
        return context;
    }
    // welcome to A12 and its optimization
    // https://github.com/angular/angular/pull/41358
    var rootView = current.injector._lView;
    if (Array.isArray(rootView)) {
        return detectContextByIndex(rootView, context);
    }
    return undefined;
};
var contextToNodes = function (context) { return (Array.isArray(context) ? context : context === null || context === void 0 ? void 0 : context.lView); };
exports.default = (function (result, node, proto) {
    if (!node || node._debugContext) {
        return;
    }
    var el = (0, func_get_from_node_element_1.default)(node);
    (0, func_get_from_node_scan_1.default)({
        el: el,
        nodes: contextToNodes(detectContext(node)) || [],
        normalize: function (item) { return item; },
        proto: proto,
        result: result,
    }, true);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5nZXQtZnJvbS1ub2RlLWl2eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWhlbHBlci9mdW5jLmdldC1mcm9tLW5vZGUtaXZ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0EsNEZBQWtFO0FBQ2xFLHNGQUE0RDtBQUU1RCxJQUFNLG9CQUFvQixHQUFHLFVBQUMsUUFBYSxFQUFFLEtBQWE7SUFDeEQsSUFBSSxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEtBQUssRUFBRTtRQUM3RCxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDNUMsSUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUM1RSxPQUFPLElBQUksQ0FBQztTQUNiO0tBQ0Y7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixJQUFNLGFBQWEsR0FBRyxVQUFDLElBQWU7O0lBQ3BDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUNuQixJQUFJLE9BQU8sR0FBRyxNQUFBLE9BQU8sQ0FBQyxVQUFVLDBDQUFFLGFBQWEsQ0FBQztJQUNoRCxPQUFPLE9BQU8sS0FBSyxTQUFTLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUM5QyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUN6QixPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7S0FDNUM7SUFDRCxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtRQUMvQixPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUNELHNDQUFzQztJQUN0QyxnREFBZ0Q7SUFFaEQsSUFBTSxRQUFRLEdBQUksT0FBTyxDQUFDLFFBQWdCLENBQUMsTUFBTSxDQUFDO0lBQ2xELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUMzQixPQUFPLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNoRDtJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLElBQU0sY0FBYyxHQUFHLFVBQUMsT0FBWSxJQUFVLE9BQUEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxLQUFLLENBQUMsRUFBbkQsQ0FBbUQsQ0FBQztBQUVsRyxtQkFBZSxVQUFJLE1BQVcsRUFBRSxJQUEyQyxFQUFFLEtBQWM7SUFDekYsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQy9CLE9BQU87S0FDUjtJQUVELElBQU0sRUFBRSxHQUFHLElBQUEsb0NBQXNCLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsSUFBQSxpQ0FBbUIsRUFDakI7UUFDRSxFQUFFLElBQUE7UUFDRixLQUFLLEVBQUUsY0FBYyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUU7UUFDaEQsU0FBUyxFQUFFLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxFQUFKLENBQUk7UUFDdkIsS0FBSyxPQUFBO1FBQ0wsTUFBTSxRQUFBO0tBQ1AsRUFDRCxJQUFJLENBQ0wsQ0FBQztBQUNKLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnTm9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnLi4vY29tbW9uL2NvcmUudHlwZXMnO1xuXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi9mdW5jLmdldC1mcm9tLW5vZGUnO1xuaW1wb3J0IGZ1bmNHZXRGcm9tTm9kZUVsZW1lbnQgZnJvbSAnLi9mdW5jLmdldC1mcm9tLW5vZGUtZWxlbWVudCc7XG5pbXBvcnQgZnVuY0dldEZyb21Ob2RlU2NhbiBmcm9tICcuL2Z1bmMuZ2V0LWZyb20tbm9kZS1zY2FuJztcblxuY29uc3QgZGV0ZWN0Q29udGV4dEJ5SW5kZXggPSAocm9vdFZpZXc6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICBpZiAodHlwZW9mIHJvb3RWaWV3WzFdID09PSAnb2JqZWN0JyAmJiByb290Vmlld1syMF0gPT09IGluZGV4KSB7XG4gICAgcmV0dXJuIHJvb3RWaWV3O1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDIxOyBpIDwgcm9vdFZpZXcubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBpdGVtID0gcm9vdFZpZXdbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkgJiYgdHlwZW9mIGl0ZW1bMV0gPT09ICdvYmplY3QnICYmIGl0ZW1bMjBdID09PSBpbmRleCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmNvbnN0IGRldGVjdENvbnRleHQgPSAobm9kZTogRGVidWdOb2RlKTogYW55ID0+IHtcbiAgbGV0IGN1cnJlbnQgPSBub2RlO1xuICBsZXQgY29udGV4dCA9IGN1cnJlbnQubmF0aXZlTm9kZT8uX19uZ0NvbnRleHRfXztcbiAgd2hpbGUgKGNvbnRleHQgPT09IHVuZGVmaW5lZCAmJiBjdXJyZW50LnBhcmVudCkge1xuICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICBjb250ZXh0ID0gY3VycmVudC5uYXRpdmVOb2RlLl9fbmdDb250ZXh0X187XG4gIH1cbiAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG4gIC8vIHdlbGNvbWUgdG8gQTEyIGFuZCBpdHMgb3B0aW1pemF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvcHVsbC80MTM1OFxuXG4gIGNvbnN0IHJvb3RWaWV3ID0gKGN1cnJlbnQuaW5qZWN0b3IgYXMgYW55KS5fbFZpZXc7XG4gIGlmIChBcnJheS5pc0FycmF5KHJvb3RWaWV3KSkge1xuICAgIHJldHVybiBkZXRlY3RDb250ZXh0QnlJbmRleChyb290VmlldywgY29udGV4dCk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuY29uc3QgY29udGV4dFRvTm9kZXMgPSAoY29udGV4dDogYW55KTogYW55ID0+IChBcnJheS5pc0FycmF5KGNvbnRleHQpID8gY29udGV4dCA6IGNvbnRleHQ/LmxWaWV3KTtcblxuZXhwb3J0IGRlZmF1bHQgPFQ+KHJlc3VsdDogVFtdLCBub2RlOiAoRGVidWdOb2RlICYgTm9kZSkgfCBudWxsIHwgdW5kZWZpbmVkLCBwcm90bzogVHlwZTxUPik6IHZvaWQgPT4ge1xuICBpZiAoIW5vZGUgfHwgbm9kZS5fZGVidWdDb250ZXh0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZWwgPSBmdW5jR2V0RnJvbU5vZGVFbGVtZW50KG5vZGUpO1xuICBmdW5jR2V0RnJvbU5vZGVTY2FuKFxuICAgIHtcbiAgICAgIGVsLFxuICAgICAgbm9kZXM6IGNvbnRleHRUb05vZGVzKGRldGVjdENvbnRleHQobm9kZSkpIHx8IFtdLFxuICAgICAgbm9ybWFsaXplOiBpdGVtID0+IGl0ZW0sXG4gICAgICBwcm90byxcbiAgICAgIHJlc3VsdCxcbiAgICB9LFxuICAgIHRydWUsXG4gICk7XG59O1xuIl19