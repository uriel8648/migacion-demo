"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("@angular/core/testing");
var core_define_property_1 = __importDefault(require("../common/core.define-property"));
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var hooks = ng_mocks_universe_1.default.global.get('faster-hooks') || {
    after: [],
    before: [],
};
ng_mocks_universe_1.default.global.set('faster-hooks', hooks);
var configureTestingModule = function (original) {
    return function (moduleDef) {
        var e_1, _a;
        ng_mocks_universe_1.default.global.set('bullet:customized', true);
        var final = original;
        try {
            for (var _b = __values(hooks.before), _c = _b.next(); !_c.done; _c = _b.next()) {
                var callback = _c.value;
                final = callback(final);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return final.call(testing_1.TestBed, moduleDef);
    };
};
var resetTestingModule = function (original) {
    return function () {
        var e_2, _a;
        if (ng_mocks_universe_1.default.global.has('bullet')) {
            if (ng_mocks_universe_1.default.global.has('bullet:customized')) {
                ng_mocks_universe_1.default.global.set('bullet:reset', true);
            }
            return testing_1.TestBed;
        }
        ng_mocks_universe_1.default.global.delete('bullet:customized');
        ng_mocks_universe_1.default.global.delete('bullet:reset');
        var final = original;
        try {
            for (var _b = __values(hooks.after), _c = _b.next(); !_c.done; _c = _b.next()) {
                var callback = _c.value;
                final = callback(final);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return final.call(testing_1.TestBed);
    };
};
exports.default = (function () {
    if (!testing_1.TestBed.ngMocksFasterInstalled) {
        testing_1.TestBed.configureTestingModule = configureTestingModule(testing_1.TestBed.configureTestingModule);
        testing_1.TestBed.resetTestingModule = resetTestingModule(testing_1.TestBed.resetTestingModule);
        (0, core_define_property_1.default)(testing_1.TestBed, 'ngMocksFasterInstalled', true, false);
    }
    return hooks;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuZmFzdGVyLWluc3RhbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1oZWxwZXIvbW9jay1oZWxwZXIuZmFzdGVyLWluc3RhbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlEQUFtRjtBQUVuRix3RkFBZ0U7QUFDaEUsa0ZBQTBEO0FBRTFELElBQU0sS0FBSyxHQUdQLDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSTtJQUNoRCxLQUFLLEVBQUUsRUFBRTtJQUNULE1BQU0sRUFBRSxFQUFFO0NBQ1gsQ0FBQztBQUNGLDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFbEQsSUFBTSxzQkFBc0IsR0FDMUIsVUFBQyxRQUFpRDtJQUNsRCxPQUFBLFVBQUMsU0FBNkI7O1FBQzVCLDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV0RCxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUM7O1lBQ3JCLEtBQXVCLElBQUEsS0FBQSxTQUFBLEtBQUssQ0FBQyxNQUFNLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQWhDLElBQU0sUUFBUSxXQUFBO2dCQUNqQixLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3pCOzs7Ozs7Ozs7UUFFRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDO0FBVEQsQ0FTQyxDQUFDO0FBRUosSUFBTSxrQkFBa0IsR0FDdEIsVUFBQyxRQUE2QztJQUM5QyxPQUFBOztRQUNFLElBQUksMkJBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3hDLElBQUksMkJBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEVBQUU7Z0JBQ25ELDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDbEQ7WUFFRCxPQUFPLGlCQUFPLENBQUM7U0FDaEI7UUFDRCwyQkFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNuRCwyQkFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUMsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDOztZQUNyQixLQUF1QixJQUFBLEtBQUEsU0FBQSxLQUFLLENBQUMsS0FBSyxDQUFBLGdCQUFBLDRCQUFFO2dCQUEvQixJQUFNLFFBQVEsV0FBQTtnQkFDakIsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6Qjs7Ozs7Ozs7O1FBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFPLENBQUMsQ0FBQztJQUM3QixDQUFDO0FBaEJELENBZ0JDLENBQUM7QUFFSixtQkFBZTtJQUNiLElBQUksQ0FBRSxpQkFBZSxDQUFDLHNCQUFzQixFQUFFO1FBQzVDLGlCQUFPLENBQUMsc0JBQXNCLEdBQUcsc0JBQXNCLENBQUMsaUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3hGLGlCQUFPLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsaUJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzVFLElBQUEsOEJBQWtCLEVBQUMsaUJBQU8sRUFBRSx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDcEU7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQsIFRlc3RCZWRTdGF0aWMsIFRlc3RNb2R1bGVNZXRhZGF0YSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCBjb3JlRGVmaW5lUHJvcGVydHkgZnJvbSAnLi4vY29tbW9uL2NvcmUuZGVmaW5lLXByb3BlcnR5JztcbmltcG9ydCBuZ01vY2tzVW5pdmVyc2UgZnJvbSAnLi4vY29tbW9uL25nLW1vY2tzLXVuaXZlcnNlJztcblxuY29uc3QgaG9va3M6IHtcbiAgYWZ0ZXI6IEFycmF5PChvcmlnaW5hbDogVGVzdEJlZFN0YXRpY1sncmVzZXRUZXN0aW5nTW9kdWxlJ10pID0+IFRlc3RCZWRTdGF0aWNbJ3Jlc2V0VGVzdGluZ01vZHVsZSddPjtcbiAgYmVmb3JlOiBBcnJheTwob3JpZ2luYWw6IFRlc3RCZWRTdGF0aWNbJ2NvbmZpZ3VyZVRlc3RpbmdNb2R1bGUnXSkgPT4gVGVzdEJlZFN0YXRpY1snY29uZmlndXJlVGVzdGluZ01vZHVsZSddPjtcbn0gPSBuZ01vY2tzVW5pdmVyc2UuZ2xvYmFsLmdldCgnZmFzdGVyLWhvb2tzJykgfHwge1xuICBhZnRlcjogW10sXG4gIGJlZm9yZTogW10sXG59O1xubmdNb2Nrc1VuaXZlcnNlLmdsb2JhbC5zZXQoJ2Zhc3Rlci1ob29rcycsIGhvb2tzKTtcblxuY29uc3QgY29uZmlndXJlVGVzdGluZ01vZHVsZSA9XG4gIChvcmlnaW5hbDogVGVzdEJlZFN0YXRpY1snY29uZmlndXJlVGVzdGluZ01vZHVsZSddKTogVGVzdEJlZFN0YXRpY1snY29uZmlndXJlVGVzdGluZ01vZHVsZSddID0+XG4gIChtb2R1bGVEZWY6IFRlc3RNb2R1bGVNZXRhZGF0YSkgPT4ge1xuICAgIG5nTW9ja3NVbml2ZXJzZS5nbG9iYWwuc2V0KCdidWxsZXQ6Y3VzdG9taXplZCcsIHRydWUpO1xuXG4gICAgbGV0IGZpbmFsID0gb3JpZ2luYWw7XG4gICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBob29rcy5iZWZvcmUpIHtcbiAgICAgIGZpbmFsID0gY2FsbGJhY2soZmluYWwpO1xuICAgIH1cblxuICAgIHJldHVybiBmaW5hbC5jYWxsKFRlc3RCZWQsIG1vZHVsZURlZik7XG4gIH07XG5cbmNvbnN0IHJlc2V0VGVzdGluZ01vZHVsZSA9XG4gIChvcmlnaW5hbDogVGVzdEJlZFN0YXRpY1sncmVzZXRUZXN0aW5nTW9kdWxlJ10pOiBUZXN0QmVkU3RhdGljWydyZXNldFRlc3RpbmdNb2R1bGUnXSA9PlxuICAoKSA9PiB7XG4gICAgaWYgKG5nTW9ja3NVbml2ZXJzZS5nbG9iYWwuaGFzKCdidWxsZXQnKSkge1xuICAgICAgaWYgKG5nTW9ja3NVbml2ZXJzZS5nbG9iYWwuaGFzKCdidWxsZXQ6Y3VzdG9taXplZCcpKSB7XG4gICAgICAgIG5nTW9ja3NVbml2ZXJzZS5nbG9iYWwuc2V0KCdidWxsZXQ6cmVzZXQnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFRlc3RCZWQ7XG4gICAgfVxuICAgIG5nTW9ja3NVbml2ZXJzZS5nbG9iYWwuZGVsZXRlKCdidWxsZXQ6Y3VzdG9taXplZCcpO1xuICAgIG5nTW9ja3NVbml2ZXJzZS5nbG9iYWwuZGVsZXRlKCdidWxsZXQ6cmVzZXQnKTtcbiAgICBsZXQgZmluYWwgPSBvcmlnaW5hbDtcbiAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGhvb2tzLmFmdGVyKSB7XG4gICAgICBmaW5hbCA9IGNhbGxiYWNrKGZpbmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmluYWwuY2FsbChUZXN0QmVkKTtcbiAgfTtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBpZiAoIShUZXN0QmVkIGFzIGFueSkubmdNb2Nrc0Zhc3Rlckluc3RhbGxlZCkge1xuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSA9IGNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKTtcbiAgICBUZXN0QmVkLnJlc2V0VGVzdGluZ01vZHVsZSA9IHJlc2V0VGVzdGluZ01vZHVsZShUZXN0QmVkLnJlc2V0VGVzdGluZ01vZHVsZSk7XG4gICAgY29yZURlZmluZVByb3BlcnR5KFRlc3RCZWQsICduZ01vY2tzRmFzdGVySW5zdGFsbGVkJywgdHJ1ZSwgZmFsc2UpO1xuICB9XG5cbiAgcmV0dXJuIGhvb2tzO1xufTtcbiJdfQ==