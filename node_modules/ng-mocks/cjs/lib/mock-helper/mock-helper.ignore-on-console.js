"use strict";
// tslint:disable no-console
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var helper_mock_service_1 = __importDefault(require("../mock-service/helper.mock-service"));
var factory = function (propName) { return helper_mock_service_1.default.mockFunction("console." + propName); };
// Thanks Ivy, it does not throw an error and we have to use injector.
exports.default = (function () {
    var methods = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        methods[_i] = arguments[_i];
    }
    var backup = [];
    beforeAll(function () {
        var e_1, _a;
        if (methods.indexOf('log') === -1) {
            methods.push('log');
        }
        try {
            for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {
                var method = methods_1_1.value;
                backup.push([method, console[method]]);
                console[method] = factory(method);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (methods_1_1 && !methods_1_1.done && (_a = methods_1.return)) _a.call(methods_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    afterAll(function () {
        var e_2, _a;
        try {
            for (var backup_1 = __values(backup), backup_1_1 = backup_1.next(); !backup_1_1.done; backup_1_1 = backup_1.next()) {
                var _b = __read(backup_1_1.value, 2), method = _b[0], implementation = _b[1];
                console[method] = implementation;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (backup_1_1 && !backup_1_1.done && (_a = backup_1.return)) _a.call(backup_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        backup.splice(0, backup.length);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuaWdub3JlLW9uLWNvbnNvbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1oZWxwZXIvbW9jay1oZWxwZXIuaWdub3JlLW9uLWNvbnNvbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUE0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFNUIsNEZBQW9FO0FBRXBFLElBQU0sT0FBTyxHQUFHLFVBQUMsUUFBZ0IsSUFBSyxPQUFBLDZCQUFpQixDQUFDLFlBQVksQ0FBQyxhQUFXLFFBQVUsQ0FBQyxFQUFyRCxDQUFxRCxDQUFDO0FBRTVGLHNFQUFzRTtBQUN0RSxtQkFBZTtJQUFDLGlCQUF1QztTQUF2QyxVQUF1QyxFQUF2QyxxQkFBdUMsRUFBdkMsSUFBdUM7UUFBdkMsNEJBQXVDOztJQUNyRCxJQUFNLE1BQU0sR0FBdUMsRUFBRSxDQUFDO0lBRXRELFNBQVMsQ0FBQzs7UUFDUixJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNyQjs7WUFDRCxLQUFxQixJQUFBLFlBQUEsU0FBQSxPQUFPLENBQUEsZ0NBQUEscURBQUU7Z0JBQXpCLElBQU0sTUFBTSxvQkFBQTtnQkFDZixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFVLENBQUM7YUFDNUM7Ozs7Ozs7OztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDOzs7WUFDUCxLQUF1QyxJQUFBLFdBQUEsU0FBQSxNQUFNLENBQUEsOEJBQUEsa0RBQUU7Z0JBQXBDLElBQUEsS0FBQSwyQkFBd0IsRUFBdkIsTUFBTSxRQUFBLEVBQUUsY0FBYyxRQUFBO2dCQUNoQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsY0FBYyxDQUFDO2FBQ2xDOzs7Ozs7Ozs7UUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZSBuby1jb25zb2xlXG5cbmltcG9ydCBoZWxwZXJNb2NrU2VydmljZSBmcm9tICcuLi9tb2NrLXNlcnZpY2UvaGVscGVyLm1vY2stc2VydmljZSc7XG5cbmNvbnN0IGZhY3RvcnkgPSAocHJvcE5hbWU6IHN0cmluZykgPT4gaGVscGVyTW9ja1NlcnZpY2UubW9ja0Z1bmN0aW9uKGBjb25zb2xlLiR7cHJvcE5hbWV9YCk7XG5cbi8vIFRoYW5rcyBJdnksIGl0IGRvZXMgbm90IHRocm93IGFuIGVycm9yIGFuZCB3ZSBoYXZlIHRvIHVzZSBpbmplY3Rvci5cbmV4cG9ydCBkZWZhdWx0ICguLi5tZXRob2RzOiBBcnJheTxrZXlvZiB0eXBlb2YgY29uc29sZT4pOiB2b2lkID0+IHtcbiAgY29uc3QgYmFja3VwOiBBcnJheTxba2V5b2YgdHlwZW9mIGNvbnNvbGUsIGFueV0+ID0gW107XG5cbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBpZiAobWV0aG9kcy5pbmRleE9mKCdsb2cnKSA9PT0gLTEpIHtcbiAgICAgIG1ldGhvZHMucHVzaCgnbG9nJyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIG1ldGhvZHMpIHtcbiAgICAgIGJhY2t1cC5wdXNoKFttZXRob2QsIGNvbnNvbGVbbWV0aG9kXV0pO1xuICAgICAgY29uc29sZVttZXRob2RdID0gZmFjdG9yeShtZXRob2QpIGFzIG5ldmVyO1xuICAgIH1cbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGZvciAoY29uc3QgW21ldGhvZCwgaW1wbGVtZW50YXRpb25dIG9mIGJhY2t1cCkge1xuICAgICAgY29uc29sZVttZXRob2RdID0gaW1wbGVtZW50YXRpb247XG4gICAgfVxuICAgIGJhY2t1cC5zcGxpY2UoMCwgYmFja3VwLmxlbmd0aCk7XG4gIH0pO1xufTtcbiJdfQ==