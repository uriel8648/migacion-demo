"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_helpers_1 = require("../common/core.helpers");
var core_reflect_module_resolve_1 = __importDefault(require("../common/core.reflect.module-resolve"));
var func_get_provider_1 = __importDefault(require("../common/func.get-provider"));
var func_is_ng_def_1 = require("../common/func.is-ng-def");
var func_is_ng_injection_token_1 = require("../common/func.is-ng-injection-token");
var func_is_ng_module_def_with_providers_1 = require("../common/func.is-ng-module-def-with-providers");
var ng_mocks_universe_1 = __importDefault(require("../common/ng-mocks-universe"));
var mock_component_1 = require("../mock-component/mock-component");
var mock_directive_1 = require("../mock-directive/mock-directive");
var mock_module_1 = require("../mock-module/mock-module");
var mock_pipe_1 = require("../mock-pipe/mock-pipe");
var mock_provider_1 = __importDefault(require("../mock-service/mock-provider"));
var skipDef = function (def, skip, exclude) {
    if (skip.has(def)) {
        return true;
    }
    skip.add(def);
    return exclude.has(def);
};
var createMetaHandler = function (optional, proto, imports, declarations, providers) {
    var def = optional.get(proto) || proto;
    if ((0, func_is_ng_def_1.isNgDef)(def, 'm')) {
        imports.push(def);
    }
    else if ((0, func_is_ng_def_1.isNgDef)(def, 'c') || (0, func_is_ng_def_1.isNgDef)(def, 'd')) {
        declarations.push(def);
    }
    else if ((0, func_is_ng_def_1.isNgDef)(def, 'p')) {
        declarations.push(def);
        providers.push(def);
    }
    else if (!(0, func_is_ng_injection_token_1.isNgInjectionToken)(def)) {
        providers.push(def);
    }
};
var createMeta = function (_a) {
    var e_1, _b;
    var keep = _a.keep, skip = _a.skip, optional = _a.optional, exclude = _a.exclude, imports = _a.imports, declarations = _a.declarations, providers = _a.providers;
    try {
        for (var keep_1 = __values(keep), keep_1_1 = keep_1.next(); !keep_1_1.done; keep_1_1 = keep_1.next()) {
            var proto = keep_1_1.value;
            if (skip.has(proto) || exclude.has(proto) || optional.has(proto)) {
                continue;
            }
            createMetaHandler(optional, proto, imports, declarations, providers);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keep_1_1 && !keep_1_1.done && (_b = keep_1.return)) _b.call(keep_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return { declarations: declarations, imports: imports, providers: providers };
};
var typeMap = [
    ['m', 'module'],
    ['c', 'component'],
    ['d', 'directive'],
    ['p', 'pipe'],
];
var getType = function (def, keep) {
    var e_2, _a;
    if ((0, func_is_ng_module_def_with_providers_1.isNgModuleDefWithProviders)(def)) {
        return 'module-with-providers';
    }
    try {
        for (var typeMap_1 = __values(typeMap), typeMap_1_1 = typeMap_1.next(); !typeMap_1_1.done; typeMap_1_1 = typeMap_1.next()) {
            var _b = __read(typeMap_1_1.value, 2), flag = _b[0], value = _b[1];
            if ((0, func_is_ng_def_1.isNgDef)(def, flag)) {
                return flag === 'm' && keep.has(def) ? value + "-keep" : value;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (typeMap_1_1 && !typeMap_1_1.done && (_a = typeMap_1.return)) _a.call(typeMap_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return '';
};
var handleModuleWithProviders = function (data, def) {
    if (data.skip.has(def.ngModule)) {
        return;
    }
    data.skip.add(def.ngModule);
    if (data.exclude.has(def.ngModule)) {
        return;
    }
    data.imports.push(data.keep.has(def.ngModule) ? def : (0, mock_module_1.MockModule)(def));
};
var handleDeclaration = function (data, def, callback, bucket) {
    if (skipDef(def, data.skip, data.exclude)) {
        return;
    }
    bucket.push(data.keep.has(def) ? def : callback(def));
};
var handleDestructuring = function (data, def, callback) {
    var e_3, _a, e_4, _b;
    if (skipDef(def, data.skip, data.exclude)) {
        return;
    }
    var meta = (0, core_reflect_module_resolve_1.default)(def);
    try {
        for (var _c = __values((0, core_helpers_1.flatten)([meta.declarations, meta.imports])), _d = _c.next(); !_d.done; _d = _c.next()) {
            var toMock = _d.value;
            callback(data, toMock);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_3) throw e_3.error; }
    }
    try {
        for (var _e = __values(meta.providers ? (0, core_helpers_1.flatten)(meta.providers) : []), _f = _e.next(); !_f.done; _f = _e.next()) {
            var toMock = _f.value;
            resolveProvider(data, toMock);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_4) throw e_4.error; }
    }
};
var resolveProvider = function (_a, def) {
    var skip = _a.skip, keep = _a.keep, providers = _a.providers, exclude = _a.exclude;
    var provider = (0, func_get_provider_1.default)(def);
    skip.add(provider);
    if (exclude.has(provider)) {
        return;
    }
    var providerDef = keep.has(provider) ? def : (0, mock_provider_1.default)(def);
    if (providerDef) {
        providers.push(providerDef);
    }
};
var resolveMap = {
    component: mock_component_1.MockComponent,
    directive: mock_directive_1.MockDirective,
    pipe: mock_pipe_1.MockPipe,
};
var resolveHandler = function (data, type, def, skipDestruction) {
    if (type === 'module-with-providers') {
        handleModuleWithProviders(data, def);
    }
    else if (type === 'module-keep') {
        handleDeclaration(data, def, mock_module_1.MockModule, data.imports); // MockModule will not be called because the def is kept.
    }
    else if (type === 'module' && skipDestruction) {
        handleDeclaration(data, def, mock_module_1.MockModule, data.imports);
    }
    else if (type === 'module') {
        handleDestructuring(data, def, resolve);
    }
    else if (resolveMap[type]) {
        handleDeclaration(data, def, resolveMap[type], data.declarations);
    }
    else {
        resolveProvider(data, def);
    }
};
var resolve = function (data, proto, skipDestruction) {
    if (skipDestruction === void 0) { skipDestruction = true; }
    if (!proto) {
        return;
    }
    var type = getType(proto, data.keep);
    var def;
    // an attempt to replace declarations.
    if (type !== 'module-with-providers') {
        var value = data.optional.get(proto);
        if (value && value !== proto) {
            def = value;
            data.keep.add(def);
        }
    }
    if (!def) {
        def = proto;
    }
    resolveHandler(data, type, def, skipDestruction);
};
var generateDataWithUniverse = function (keep, mock, exclude, optional) {
    var e_5, _a;
    try {
        for (var _b = __values((0, core_helpers_1.mapKeys)(ng_mocks_universe_1.default.getDefaults())), _c = _b.next(); !_c.done; _c = _b.next()) {
            var k = _c.value;
            var v = ng_mocks_universe_1.default.getBuildDeclaration(k);
            if (keep.has(k) || mock.has(k) || exclude.has(k)) {
                continue;
            }
            optional.set(k, v);
            if (v === null) {
                exclude.add(k);
            }
            else if (v === undefined) {
                mock.add(k);
            }
            else if (k === v) {
                keep.add(k);
            }
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_5) throw e_5.error; }
    }
};
var generateData = function (protoKeep, protoMock, protoExclude) {
    var keep = new Set((0, core_helpers_1.flatten)(protoKeep || []));
    var mock = new Set((0, core_helpers_1.flatten)(protoMock || []));
    var exclude = new Set((0, core_helpers_1.flatten)(protoExclude || []));
    var optional = new Map();
    generateDataWithUniverse(keep, mock, exclude, optional);
    return {
        declarations: [],
        exclude: exclude,
        imports: [],
        keep: keep,
        mock: mock,
        optional: optional,
        providers: [],
        skip: new Set(),
    };
};
exports.default = (function (keep, mock, exclude) {
    var e_6, _a, e_7, _b, e_8, _c;
    if (mock === void 0) { mock = null; }
    if (exclude === void 0) { exclude = null; }
    var data = generateData(keep, mock, exclude);
    var resolutions = new Map();
    ng_mocks_universe_1.default.config.set('ngMocksDepsResolution', resolutions);
    try {
        for (var _d = __values((0, core_helpers_1.mapValues)(data.keep)), _e = _d.next(); !_e.done; _e = _d.next()) {
            var mockDef = _e.value;
            resolutions.set(mockDef, 'keep');
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_6) throw e_6.error; }
    }
    try {
        for (var _f = __values((0, core_helpers_1.mapValues)(data.exclude)), _g = _f.next(); !_g.done; _g = _f.next()) {
            var mockDef = _g.value;
            resolutions.set(mockDef, 'exclude');
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
        }
        finally { if (e_7) throw e_7.error; }
    }
    ng_mocks_universe_1.default.config.set('mockNgDefResolver', new Map());
    try {
        for (var _h = __values((0, core_helpers_1.mapValues)(data.mock)), _j = _h.next(); !_j.done; _j = _h.next()) {
            var def = _j.value;
            resolutions.set(def, 'mock');
            if (data.optional.has(def)) {
                continue;
            }
            resolve(data, def, false);
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
        }
        finally { if (e_8) throw e_8.error; }
    }
    var meta = createMeta(data);
    ng_mocks_universe_1.default.config.delete('mockNgDefResolver');
    ng_mocks_universe_1.default.config.delete('ngMocksDepsResolution');
    return meta;
});
//# sourceMappingURL=data:application/json;base64,