"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var func_is_mock_1 = __importDefault(require("../../common/func.is-mock"));
var getValVcr = function (entryPoint) {
    var e_1, _a;
    var result = [];
    try {
        for (var _b = __values(entryPoint.__ngMocksConfig.queryScanKeys || /* istanbul ignore next */ []), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var value = entryPoint[key];
            var vcr = entryPoint["__ngMocksVcr_" + key];
            var scanValue = value instanceof core_1.QueryList ? value.toArray() : [value];
            var scanVcr = vcr instanceof core_1.QueryList ? vcr.toArray() : [vcr];
            for (var index = 0; index < scanValue.length; index += 1) {
                result.push([scanValue[index], scanVcr[index]]);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
};
var handleDirective = function (entryPoint, isExpectedTemplate, callback) {
    return (!!entryPoint.__template &&
        !!entryPoint.__vcr &&
        isExpectedTemplate(entryPoint.__template) &&
        callback(entryPoint.__vcr, entryPoint.__template));
};
var isRightTemplate = function (localVcr, localValue, isExpectedTemplate) {
    return !!localVcr && localValue instanceof core_1.TemplateRef && isExpectedTemplate(localValue);
};
var findDeep = function (entryPoint, isExpectedTemplate, callback) {
    var e_2, _a;
    if (!(0, func_is_mock_1.default)(entryPoint)) {
        throw new Error('Only instances of mock declarations are accepted');
    }
    // structural directive
    if (handleDirective(entryPoint, isExpectedTemplate, callback)) {
        return true;
    }
    try {
        for (var _b = __values(getValVcr(entryPoint)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), localValue = _d[0], localVcr = _d[1];
            if ((0, func_is_mock_1.default)(localValue) && findDeep(localValue, isExpectedTemplate, callback)) {
                return true;
            }
            if (isRightTemplate(localVcr, localValue, isExpectedTemplate)) {
                return callback(localVcr, localValue);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return false;
};
exports.default = (function () { return findDeep; })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5maW5kLWRlZXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1oZWxwZXIvcmVuZGVyL2Z1bmMuZmluZC1kZWVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsc0NBQXlFO0FBRXpFLDJFQUFtRDtBQUduRCxJQUFNLFNBQVMsR0FBRyxVQUFDLFVBQXNCOztJQUN2QyxJQUFNLE1BQU0sR0FBbUMsRUFBRSxDQUFDOztRQUVsRCxLQUFrQixJQUFBLEtBQUEsU0FBQSxVQUFVLENBQUMsZUFBZSxDQUFDLGFBQWEsSUFBSSwwQkFBMEIsQ0FBQyxFQUFFLENBQUEsZ0JBQUEsNEJBQUU7WUFBeEYsSUFBTSxHQUFHLFdBQUE7WUFDWixJQUFNLEtBQUssR0FBSSxVQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZDLElBQU0sR0FBRyxHQUFJLFVBQWtCLENBQUMsa0JBQWdCLEdBQUssQ0FBQyxDQUFDO1lBRXZELElBQU0sU0FBUyxHQUFHLEtBQUssWUFBWSxnQkFBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekUsSUFBTSxPQUFPLEdBQUcsR0FBRyxZQUFZLGdCQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVqRSxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxLQUFLLElBQUksQ0FBQyxFQUFFO2dCQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDakQ7U0FDRjs7Ozs7Ozs7O0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBRUYsSUFBTSxlQUFlLEdBQUcsVUFDdEIsVUFHQyxFQUNELGtCQUFzRCxFQUN0RCxRQUFtRTtJQUVuRSxPQUFPLENBQ0wsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVO1FBQ3ZCLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSztRQUNsQixrQkFBa0IsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO1FBQ3pDLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FDbEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLElBQU0sZUFBZSxHQUFHLFVBQ3RCLFFBQXNDLEVBQ3RDLFVBQWUsRUFDZixrQkFBc0Q7SUFFdEQsT0FBTyxDQUFDLENBQUMsUUFBUSxJQUFJLFVBQVUsWUFBWSxrQkFBVyxJQUFJLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzNGLENBQUMsQ0FBQztBQUVGLElBQU0sUUFBUSxHQUFHLFVBQ2YsVUFBa0IsRUFDbEIsa0JBQXNELEVBQ3RELFFBQW1FOztJQUVuRSxJQUFJLENBQUMsSUFBQSxzQkFBVSxFQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztLQUNyRTtJQUVELHVCQUF1QjtJQUN2QixJQUFJLGVBQWUsQ0FBQyxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLEVBQUU7UUFDN0QsT0FBTyxJQUFJLENBQUM7S0FDYjs7UUFFRCxLQUFxQyxJQUFBLEtBQUEsU0FBQSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7WUFBakQsSUFBQSxLQUFBLG1CQUFzQixFQUFyQixVQUFVLFFBQUEsRUFBRSxRQUFRLFFBQUE7WUFDOUIsSUFBSSxJQUFBLHNCQUFVLEVBQUssVUFBVSxDQUFDLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDcEYsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELElBQUksZUFBZSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLENBQUMsRUFBRTtnQkFDN0QsT0FBTyxRQUFRLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQ3ZDO1NBQ0Y7Ozs7Ozs7OztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBRUYsa0JBQWUsQ0FBQyxjQUF1QixPQUFBLFFBQVEsRUFBUixDQUFRLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgZnVuY0lzTW9jayBmcm9tICcuLi8uLi9jb21tb24vZnVuYy5pcy1tb2NrJztcbmltcG9ydCB7IE1vY2tDb25maWcgfSBmcm9tICcuLi8uLi9jb21tb24vbW9jayc7XG5cbmNvbnN0IGdldFZhbFZjciA9IChlbnRyeVBvaW50OiBNb2NrQ29uZmlnKTogQXJyYXk8W2FueSwgVmlld0NvbnRhaW5lclJlZl0+ID0+IHtcbiAgY29uc3QgcmVzdWx0OiBBcnJheTxbYW55LCBWaWV3Q29udGFpbmVyUmVmXT4gPSBbXTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBlbnRyeVBvaW50Ll9fbmdNb2Nrc0NvbmZpZy5xdWVyeVNjYW5LZXlzIHx8IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIFtdKSB7XG4gICAgY29uc3QgdmFsdWUgPSAoZW50cnlQb2ludCBhcyBhbnkpW2tleV07XG4gICAgY29uc3QgdmNyID0gKGVudHJ5UG9pbnQgYXMgYW55KVtgX19uZ01vY2tzVmNyXyR7a2V5fWBdO1xuXG4gICAgY29uc3Qgc2NhblZhbHVlID0gdmFsdWUgaW5zdGFuY2VvZiBRdWVyeUxpc3QgPyB2YWx1ZS50b0FycmF5KCkgOiBbdmFsdWVdO1xuICAgIGNvbnN0IHNjYW5WY3IgPSB2Y3IgaW5zdGFuY2VvZiBRdWVyeUxpc3QgPyB2Y3IudG9BcnJheSgpIDogW3Zjcl07XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc2NhblZhbHVlLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgcmVzdWx0LnB1c2goW3NjYW5WYWx1ZVtpbmRleF0sIHNjYW5WY3JbaW5kZXhdXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmNvbnN0IGhhbmRsZURpcmVjdGl2ZSA9IChcbiAgZW50cnlQb2ludDoge1xuICAgIF9fdGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIF9fdmNyPzogVmlld0NvbnRhaW5lclJlZjtcbiAgfSxcbiAgaXNFeHBlY3RlZFRlbXBsYXRlOiAodHBsOiBUZW1wbGF0ZVJlZjxhbnk+KSA9PiBib29sZWFuLFxuICBjYWxsYmFjazogKHZjcjogVmlld0NvbnRhaW5lclJlZiwgdHBsOiBUZW1wbGF0ZVJlZjxhbnk+KSA9PiBib29sZWFuLFxuKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiAoXG4gICAgISFlbnRyeVBvaW50Ll9fdGVtcGxhdGUgJiZcbiAgICAhIWVudHJ5UG9pbnQuX192Y3IgJiZcbiAgICBpc0V4cGVjdGVkVGVtcGxhdGUoZW50cnlQb2ludC5fX3RlbXBsYXRlKSAmJlxuICAgIGNhbGxiYWNrKGVudHJ5UG9pbnQuX192Y3IsIGVudHJ5UG9pbnQuX190ZW1wbGF0ZSlcbiAgKTtcbn07XG5cbmNvbnN0IGlzUmlnaHRUZW1wbGF0ZSA9IChcbiAgbG9jYWxWY3I6IFZpZXdDb250YWluZXJSZWYgfCB1bmRlZmluZWQsXG4gIGxvY2FsVmFsdWU6IGFueSxcbiAgaXNFeHBlY3RlZFRlbXBsYXRlOiAodHBsOiBUZW1wbGF0ZVJlZjxhbnk+KSA9PiBib29sZWFuLFxuKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiAhIWxvY2FsVmNyICYmIGxvY2FsVmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZiAmJiBpc0V4cGVjdGVkVGVtcGxhdGUobG9jYWxWYWx1ZSk7XG59O1xuXG5jb25zdCBmaW5kRGVlcCA9IChcbiAgZW50cnlQb2ludDogb2JqZWN0LFxuICBpc0V4cGVjdGVkVGVtcGxhdGU6ICh0cGw6IFRlbXBsYXRlUmVmPGFueT4pID0+IGJvb2xlYW4sXG4gIGNhbGxiYWNrOiAodmNyOiBWaWV3Q29udGFpbmVyUmVmLCB0cGw6IFRlbXBsYXRlUmVmPGFueT4pID0+IGJvb2xlYW4sXG4pOiBib29sZWFuID0+IHtcbiAgaWYgKCFmdW5jSXNNb2NrKGVudHJ5UG9pbnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IGluc3RhbmNlcyBvZiBtb2NrIGRlY2xhcmF0aW9ucyBhcmUgYWNjZXB0ZWQnKTtcbiAgfVxuXG4gIC8vIHN0cnVjdHVyYWwgZGlyZWN0aXZlXG4gIGlmIChoYW5kbGVEaXJlY3RpdmUoZW50cnlQb2ludCwgaXNFeHBlY3RlZFRlbXBsYXRlLCBjYWxsYmFjaykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZvciAoY29uc3QgW2xvY2FsVmFsdWUsIGxvY2FsVmNyXSBvZiBnZXRWYWxWY3IoZW50cnlQb2ludCkpIHtcbiAgICBpZiAoZnVuY0lzTW9jazx7fT4obG9jYWxWYWx1ZSkgJiYgZmluZERlZXAobG9jYWxWYWx1ZSwgaXNFeHBlY3RlZFRlbXBsYXRlLCBjYWxsYmFjaykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNSaWdodFRlbXBsYXRlKGxvY2FsVmNyLCBsb2NhbFZhbHVlLCBpc0V4cGVjdGVkVGVtcGxhdGUpKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobG9jYWxWY3IsIGxvY2FsVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICgoKTogdHlwZW9mIGZpbmREZWVwID0+IGZpbmREZWVwKSgpO1xuIl19