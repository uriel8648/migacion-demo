"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var nested_check_1 = __importDefault(require("../crawl/nested-check"));
var mock_helper_find_1 = __importDefault(require("../find/mock-helper.find"));
var func_get_last_fixture_1 = __importDefault(require("../func.get-last-fixture"));
var func_parse_find_args_1 = __importDefault(require("../func.parse-find-args"));
var func_parse_find_args_name_1 = __importDefault(require("../func.parse-find-args-name"));
var detect_crawler_1 = __importDefault(require("./detect-crawler"));
var detect_template_ref_1 = __importDefault(require("./detect-template-ref"));
var func_is_valid_template_ref_selector_1 = __importDefault(require("./func.is-valid-template-ref-selector"));
var defaultNotFoundValue = {}; // simulating Symbol
exports.default = (function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var _a = __read((0, func_parse_find_args_1.default)(args, func_is_valid_template_ref_selector_1.default, defaultNotFoundValue), 3), el = _a[0], sel = _a[1], notFoundValue = _a[2];
    var result = [];
    var detector = (0, detect_crawler_1.default)(sel);
    (0, nested_check_1.default)((0, mock_helper_find_1.default)((0, func_get_last_fixture_1.default)(), el, undefined), undefined, (0, detect_template_ref_1.default)(result, detector, 1));
    if (result.length) {
        return result[0];
    }
    if (notFoundValue !== defaultNotFoundValue) {
        return notFoundValue;
    }
    throw new Error("Cannot find a TemplateRef via ngMocks.findTemplateRef(" + (0, func_parse_find_args_name_1.default)(sel) + ")");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuZmluZC10ZW1wbGF0ZS1yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1oZWxwZXIvdGVtcGxhdGUtcmVmL21vY2staGVscGVyLmZpbmQtdGVtcGxhdGUtcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLHVFQUFnRDtBQUNoRCw4RUFBc0Q7QUFDdEQsbUZBQTBEO0FBQzFELGlGQUF3RDtBQUN4RCwyRkFBaUU7QUFFakUsb0VBQTZDO0FBQzdDLDhFQUFzRDtBQUN0RCw4R0FBbUY7QUFFbkYsSUFBTSxvQkFBb0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxvQkFBb0I7QUFFckQsbUJBQWU7SUFBQyxjQUFjO1NBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztRQUFkLHlCQUFjOztJQUN0QixJQUFBLEtBQUEsT0FBMkIsSUFBQSw4QkFBaUIsRUFBQyxJQUFJLEVBQUUsNkNBQThCLEVBQUUsb0JBQW9CLENBQUMsSUFBQSxFQUF2RyxFQUFFLFFBQUEsRUFBRSxHQUFHLFFBQUEsRUFBRSxhQUFhLFFBQWlGLENBQUM7SUFFL0csSUFBTSxNQUFNLEdBQTRCLEVBQUUsQ0FBQztJQUMzQyxJQUFNLFFBQVEsR0FBRyxJQUFBLHdCQUFhLEVBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEMsSUFBQSxzQkFBVyxFQUFDLElBQUEsMEJBQWMsRUFBQyxJQUFBLCtCQUFrQixHQUFFLEVBQUUsRUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFBLDZCQUFpQixFQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwSCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7UUFDakIsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7SUFDRCxJQUFJLGFBQWEsS0FBSyxvQkFBb0IsRUFBRTtRQUMxQyxPQUFPLGFBQWEsQ0FBQztLQUN0QjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsMkRBQXlELElBQUEsbUNBQXFCLEVBQUMsR0FBRyxDQUFDLE1BQUcsQ0FBQyxDQUFDO0FBQzFHLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCBuZXN0ZWRDaGVjayBmcm9tICcuLi9jcmF3bC9uZXN0ZWQtY2hlY2snO1xuaW1wb3J0IG1vY2tIZWxwZXJGaW5kIGZyb20gJy4uL2ZpbmQvbW9jay1oZWxwZXIuZmluZCc7XG5pbXBvcnQgZnVuY0dldExhc3RGaXh0dXJlIGZyb20gJy4uL2Z1bmMuZ2V0LWxhc3QtZml4dHVyZSc7XG5pbXBvcnQgZnVuY1BhcnNlRmluZEFyZ3MgZnJvbSAnLi4vZnVuYy5wYXJzZS1maW5kLWFyZ3MnO1xuaW1wb3J0IGZ1bmNQYXJzZUZpbmRBcmdzTmFtZSBmcm9tICcuLi9mdW5jLnBhcnNlLWZpbmQtYXJncy1uYW1lJztcblxuaW1wb3J0IGRldGVjdENyYXdsZXIgZnJvbSAnLi9kZXRlY3QtY3Jhd2xlcic7XG5pbXBvcnQgZGV0ZWN0VGVtcGxhdGVSZWYgZnJvbSAnLi9kZXRlY3QtdGVtcGxhdGUtcmVmJztcbmltcG9ydCBmdW5jSXNWYWxpZFRlbXBsYXRlUmVmU2VsZWN0b3IgZnJvbSAnLi9mdW5jLmlzLXZhbGlkLXRlbXBsYXRlLXJlZi1zZWxlY3Rvcic7XG5cbmNvbnN0IGRlZmF1bHROb3RGb3VuZFZhbHVlID0ge307IC8vIHNpbXVsYXRpbmcgU3ltYm9sXG5cbmV4cG9ydCBkZWZhdWx0ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICBjb25zdCBbZWwsIHNlbCwgbm90Rm91bmRWYWx1ZV0gPSBmdW5jUGFyc2VGaW5kQXJncyhhcmdzLCBmdW5jSXNWYWxpZFRlbXBsYXRlUmVmU2VsZWN0b3IsIGRlZmF1bHROb3RGb3VuZFZhbHVlKTtcblxuICBjb25zdCByZXN1bHQ6IEFycmF5PFRlbXBsYXRlUmVmPGFueT4+ID0gW107XG4gIGNvbnN0IGRldGVjdG9yID0gZGV0ZWN0Q3Jhd2xlcihzZWwpO1xuICBuZXN0ZWRDaGVjayhtb2NrSGVscGVyRmluZChmdW5jR2V0TGFzdEZpeHR1cmUoKSwgZWwsIHVuZGVmaW5lZCksIHVuZGVmaW5lZCwgZGV0ZWN0VGVtcGxhdGVSZWYocmVzdWx0LCBkZXRlY3RvciwgMSkpO1xuICBpZiAocmVzdWx0Lmxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHRbMF07XG4gIH1cbiAgaWYgKG5vdEZvdW5kVmFsdWUgIT09IGRlZmF1bHROb3RGb3VuZFZhbHVlKSB7XG4gICAgcmV0dXJuIG5vdEZvdW5kVmFsdWU7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kIGEgVGVtcGxhdGVSZWYgdmlhIG5nTW9ja3MuZmluZFRlbXBsYXRlUmVmKCR7ZnVuY1BhcnNlRmluZEFyZ3NOYW1lKHNlbCl9KWApO1xufTtcbiJdfQ==