declare const _default: {
    autoSpy: (type: import("../..").CustomMockFunction | "reset" | "jasmine" | "jest" | "default") => void;
    change: (selector: import("../..").DebugNodeSelector, value: any) => void;
    click: (selector: import("../..").DebugNodeSelector, payload?: object | undefined) => void;
    config: (config: {
        mockRenderCacheSize?: number | null;
        onMockInstanceRestoreNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;
        onTestBedFlushNeed?: 'throw' | 'warn' | 'i-know-but-disable' | null;
    }) => void;
    crawl: (sel: import("../..").DebugNodeSelector, callback: (node: import("@angular/core").DebugNode) => boolean | void, includeTextNode?: boolean) => void;
    defaultMock: <T>(def: string | import("../..").AnyType<T> | import("@angular/core").InjectionToken<T> | (string | import("../..").AnyType<T> | import("@angular/core").InjectionToken<T>)[], callback?: ((instance: T | undefined, injector: import("@angular/core").Injector) => void | Partial<T>) | undefined) => void;
    event: (event: string, init?: EventInit | undefined, overrides?: Partial<Event | UIEvent | KeyboardEvent | MouseEvent | TouchEvent> | undefined) => CustomEvent<any>;
    faster: () => void;
    find: (...args: any[]) => import("@angular/core").DebugElement;
    findAll: (...args: any[]) => import("@angular/core").DebugElement[];
    findInstance: (...args: any[]) => any;
    findInstances: <T_1>(...args: any[]) => T_1[];
    findTemplateRef: (...args: any[]) => any;
    findTemplateRefs: (...args: any[]) => import("@angular/core").TemplateRef<any>[];
    flushTestBed: () => void;
    formatHtml: (html: any, outer?: boolean) => any;
    formatText: (html: any, outer?: boolean) => any;
    get: <T_2>(...args: any[]) => any;
    globalExclude: (source: import("../..").AnyType<any> | import("@angular/core").InjectionToken<any>) => void;
    globalKeep: (source: import("../..").AnyType<any> | import("@angular/core").InjectionToken<any>) => void;
    globalMock: (source: import("../..").AnyType<any> | import("@angular/core").InjectionToken<any>) => void;
    globalReplace: (source: import("../..").AnyType<any>, destination: import("../..").AnyType<any>) => void;
    globalWipe: (source: import("../..").AnyType<any> | import("@angular/core").InjectionToken<any>) => void;
    guts: (keep: any, mock?: any, exclude?: any) => import("@angular/core/testing").TestModuleMetadata;
    hide: (instance: object, param?: object | undefined) => void;
    ignoreOnConsole: (...methods: (keyof Console)[]) => void;
    input: (...args: any[]) => any;
    output: (...args: any[]) => any;
    render: (instance: object, param: object, $implicit?: any, variables?: Record<string | number | symbol, any> | undefined) => void;
    reset: () => void;
    reveal: (...args: any[]) => any;
    revealAll: (...args: any[]) => any[];
    stub: <T_3 = import("../..").MockedFunction>(instance: any, override: any, style?: "get" | "set" | undefined) => T_3;
    stubMember: <T_4 extends object>(instance: T_4, key: any, value: any, encapsulation?: "get" | "set" | undefined) => any;
    throwOnConsole: (...methods: (keyof Console)[]) => void;
    touch: (sel: import("../..").DebugNodeSelector | import("@angular/core").DebugElement) => void;
    trigger: (selector: import("../..").DebugNodeSelector | import("@angular/core").DebugElement | HTMLElement, eventName: string | Event | UIEvent | KeyboardEvent | MouseEvent | TouchEvent, payload?: Partial<Event | UIEvent | KeyboardEvent | MouseEvent | TouchEvent> | undefined) => void;
};
export default _default;
