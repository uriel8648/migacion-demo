"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_form_1 = __importDefault(require("../../common/core.form"));
var core_injector_1 = __importDefault(require("../../common/core.injector"));
var message = [
    'Cannot find ControlValueAccessor on the element.',
    'If it is a mock input with [formControlName],',
    'you need either to avoid mocking ReactiveFormsModule',
    'or to avoid accessing the control in such a way,',
    'because this tests ReactiveFormsModule instead of own implementation.',
].join(' ');
exports.default = (function (el) {
    var ngControl = core_form_1.default && (0, core_injector_1.default)(core_form_1.default.NgControl, el.injector);
    var valueAccessor = ngControl === null || ngControl === void 0 ? void 0 : ngControl.valueAccessor;
    if (valueAccessor) {
        return valueAccessor;
    }
    var formControlDirective = core_form_1.default && (0, core_injector_1.default)(core_form_1.default.FormControlDirective, el.injector);
    if (formControlDirective === null || formControlDirective === void 0 ? void 0 : formControlDirective.form) {
        return formControlDirective.form;
    }
    var ngModel = core_form_1.default && (0, core_injector_1.default)(core_form_1.default.NgModel, el.injector);
    if (ngModel) {
        return ngModel;
    }
    throw new Error(message);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuYy5nZXQtdmNhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL21vY2staGVscGVyL2N2YS9mdW5jLmdldC12Y2EudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxxRUFBOEM7QUFDOUMsNkVBQXNEO0FBRXRELElBQU0sT0FBTyxHQUFHO0lBQ2Qsa0RBQWtEO0lBQ2xELCtDQUErQztJQUMvQyxzREFBc0Q7SUFDdEQsa0RBQWtEO0lBQ2xELHVFQUF1RTtDQUN4RSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUVaLG1CQUFlLFVBQUMsRUFBYTtJQUMzQixJQUFNLFNBQVMsR0FBRyxtQkFBUSxJQUFJLElBQUEsdUJBQVksRUFBQyxtQkFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUUsSUFBTSxhQUFhLEdBQUcsU0FBUyxhQUFULFNBQVMsdUJBQVQsU0FBUyxDQUFFLGFBQWEsQ0FBQztJQUMvQyxJQUFJLGFBQWEsRUFBRTtRQUNqQixPQUFPLGFBQWEsQ0FBQztLQUN0QjtJQUVELElBQU0sb0JBQW9CLEdBQUcsbUJBQVEsSUFBSSxJQUFBLHVCQUFZLEVBQUMsbUJBQVEsQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEcsSUFBSSxvQkFBb0IsYUFBcEIsb0JBQW9CLHVCQUFwQixvQkFBb0IsQ0FBRSxJQUFJLEVBQUU7UUFDOUIsT0FBTyxvQkFBb0IsQ0FBQyxJQUFJLENBQUM7S0FDbEM7SUFFRCxJQUFNLE9BQU8sR0FBRyxtQkFBUSxJQUFJLElBQUEsdUJBQVksRUFBQyxtQkFBUSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEUsSUFBSSxPQUFPLEVBQUU7UUFDWCxPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWdOb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCBjb3JlRm9ybSBmcm9tICcuLi8uLi9jb21tb24vY29yZS5mb3JtJztcbmltcG9ydCBjb3JlSW5qZWN0b3IgZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUuaW5qZWN0b3InO1xuXG5jb25zdCBtZXNzYWdlID0gW1xuICAnQ2Fubm90IGZpbmQgQ29udHJvbFZhbHVlQWNjZXNzb3Igb24gdGhlIGVsZW1lbnQuJyxcbiAgJ0lmIGl0IGlzIGEgbW9jayBpbnB1dCB3aXRoIFtmb3JtQ29udHJvbE5hbWVdLCcsXG4gICd5b3UgbmVlZCBlaXRoZXIgdG8gYXZvaWQgbW9ja2luZyBSZWFjdGl2ZUZvcm1zTW9kdWxlJyxcbiAgJ29yIHRvIGF2b2lkIGFjY2Vzc2luZyB0aGUgY29udHJvbCBpbiBzdWNoIGEgd2F5LCcsXG4gICdiZWNhdXNlIHRoaXMgdGVzdHMgUmVhY3RpdmVGb3Jtc01vZHVsZSBpbnN0ZWFkIG9mIG93biBpbXBsZW1lbnRhdGlvbi4nLFxuXS5qb2luKCcgJyk7XG5cbmV4cG9ydCBkZWZhdWx0IChlbDogRGVidWdOb2RlKTogUmVjb3JkPGtleW9mIGFueSwgYW55PiA9PiB7XG4gIGNvbnN0IG5nQ29udHJvbCA9IGNvcmVGb3JtICYmIGNvcmVJbmplY3Rvcihjb3JlRm9ybS5OZ0NvbnRyb2wsIGVsLmluamVjdG9yKTtcbiAgY29uc3QgdmFsdWVBY2Nlc3NvciA9IG5nQ29udHJvbD8udmFsdWVBY2Nlc3NvcjtcbiAgaWYgKHZhbHVlQWNjZXNzb3IpIHtcbiAgICByZXR1cm4gdmFsdWVBY2Nlc3NvcjtcbiAgfVxuXG4gIGNvbnN0IGZvcm1Db250cm9sRGlyZWN0aXZlID0gY29yZUZvcm0gJiYgY29yZUluamVjdG9yKGNvcmVGb3JtLkZvcm1Db250cm9sRGlyZWN0aXZlLCBlbC5pbmplY3Rvcik7XG4gIGlmIChmb3JtQ29udHJvbERpcmVjdGl2ZT8uZm9ybSkge1xuICAgIHJldHVybiBmb3JtQ29udHJvbERpcmVjdGl2ZS5mb3JtO1xuICB9XG5cbiAgY29uc3QgbmdNb2RlbCA9IGNvcmVGb3JtICYmIGNvcmVJbmplY3Rvcihjb3JlRm9ybS5OZ01vZGVsLCBlbC5pbmplY3Rvcik7XG4gIGlmIChuZ01vZGVsKSB7XG4gICAgcmV0dXJuIG5nTW9kZWw7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59O1xuIl19