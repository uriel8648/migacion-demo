"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_form_1 = __importDefault(require("../../common/core.form"));
var func_is_mock_control_value_accessor_1 = require("../../common/func.is-mock-control-value-accessor");
var mock_helper_trigger_1 = __importDefault(require("../events/mock-helper.trigger"));
var mock_helper_find_1 = __importDefault(require("../find/mock-helper.find"));
var func_get_last_fixture_1 = __importDefault(require("../func.get-last-fixture"));
var func_parse_find_args_name_1 = __importDefault(require("../func.parse-find-args-name"));
var func_get_vca_1 = __importDefault(require("./func.get-vca"));
// default html behavior
var triggerTouch = function (el) {
    (0, mock_helper_trigger_1.default)(el, 'focus');
    (0, mock_helper_trigger_1.default)(el, 'blur');
};
var handleKnown = function (valueAccessor) {
    if (core_form_1.default && valueAccessor instanceof core_form_1.default.AbstractControl) {
        valueAccessor.markAsTouched();
        return true;
    }
    if ((0, func_is_mock_control_value_accessor_1.isMockControlValueAccessor)(valueAccessor.instance)) {
        valueAccessor.instance.__simulateTouch();
        return true;
    }
    return false;
};
var hasListener = function (el) {
    return el.listeners.filter(function (listener) { return listener.name === 'focus' || listener.name === 'blur'; }).length > 0;
};
var keys = ['onTouched', '_onTouched', '_cvaOnTouch', '_markAsTouched', '_onTouchedCallback', 'onModelTouched'];
exports.default = (function (sel) {
    var e_1, _a;
    var el = (0, mock_helper_find_1.default)((0, func_get_last_fixture_1.default)(), sel, undefined);
    if (!el) {
        throw new Error("Cannot find an element via ngMocks.touch(" + (0, func_parse_find_args_name_1.default)(sel) + ")");
    }
    var valueAccessor = (0, func_get_vca_1.default)(el);
    if (handleKnown(valueAccessor) || hasListener(el)) {
        triggerTouch(el);
        return;
    }
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key = keys_1_1.value;
            if (typeof valueAccessor[key] === 'function') {
                valueAccessor[key]();
                return;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    throw new Error('Unsupported type of ControlValueAccessor');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIudG91Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25nLW1vY2tzL3NyYy9saWIvbW9jay1oZWxwZXIvY3ZhL21vY2staGVscGVyLnRvdWNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxxRUFBOEM7QUFFOUMsd0dBQThGO0FBQzlGLHNGQUE4RDtBQUM5RCw4RUFBc0Q7QUFDdEQsbUZBQTBEO0FBQzFELDJGQUFpRTtBQUVqRSxnRUFBd0M7QUFFeEMsd0JBQXdCO0FBQ3hCLElBQU0sWUFBWSxHQUFHLFVBQUMsRUFBZ0I7SUFDcEMsSUFBQSw2QkFBaUIsRUFBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0IsSUFBQSw2QkFBaUIsRUFBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBRUYsSUFBTSxXQUFXLEdBQUcsVUFBQyxhQUFrQjtJQUNyQyxJQUFJLG1CQUFRLElBQUksYUFBYSxZQUFZLG1CQUFRLENBQUMsZUFBZSxFQUFFO1FBQ2pFLGFBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUU5QixPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsSUFBSSxJQUFBLGdFQUEwQixFQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUN0RCxhQUFhLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXpDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLElBQU0sV0FBVyxHQUFHLFVBQUMsRUFBZ0I7SUFDbkMsT0FBQSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFyRCxDQUFxRCxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7QUFBakcsQ0FBaUcsQ0FBQztBQUVwRyxJQUFNLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFFbEgsbUJBQWUsVUFBQyxHQUFxQzs7SUFDbkQsSUFBTSxFQUFFLEdBQUcsSUFBQSwwQkFBYyxFQUFDLElBQUEsK0JBQWtCLEdBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQTRDLElBQUEsbUNBQXFCLEVBQUMsR0FBRyxDQUFDLE1BQUcsQ0FBQyxDQUFDO0tBQzVGO0lBRUQsSUFBTSxhQUFhLEdBQUcsSUFBQSxzQkFBVSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLElBQUksV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNqRCxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFakIsT0FBTztLQUNSOztRQUVELEtBQWtCLElBQUEsU0FBQSxTQUFBLElBQUksQ0FBQSwwQkFBQSw0Q0FBRTtZQUFuQixJQUFNLEdBQUcsaUJBQUE7WUFDWixJQUFJLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFVBQVUsRUFBRTtnQkFDNUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBRXJCLE9BQU87YUFDUjtTQUNGOzs7Ozs7Ozs7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDOUQsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWdFbGVtZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCBjb3JlRm9ybSBmcm9tICcuLi8uLi9jb21tb24vY29yZS5mb3JtJztcbmltcG9ydCB7IERlYnVnTm9kZVNlbGVjdG9yIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUudHlwZXMnO1xuaW1wb3J0IHsgaXNNb2NrQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICcuLi8uLi9jb21tb24vZnVuYy5pcy1tb2NrLWNvbnRyb2wtdmFsdWUtYWNjZXNzb3InO1xuaW1wb3J0IG1vY2tIZWxwZXJUcmlnZ2VyIGZyb20gJy4uL2V2ZW50cy9tb2NrLWhlbHBlci50cmlnZ2VyJztcbmltcG9ydCBtb2NrSGVscGVyRmluZCBmcm9tICcuLi9maW5kL21vY2staGVscGVyLmZpbmQnO1xuaW1wb3J0IGZ1bmNHZXRMYXN0Rml4dHVyZSBmcm9tICcuLi9mdW5jLmdldC1sYXN0LWZpeHR1cmUnO1xuaW1wb3J0IGZ1bmNQYXJzZUZpbmRBcmdzTmFtZSBmcm9tICcuLi9mdW5jLnBhcnNlLWZpbmQtYXJncy1uYW1lJztcblxuaW1wb3J0IGZ1bmNHZXRWY2EgZnJvbSAnLi9mdW5jLmdldC12Y2EnO1xuXG4vLyBkZWZhdWx0IGh0bWwgYmVoYXZpb3JcbmNvbnN0IHRyaWdnZXJUb3VjaCA9IChlbDogRGVidWdFbGVtZW50KTogdm9pZCA9PiB7XG4gIG1vY2tIZWxwZXJUcmlnZ2VyKGVsLCAnZm9jdXMnKTtcbiAgbW9ja0hlbHBlclRyaWdnZXIoZWwsICdibHVyJyk7XG59O1xuXG5jb25zdCBoYW5kbGVLbm93biA9ICh2YWx1ZUFjY2Vzc29yOiBhbnkpOiBib29sZWFuID0+IHtcbiAgaWYgKGNvcmVGb3JtICYmIHZhbHVlQWNjZXNzb3IgaW5zdGFuY2VvZiBjb3JlRm9ybS5BYnN0cmFjdENvbnRyb2wpIHtcbiAgICB2YWx1ZUFjY2Vzc29yLm1hcmtBc1RvdWNoZWQoKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzTW9ja0NvbnRyb2xWYWx1ZUFjY2Vzc29yKHZhbHVlQWNjZXNzb3IuaW5zdGFuY2UpKSB7XG4gICAgdmFsdWVBY2Nlc3Nvci5pbnN0YW5jZS5fX3NpbXVsYXRlVG91Y2goKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuY29uc3QgaGFzTGlzdGVuZXIgPSAoZWw6IERlYnVnRWxlbWVudCk6IGJvb2xlYW4gPT5cbiAgZWwubGlzdGVuZXJzLmZpbHRlcihsaXN0ZW5lciA9PiBsaXN0ZW5lci5uYW1lID09PSAnZm9jdXMnIHx8IGxpc3RlbmVyLm5hbWUgPT09ICdibHVyJykubGVuZ3RoID4gMDtcblxuY29uc3Qga2V5cyA9IFsnb25Ub3VjaGVkJywgJ19vblRvdWNoZWQnLCAnX2N2YU9uVG91Y2gnLCAnX21hcmtBc1RvdWNoZWQnLCAnX29uVG91Y2hlZENhbGxiYWNrJywgJ29uTW9kZWxUb3VjaGVkJ107XG5cbmV4cG9ydCBkZWZhdWx0IChzZWw6IERlYnVnRWxlbWVudCB8IERlYnVnTm9kZVNlbGVjdG9yKTogdm9pZCA9PiB7XG4gIGNvbnN0IGVsID0gbW9ja0hlbHBlckZpbmQoZnVuY0dldExhc3RGaXh0dXJlKCksIHNlbCwgdW5kZWZpbmVkKTtcbiAgaWYgKCFlbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgYW4gZWxlbWVudCB2aWEgbmdNb2Nrcy50b3VjaCgke2Z1bmNQYXJzZUZpbmRBcmdzTmFtZShzZWwpfSlgKTtcbiAgfVxuXG4gIGNvbnN0IHZhbHVlQWNjZXNzb3IgPSBmdW5jR2V0VmNhKGVsKTtcbiAgaWYgKGhhbmRsZUtub3duKHZhbHVlQWNjZXNzb3IpIHx8IGhhc0xpc3RlbmVyKGVsKSkge1xuICAgIHRyaWdnZXJUb3VjaChlbCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZUFjY2Vzc29yW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbHVlQWNjZXNzb3Jba2V5XSgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0eXBlIG9mIENvbnRyb2xWYWx1ZUFjY2Vzc29yJyk7XG59O1xuIl19