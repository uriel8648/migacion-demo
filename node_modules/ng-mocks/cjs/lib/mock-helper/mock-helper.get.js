"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var func_get_source_of_mock_1 = require("../common/func.get-source-of-mock");
var mock_helper_find_1 = __importDefault(require("./find/mock-helper.find"));
var func_get_from_node_1 = __importDefault(require("./func.get-from-node"));
var func_get_last_fixture_1 = __importDefault(require("./func.get-last-fixture"));
var defaultNotFoundValue = {}; // simulating Symbol
var parseArgs = function (args) { return ({
    el: args[0],
    notFoundValue: args.length === 3 ? args[2] : defaultNotFoundValue,
    sel: args[1],
}); };
exports.default = (function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var _a = parseArgs(args), el = _a.el, sel = _a.sel, notFoundValue = _a.notFoundValue;
    var root = (0, mock_helper_find_1.default)((0, func_get_last_fixture_1.default)(), el, undefined);
    var res1 = (0, func_get_from_node_1.default)([], root, (0, func_get_source_of_mock_1.getSourceOfMock)(sel));
    if (res1.length) {
        return res1[0];
    }
    // Looking for related structural directive.
    var prevNode = root === null || root === void 0 ? void 0 : root.nativeNode.previousSibling;
    var matches = !prevNode || prevNode.nodeName !== '#comment' || !root || !root.parent
        ? []
        : root.parent.queryAllNodes(function (node) { return node.nativeNode === prevNode; });
    var matchedNode = matches[0];
    var res2 = (0, func_get_from_node_1.default)([], matchedNode, (0, func_get_source_of_mock_1.getSourceOfMock)(sel));
    if (res2.length) {
        return res2[0];
    }
    if (notFoundValue !== defaultNotFoundValue) {
        return notFoundValue;
    }
    throw new Error("Cannot find " + sel.name + " instance via ngMocks.get");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZy1tb2Nrcy9zcmMvbGliL21vY2staGVscGVyL21vY2staGVscGVyLmdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDZFQUFvRTtBQUdwRSw2RUFBcUQ7QUFDckQsNEVBQW1EO0FBQ25ELGtGQUF5RDtBQUV6RCxJQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQyxDQUFDLG9CQUFvQjtBQUVyRCxJQUFNLFNBQVMsR0FBRyxVQUNoQixJQUFXLElBS1IsT0FBQSxDQUFDO0lBQ0osRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDWCxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CO0lBQ2pFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQ2IsQ0FBQyxFQUpHLENBSUgsQ0FBQztBQUVILG1CQUFlO0lBQUksY0FBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCx5QkFBYzs7SUFDekIsSUFBQSxLQUE2QixTQUFTLENBQUksSUFBSSxDQUFDLEVBQTdDLEVBQUUsUUFBQSxFQUFFLEdBQUcsU0FBQSxFQUFFLGFBQWEsbUJBQXVCLENBQUM7SUFDdEQsSUFBTSxJQUFJLEdBQUcsSUFBQSwwQkFBYyxFQUFDLElBQUEsK0JBQWtCLEdBQUUsRUFBRSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFakUsSUFBTSxJQUFJLEdBQUcsSUFBQSw0QkFBZSxFQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBQSx5Q0FBZSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ2YsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDaEI7SUFFRCw0Q0FBNEM7SUFDNUMsSUFBTSxRQUFRLEdBQUcsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFVBQVUsQ0FBQyxlQUFlLENBQUM7SUFDbEQsSUFBTSxPQUFPLEdBQ1gsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLFFBQVEsS0FBSyxVQUFVLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtRQUNwRSxDQUFDLENBQUMsRUFBRTtRQUNKLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxVQUFVLEtBQUssUUFBUSxFQUE1QixDQUE0QixDQUFDLENBQUM7SUFDdEUsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9CLElBQU0sSUFBSSxHQUFHLElBQUEsNEJBQWUsRUFBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUEseUNBQWUsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2hCO0lBQ0QsSUFBSSxhQUFhLEtBQUssb0JBQW9CLEVBQUU7UUFDMUMsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFlLEdBQUcsQ0FBQyxJQUFJLDhCQUEyQixDQUFDLENBQUM7QUFDdEUsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9jb3JlLnR5cGVzJztcbmltcG9ydCB7IGdldFNvdXJjZU9mTW9jayB9IGZyb20gJy4uL2NvbW1vbi9mdW5jLmdldC1zb3VyY2Utb2YtbW9jayc7XG5pbXBvcnQgeyBNb2NrZWREZWJ1Z0VsZW1lbnQgfSBmcm9tICcuLi9tb2NrLXJlbmRlci90eXBlcyc7XG5cbmltcG9ydCBtb2NrSGVscGVyRmluZCBmcm9tICcuL2ZpbmQvbW9jay1oZWxwZXIuZmluZCc7XG5pbXBvcnQgZnVuY0dldEZyb21Ob2RlIGZyb20gJy4vZnVuYy5nZXQtZnJvbS1ub2RlJztcbmltcG9ydCBmdW5jR2V0TGFzdEZpeHR1cmUgZnJvbSAnLi9mdW5jLmdldC1sYXN0LWZpeHR1cmUnO1xuXG5jb25zdCBkZWZhdWx0Tm90Rm91bmRWYWx1ZSA9IHt9OyAvLyBzaW11bGF0aW5nIFN5bWJvbFxuXG5jb25zdCBwYXJzZUFyZ3MgPSA8VD4oXG4gIGFyZ3M6IGFueVtdLFxuKToge1xuICBlbDogTW9ja2VkRGVidWdFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgbm90Rm91bmRWYWx1ZTogYW55O1xuICBzZWw6IFR5cGU8VD47XG59ID0+ICh7XG4gIGVsOiBhcmdzWzBdLFxuICBub3RGb3VuZFZhbHVlOiBhcmdzLmxlbmd0aCA9PT0gMyA/IGFyZ3NbMl0gOiBkZWZhdWx0Tm90Rm91bmRWYWx1ZSxcbiAgc2VsOiBhcmdzWzFdLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IDxUPiguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICBjb25zdCB7IGVsLCBzZWwsIG5vdEZvdW5kVmFsdWUgfSA9IHBhcnNlQXJnczxUPihhcmdzKTtcbiAgY29uc3Qgcm9vdCA9IG1vY2tIZWxwZXJGaW5kKGZ1bmNHZXRMYXN0Rml4dHVyZSgpLCBlbCwgdW5kZWZpbmVkKTtcblxuICBjb25zdCByZXMxID0gZnVuY0dldEZyb21Ob2RlKFtdLCByb290LCBnZXRTb3VyY2VPZk1vY2soc2VsKSk7XG4gIGlmIChyZXMxLmxlbmd0aCkge1xuICAgIHJldHVybiByZXMxWzBdO1xuICB9XG5cbiAgLy8gTG9va2luZyBmb3IgcmVsYXRlZCBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZS5cbiAgY29uc3QgcHJldk5vZGUgPSByb290Py5uYXRpdmVOb2RlLnByZXZpb3VzU2libGluZztcbiAgY29uc3QgbWF0Y2hlcyA9XG4gICAgIXByZXZOb2RlIHx8IHByZXZOb2RlLm5vZGVOYW1lICE9PSAnI2NvbW1lbnQnIHx8ICFyb290IHx8ICFyb290LnBhcmVudFxuICAgICAgPyBbXVxuICAgICAgOiByb290LnBhcmVudC5xdWVyeUFsbE5vZGVzKG5vZGUgPT4gbm9kZS5uYXRpdmVOb2RlID09PSBwcmV2Tm9kZSk7XG4gIGNvbnN0IG1hdGNoZWROb2RlID0gbWF0Y2hlc1swXTtcbiAgY29uc3QgcmVzMiA9IGZ1bmNHZXRGcm9tTm9kZShbXSwgbWF0Y2hlZE5vZGUsIGdldFNvdXJjZU9mTW9jayhzZWwpKTtcbiAgaWYgKHJlczIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlczJbMF07XG4gIH1cbiAgaWYgKG5vdEZvdW5kVmFsdWUgIT09IGRlZmF1bHROb3RGb3VuZFZhbHVlKSB7XG4gICAgcmV0dXJuIG5vdEZvdW5kVmFsdWU7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCAke3NlbC5uYW1lfSBpbnN0YW5jZSB2aWEgbmdNb2Nrcy5nZXRgKTtcbn07XG4iXX0=