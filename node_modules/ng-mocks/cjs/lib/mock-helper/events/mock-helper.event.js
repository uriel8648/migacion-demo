"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mock_helper_stub_1 = __importDefault(require("../mock-helper.stub"));
/**
 * @see https://developer.mozilla.org/de/docs/Web/Events
 */
var preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];
// istanbul ignore next
function customEvent(event, params) {
    var initParams = __assign({ bubbles: false, cancelable: false }, params);
    var eventObj = document.createEvent('CustomEvent');
    eventObj.initCustomEvent(event, initParams.bubbles, initParams.cancelable, null);
    return eventObj;
}
var eventCtor = typeof Event === 'function'
    ? function (event, init) { return new CustomEvent(event, init); }
    : /* istanbul ignore next */ customEvent;
var keyMap = {
    alt: {
        altKey: true,
        code: 'AltLeft',
        key: 'Alt',
        location: 1,
        which: 18,
    },
    arrowdown: {
        code: 'ArrowDown',
        key: 'ArrowDown',
        location: 0,
        which: 40,
    },
    arrowleft: {
        code: 'ArrowLeft',
        key: 'ArrowLeft',
        location: 0,
        which: 37,
    },
    arrowright: {
        code: 'ArrowRight',
        key: 'ArrowRight',
        location: 0,
        which: 39,
    },
    arrowup: {
        code: 'ArrowUp',
        key: 'ArrowUp',
        location: 0,
        which: 38,
    },
    backspace: {
        code: 'Backspace',
        key: 'Backspace',
        location: 0,
        which: 8,
    },
    control: {
        code: 'ControlLeft',
        ctrlKey: true,
        key: 'Control',
        location: 1,
        which: 17,
    },
    enter: {
        code: 'Enter',
        key: 'Enter',
        location: 0,
        which: 13,
    },
    esc: {
        code: 'Escape',
        key: 'Escape',
        location: 0,
        which: 27,
    },
    meta: {
        code: 'MetaLeft',
        key: 'Meta',
        location: 1,
        metaKey: true,
        which: 91,
    },
    shift: {
        code: 'ShiftLeft',
        key: 'Shift',
        location: 1,
        shiftKey: true,
        which: 16,
    },
    space: {
        code: 'Space',
        key: ' ',
        location: 0,
        which: 32,
    },
    tab: {
        code: 'Tab',
        key: 'Tab',
        location: 0,
        which: 9,
    },
};
for (var f = 1; f <= 12; f += 1) {
    keyMap["f" + f] = {
        code: "F" + f,
        key: "F" + f,
        location: 0,
        which: f + 111,
    };
}
var getCode = function (char) {
    var code = char.codePointAt(0);
    // a-z
    if (code && code >= 97 && code <= 122) {
        return "Key" + char.toUpperCase();
    }
    // A-Z
    if (code && code >= 65 && code <= 90) {
        return "Key" + char.toUpperCase();
    }
    // A-Z
    if (code && code >= 48 && code <= 57) {
        return "Digit" + char;
    }
    return 'Unknown';
};
var applyPayload = function (event, payload) {
    var e_1, _a;
    var keyData = {};
    try {
        for (var _b = __values(payload ? payload.split('.') : []), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var map = keyMap[key];
            if (!map && key.length === 1) {
                map = {
                    code: getCode(key),
                    key: key,
                };
            }
            if (!map) {
                throw new Error("Unknown event part " + key);
            }
            (0, mock_helper_stub_1.default)(keyData, map);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (payload) {
        (0, mock_helper_stub_1.default)(event, keyData);
    }
};
exports.default = (function (event, init, overrides) {
    var dot = event.indexOf('.');
    var _a = __read(dot === -1 ? [event] : [event.substr(0, dot), event.substr(dot + 1)], 2), eventName = _a[0], eventPayload = _a[1];
    var eventObj = eventCtor(eventName, __assign({ bubbles: preventBubble.indexOf(event) === -1, cancelable: true }, init));
    applyPayload(eventObj, eventPayload);
    if (overrides) {
        (0, mock_helper_stub_1.default)(eventObj, overrides);
    }
    return eventObj;
});
//# sourceMappingURL=data:application/json;base64,