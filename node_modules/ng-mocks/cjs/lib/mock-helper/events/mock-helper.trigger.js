"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mock_helper_find_1 = __importDefault(require("../find/mock-helper.find"));
var is_debug_node_1 = __importDefault(require("../format/is-debug-node"));
var is_fixture_1 = __importDefault(require("../format/is-fixture"));
var is_html_element_1 = __importDefault(require("../format/is-html-element"));
var func_get_last_fixture_1 = __importDefault(require("../func.get-last-fixture"));
var mock_helper_stub_1 = __importDefault(require("../mock-helper.stub"));
var mock_helper_event_1 = __importDefault(require("./mock-helper.event"));
/**
 * @see https://developer.mozilla.org/de/docs/Web/Events
 */
var preventBubble = ['focus', 'blur', 'load', 'unload', 'change', 'reset', 'scroll'];
var toEventObj = function (event) {
    return typeof event === 'string'
        ? (0, mock_helper_event_1.default)(event, {
            bubbles: preventBubble.indexOf(event) === -1,
            cancelable: true,
        })
        : event;
};
var getNativeElement = function (debugElement) {
    if ((0, is_debug_node_1.default)(debugElement) || (0, is_fixture_1.default)(debugElement)) {
        return debugElement.nativeElement;
    }
    if ((0, is_html_element_1.default)(debugElement)) {
        return debugElement;
    }
    return undefined;
};
exports.default = (function (selector, eventName, payload) {
    var debugElement = (0, is_html_element_1.default)(selector) ? selector : (0, mock_helper_find_1.default)((0, func_get_last_fixture_1.default)(), selector, undefined);
    var nativeElement = getNativeElement(debugElement);
    if (!nativeElement) {
        throw new Error("Cannot trigger " + (typeof eventName === 'string' ? eventName : eventName.type) + " event undefined element");
    }
    // nothing to emit on disabled elements
    if (nativeElement.disabled) {
        return;
    }
    var event = toEventObj(eventName);
    if (!event.target) {
        (0, mock_helper_stub_1.default)(event, {
            target: nativeElement,
        });
    }
    if (payload) {
        (0, mock_helper_stub_1.default)(event, payload);
    }
    nativeElement.dispatchEvent(event);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIudHJpZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWhlbHBlci9ldmVudHMvbW9jay1oZWxwZXIudHJpZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLDhFQUFzRDtBQUN0RCwwRUFBa0Q7QUFDbEQsb0VBQTZDO0FBQzdDLDhFQUFzRDtBQUN0RCxtRkFBMEQ7QUFDMUQseUVBQWlEO0FBRWpELDBFQUFrRDtBQUVsRDs7R0FFRztBQUNILElBQU0sYUFBYSxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFdkYsSUFBTSxVQUFVLEdBQUcsVUFBQyxLQUF5RTtJQUMzRixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVE7UUFDOUIsQ0FBQyxDQUFDLElBQUEsMkJBQWUsRUFBQyxLQUFLLEVBQUU7WUFDckIsT0FBTyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVDLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUM7UUFDSixDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ1osQ0FBQyxDQUFDO0FBRUYsSUFBTSxnQkFBZ0IsR0FBRyxVQUN2QixZQUFtRjtJQUVuRixJQUFJLElBQUEsdUJBQVcsRUFBQyxZQUFZLENBQUMsSUFBSSxJQUFBLG9CQUFTLEVBQUMsWUFBWSxDQUFDLEVBQUU7UUFDeEQsT0FBTyxZQUFZLENBQUMsYUFBYSxDQUFDO0tBQ25DO0lBQ0QsSUFBSSxJQUFBLHlCQUFhLEVBQUMsWUFBWSxDQUFDLEVBQUU7UUFDL0IsT0FBTyxZQUFZLENBQUM7S0FDckI7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixtQkFBZSxVQUNiLFFBQWdGLEVBQ2hGLFNBQTZFLEVBQzdFLE9BQTRFO0lBRTVFLElBQU0sWUFBWSxHQUFHLElBQUEseUJBQWEsRUFBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFBLDBCQUFjLEVBQUMsSUFBQSwrQkFBa0IsR0FBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNwSCxJQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUVyRCxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQ2IscUJBQWtCLE9BQU8sU0FBUyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSw4QkFBMEIsQ0FDdkcsQ0FBQztLQUNIO0lBRUQsdUNBQXVDO0lBQ3ZDLElBQUssYUFBa0MsQ0FBQyxRQUFRLEVBQUU7UUFDaEQsT0FBTztLQUNSO0lBRUQsSUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ2pCLElBQUEsMEJBQWMsRUFBQyxLQUFLLEVBQUU7WUFDcEIsTUFBTSxFQUFFLGFBQWE7U0FDdEIsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxJQUFJLE9BQU8sRUFBRTtRQUNYLElBQUEsMEJBQWMsRUFBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDaEM7SUFDRCxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnRWxlbWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCB7IERlYnVnTm9kZVNlbGVjdG9yIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvcmUudHlwZXMnO1xuaW1wb3J0IG1vY2tIZWxwZXJGaW5kIGZyb20gJy4uL2ZpbmQvbW9jay1oZWxwZXIuZmluZCc7XG5pbXBvcnQgaXNEZWJ1Z05vZGUgZnJvbSAnLi4vZm9ybWF0L2lzLWRlYnVnLW5vZGUnO1xuaW1wb3J0IGlzRml4dHVyZSBmcm9tICcuLi9mb3JtYXQvaXMtZml4dHVyZSc7XG5pbXBvcnQgaXNIdG1sRWxlbWVudCBmcm9tICcuLi9mb3JtYXQvaXMtaHRtbC1lbGVtZW50JztcbmltcG9ydCBmdW5jR2V0TGFzdEZpeHR1cmUgZnJvbSAnLi4vZnVuYy5nZXQtbGFzdC1maXh0dXJlJztcbmltcG9ydCBtb2NrSGVscGVyU3R1YiBmcm9tICcuLi9tb2NrLWhlbHBlci5zdHViJztcblxuaW1wb3J0IG1vY2tIZWxwZXJFdmVudCBmcm9tICcuL21vY2staGVscGVyLmV2ZW50JztcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RlL2RvY3MvV2ViL0V2ZW50c1xuICovXG5jb25zdCBwcmV2ZW50QnViYmxlID0gWydmb2N1cycsICdibHVyJywgJ2xvYWQnLCAndW5sb2FkJywgJ2NoYW5nZScsICdyZXNldCcsICdzY3JvbGwnXTtcblxuY29uc3QgdG9FdmVudE9iaiA9IChldmVudDogc3RyaW5nIHwgVUlFdmVudCB8IEtleWJvYXJkRXZlbnQgfCBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCB8IEV2ZW50KTogRXZlbnQgPT4ge1xuICByZXR1cm4gdHlwZW9mIGV2ZW50ID09PSAnc3RyaW5nJ1xuICAgID8gbW9ja0hlbHBlckV2ZW50KGV2ZW50LCB7XG4gICAgICAgIGJ1YmJsZXM6IHByZXZlbnRCdWJibGUuaW5kZXhPZihldmVudCkgPT09IC0xLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgfSlcbiAgICA6IGV2ZW50O1xufTtcblxuY29uc3QgZ2V0TmF0aXZlRWxlbWVudCA9IChcbiAgZGVidWdFbGVtZW50OiBEZWJ1Z0VsZW1lbnQgfCBIVE1MRWxlbWVudCB8IENvbXBvbmVudEZpeHR1cmU8YW55PiB8IHVuZGVmaW5lZCB8IG51bGwsXG4pOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmIChpc0RlYnVnTm9kZShkZWJ1Z0VsZW1lbnQpIHx8IGlzRml4dHVyZShkZWJ1Z0VsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGRlYnVnRWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICB9XG4gIGlmIChpc0h0bWxFbGVtZW50KGRlYnVnRWxlbWVudCkpIHtcbiAgICByZXR1cm4gZGVidWdFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChcbiAgc2VsZWN0b3I6IERlYnVnRWxlbWVudCB8IEhUTUxFbGVtZW50IHwgQ29tcG9uZW50Rml4dHVyZTxhbnk+IHwgRGVidWdOb2RlU2VsZWN0b3IsXG4gIGV2ZW50TmFtZTogc3RyaW5nIHwgVUlFdmVudCB8IEtleWJvYXJkRXZlbnQgfCBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCB8IEV2ZW50LFxuICBwYXlsb2FkPzogUGFydGlhbDxVSUV2ZW50IHwgS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50IHwgRXZlbnQ+LFxuKSA9PiB7XG4gIGNvbnN0IGRlYnVnRWxlbWVudCA9IGlzSHRtbEVsZW1lbnQoc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBtb2NrSGVscGVyRmluZChmdW5jR2V0TGFzdEZpeHR1cmUoKSwgc2VsZWN0b3IsIHVuZGVmaW5lZCk7XG4gIGNvbnN0IG5hdGl2ZUVsZW1lbnQgPSBnZXROYXRpdmVFbGVtZW50KGRlYnVnRWxlbWVudCk7XG5cbiAgaWYgKCFuYXRpdmVFbGVtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYENhbm5vdCB0cmlnZ2VyICR7dHlwZW9mIGV2ZW50TmFtZSA9PT0gJ3N0cmluZycgPyBldmVudE5hbWUgOiBldmVudE5hbWUudHlwZX0gZXZlbnQgdW5kZWZpbmVkIGVsZW1lbnRgLFxuICAgICk7XG4gIH1cblxuICAvLyBub3RoaW5nIHRvIGVtaXQgb24gZGlzYWJsZWQgZWxlbWVudHNcbiAgaWYgKChuYXRpdmVFbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmRpc2FibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZXZlbnQgPSB0b0V2ZW50T2JqKGV2ZW50TmFtZSk7XG4gIGlmICghZXZlbnQudGFyZ2V0KSB7XG4gICAgbW9ja0hlbHBlclN0dWIoZXZlbnQsIHtcbiAgICAgIHRhcmdldDogbmF0aXZlRWxlbWVudCxcbiAgICB9KTtcbiAgfVxuICBpZiAocGF5bG9hZCkge1xuICAgIG1vY2tIZWxwZXJTdHViKGV2ZW50LCBwYXlsb2FkKTtcbiAgfVxuICBuYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufTtcbiJdfQ==