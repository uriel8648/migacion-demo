"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var helper_mock_service_1 = __importDefault(require("../mock-service/helper.mock-service"));
exports.default = (function (instance, override, style) {
    var e_1, _a;
    if (typeof override === 'string') {
        return helper_mock_service_1.default.mock(instance, override, style);
    }
    // if someone is giving us a function, then we should swap instance and overrides.
    // so in the end the function can be called, but it also has all desired properties.
    var correctInstance = instance;
    var applyOverrides = override;
    var skipProps = ['__zone_symbol__unconfigurables'];
    if (typeof override === 'function') {
        correctInstance = helper_mock_service_1.default.createClone(override);
        applyOverrides = instance;
        skipProps.push.apply(skipProps, __spreadArray([], __read(Object.getOwnPropertyNames(correctInstance)), false));
    }
    try {
        for (var _b = __values(Object.getOwnPropertyNames(applyOverrides)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            var desc = skipProps.indexOf(key) === -1 ? Object.getOwnPropertyDescriptor(applyOverrides, key) : undefined;
            helper_mock_service_1.default.definePropertyDescriptor(correctInstance, key, desc);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return correctInstance;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuc3R1Yi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWhlbHBlci9tb2NrLWhlbHBlci5zdHViLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNEZBQW9FO0FBR3BFLG1CQUFlLFVBQXFCLFFBQWEsRUFBRSxRQUFhLEVBQUUsS0FBcUI7O0lBQ3JGLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1FBQ2hDLE9BQU8sNkJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDMUQ7SUFFRCxrRkFBa0Y7SUFDbEYsb0ZBQW9GO0lBQ3BGLElBQUksZUFBZSxHQUFHLFFBQVEsQ0FBQztJQUMvQixJQUFJLGNBQWMsR0FBRyxRQUFRLENBQUM7SUFDOUIsSUFBTSxTQUFTLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ3JELElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFO1FBQ2xDLGVBQWUsR0FBRyw2QkFBaUIsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUQsY0FBYyxHQUFHLFFBQVEsQ0FBQztRQUMxQixTQUFTLENBQUMsSUFBSSxPQUFkLFNBQVMsMkJBQVMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxXQUFFO0tBQ2hFOztRQUVELEtBQWtCLElBQUEsS0FBQSxTQUFBLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsQ0FBQSxnQkFBQSw0QkFBRTtZQUF6RCxJQUFNLEdBQUcsV0FBQTtZQUNaLElBQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUM5Ryw2QkFBaUIsQ0FBQyx3QkFBd0IsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3hFOzs7Ozs7Ozs7SUFFRCxPQUFPLGVBQWUsQ0FBQztBQUN6QixDQUFDLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaGVscGVyTW9ja1NlcnZpY2UgZnJvbSAnLi4vbW9jay1zZXJ2aWNlL2hlbHBlci5tb2NrLXNlcnZpY2UnO1xuaW1wb3J0IHsgTW9ja2VkRnVuY3Rpb24gfSBmcm9tICcuLi9tb2NrLXNlcnZpY2UvdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCA8VCA9IE1vY2tlZEZ1bmN0aW9uPihpbnN0YW5jZTogYW55LCBvdmVycmlkZTogYW55LCBzdHlsZT86ICdnZXQnIHwgJ3NldCcpOiBUID0+IHtcbiAgaWYgKHR5cGVvZiBvdmVycmlkZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gaGVscGVyTW9ja1NlcnZpY2UubW9jayhpbnN0YW5jZSwgb3ZlcnJpZGUsIHN0eWxlKTtcbiAgfVxuXG4gIC8vIGlmIHNvbWVvbmUgaXMgZ2l2aW5nIHVzIGEgZnVuY3Rpb24sIHRoZW4gd2Ugc2hvdWxkIHN3YXAgaW5zdGFuY2UgYW5kIG92ZXJyaWRlcy5cbiAgLy8gc28gaW4gdGhlIGVuZCB0aGUgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCwgYnV0IGl0IGFsc28gaGFzIGFsbCBkZXNpcmVkIHByb3BlcnRpZXMuXG4gIGxldCBjb3JyZWN0SW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgbGV0IGFwcGx5T3ZlcnJpZGVzID0gb3ZlcnJpZGU7XG4gIGNvbnN0IHNraXBQcm9wcyA9IFsnX196b25lX3N5bWJvbF9fdW5jb25maWd1cmFibGVzJ107XG4gIGlmICh0eXBlb2Ygb3ZlcnJpZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb3JyZWN0SW5zdGFuY2UgPSBoZWxwZXJNb2NrU2VydmljZS5jcmVhdGVDbG9uZShvdmVycmlkZSk7XG4gICAgYXBwbHlPdmVycmlkZXMgPSBpbnN0YW5jZTtcbiAgICBza2lwUHJvcHMucHVzaCguLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb3JyZWN0SW5zdGFuY2UpKTtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFwcGx5T3ZlcnJpZGVzKSkge1xuICAgIGNvbnN0IGRlc2MgPSBza2lwUHJvcHMuaW5kZXhPZihrZXkpID09PSAtMSA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYXBwbHlPdmVycmlkZXMsIGtleSkgOiB1bmRlZmluZWQ7XG4gICAgaGVscGVyTW9ja1NlcnZpY2UuZGVmaW5lUHJvcGVydHlEZXNjcmlwdG9yKGNvcnJlY3RJbnN0YW5jZSwga2V5LCBkZXNjKTtcbiAgfVxuXG4gIHJldHVybiBjb3JyZWN0SW5zdGFuY2U7XG59O1xuIl19