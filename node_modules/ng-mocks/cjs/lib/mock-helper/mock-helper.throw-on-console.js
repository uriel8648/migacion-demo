"use strict";
// tslint:disable no-console
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_define_property_1 = __importDefault(require("../common/core.define-property"));
var factory = function (propName) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var error = new Error(args.join(' '));
        (0, core_define_property_1.default)(error, 'ngMocksConsoleCatch', propName, false);
        throw error;
    };
};
// Thanks Ivy, it does not throw an error and we have to use injector.
exports.default = (function () {
    var methods = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        methods[_i] = arguments[_i];
    }
    var backup = [];
    beforeAll(function () {
        var e_1, _a;
        if (methods.indexOf('warn') === -1) {
            methods.push('warn');
        }
        if (methods.indexOf('error') === -1) {
            methods.push('error');
        }
        try {
            for (var methods_1 = __values(methods), methods_1_1 = methods_1.next(); !methods_1_1.done; methods_1_1 = methods_1.next()) {
                var method = methods_1_1.value;
                backup.push([method, console[method]]);
                console[method] = factory(method);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (methods_1_1 && !methods_1_1.done && (_a = methods_1.return)) _a.call(methods_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    afterAll(function () {
        var e_2, _a;
        try {
            for (var backup_1 = __values(backup), backup_1_1 = backup_1.next(); !backup_1_1.done; backup_1_1 = backup_1.next()) {
                var _b = __read(backup_1_1.value, 2), method = _b[0], implementation = _b[1];
                console[method] = implementation;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (backup_1_1 && !backup_1_1.done && (_a = backup_1.return)) _a.call(backup_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        backup.splice(0, backup.length);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIudGhyb3ctb24tY29uc29sZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWhlbHBlci9tb2NrLWhlbHBlci50aHJvdy1vbi1jb25zb2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0QkFBNEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRTVCLHdGQUFnRTtBQUVoRSxJQUFNLE9BQU8sR0FDWCxVQUFDLFFBQWdCO0lBQ2pCLE9BQUE7UUFBQyxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUNiLElBQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4QyxJQUFBLDhCQUFrQixFQUFDLEtBQUssRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEUsTUFBTSxLQUFLLENBQUM7SUFDZCxDQUFDO0FBSkQsQ0FJQyxDQUFDO0FBRUosc0VBQXNFO0FBQ3RFLG1CQUFlO0lBQUMsaUJBQXVDO1NBQXZDLFVBQXVDLEVBQXZDLHFCQUF1QyxFQUF2QyxJQUF1QztRQUF2Qyw0QkFBdUM7O0lBQ3JELElBQU0sTUFBTSxHQUF1QyxFQUFFLENBQUM7SUFFdEQsU0FBUyxDQUFDOztRQUNSLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdkI7O1lBQ0QsS0FBcUIsSUFBQSxZQUFBLFNBQUEsT0FBTyxDQUFBLGdDQUFBLHFEQUFFO2dCQUF6QixJQUFNLE1BQU0sb0JBQUE7Z0JBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBVSxDQUFDO2FBQzVDOzs7Ozs7Ozs7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQzs7O1lBQ1AsS0FBdUMsSUFBQSxXQUFBLFNBQUEsTUFBTSxDQUFBLDhCQUFBLGtEQUFFO2dCQUFwQyxJQUFBLEtBQUEsMkJBQXdCLEVBQXZCLE1BQU0sUUFBQSxFQUFFLGNBQWMsUUFBQTtnQkFDaEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLGNBQWMsQ0FBQzthQUNsQzs7Ozs7Ozs7O1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGUgbm8tY29uc29sZVxuXG5pbXBvcnQgY29yZURlZmluZVByb3BlcnR5IGZyb20gJy4uL2NvbW1vbi9jb3JlLmRlZmluZS1wcm9wZXJ0eSc7XG5cbmNvbnN0IGZhY3RvcnkgPVxuICAocHJvcE5hbWU6IHN0cmluZykgPT5cbiAgKC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYXJncy5qb2luKCcgJykpO1xuICAgIGNvcmVEZWZpbmVQcm9wZXJ0eShlcnJvciwgJ25nTW9ja3NDb25zb2xlQ2F0Y2gnLCBwcm9wTmFtZSwgZmFsc2UpO1xuICAgIHRocm93IGVycm9yO1xuICB9O1xuXG4vLyBUaGFua3MgSXZ5LCBpdCBkb2VzIG5vdCB0aHJvdyBhbiBlcnJvciBhbmQgd2UgaGF2ZSB0byB1c2UgaW5qZWN0b3IuXG5leHBvcnQgZGVmYXVsdCAoLi4ubWV0aG9kczogQXJyYXk8a2V5b2YgdHlwZW9mIGNvbnNvbGU+KTogdm9pZCA9PiB7XG4gIGNvbnN0IGJhY2t1cDogQXJyYXk8W2tleW9mIHR5cGVvZiBjb25zb2xlLCBhbnldPiA9IFtdO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgaWYgKG1ldGhvZHMuaW5kZXhPZignd2FybicpID09PSAtMSkge1xuICAgICAgbWV0aG9kcy5wdXNoKCd3YXJuJyk7XG4gICAgfVxuICAgIGlmIChtZXRob2RzLmluZGV4T2YoJ2Vycm9yJykgPT09IC0xKSB7XG4gICAgICBtZXRob2RzLnB1c2goJ2Vycm9yJyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIG1ldGhvZHMpIHtcbiAgICAgIGJhY2t1cC5wdXNoKFttZXRob2QsIGNvbnNvbGVbbWV0aG9kXV0pO1xuICAgICAgY29uc29sZVttZXRob2RdID0gZmFjdG9yeShtZXRob2QpIGFzIG5ldmVyO1xuICAgIH1cbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGZvciAoY29uc3QgW21ldGhvZCwgaW1wbGVtZW50YXRpb25dIG9mIGJhY2t1cCkge1xuICAgICAgY29uc29sZVttZXRob2RdID0gaW1wbGVtZW50YXRpb247XG4gICAgfVxuICAgIGJhY2t1cC5zcGxpY2UoMCwgYmFja3VwLmxlbmd0aCk7XG4gIH0pO1xufTtcbiJdfQ==