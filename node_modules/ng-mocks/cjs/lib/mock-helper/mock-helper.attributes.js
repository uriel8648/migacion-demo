"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mock_helper_find_1 = __importDefault(require("./find/mock-helper.find"));
var func_get_last_fixture_1 = __importDefault(require("./func.get-last-fixture"));
var func_parse_provider_tokens_directives_1 = __importDefault(require("./func.parse-provider-tokens-directives"));
var mock_helper_get_1 = __importDefault(require("./mock-helper.get"));
var defaultNotFoundValue = {}; // simulating Symbol
var parseArgs = function (args) { return [
    args[0],
    args[1],
    args.length === 3 ? args[2] : defaultNotFoundValue,
]; };
var attrMatches = function (attribute, selector) {
    var _a = __read(attribute.split(':', 2).map(function (v) { return v.trim(); }), 2), prop = _a[0], _b = _a[1], alias = _b === void 0 ? '' : _b;
    if ((!alias && prop === selector) || (!!alias && alias === selector)) {
        return prop;
    }
    return undefined;
};
var detectAttribute = function (el, attr, sel) {
    var e_1, _a, e_2, _b;
    try {
        for (var _c = __values((el === null || el === void 0 ? void 0 : el.providerTokens) || []), _d = _c.next(); !_d.done; _d = _c.next()) {
            var token = _d.value;
            var meta = (0, func_parse_provider_tokens_directives_1.default)(el, token);
            if (!meta) {
                continue;
            }
            try {
                for (var _e = (e_2 = void 0, __values(meta[attr] || /* istanbul ignore next */ [])), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var attrDef = _f.value;
                    var prop = attrMatches(attrDef, sel);
                    if (prop) {
                        return (0, mock_helper_get_1.default)(el, token)[prop];
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    throw new Error('Not found');
};
exports.default = (function (label, attr) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var _a = __read(parseArgs(args), 3), el = _a[0], sel = _a[1], notFoundValue = _a[2];
    try {
        return detectAttribute((0, mock_helper_find_1.default)((0, func_get_last_fixture_1.default)(), el, undefined), attr, sel);
    }
    catch (e) {
        // nothing to do
    }
    if (notFoundValue !== defaultNotFoundValue) {
        return notFoundValue;
    }
    throw new Error("Cannot find " + sel + " " + label + " via ngMocks." + label);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1oZWxwZXIuYXR0cmlidXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvbmctbW9ja3Mvc3JjL2xpYi9tb2NrLWhlbHBlci9tb2NrLWhlbHBlci5hdHRyaWJ1dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsNkVBQXFEO0FBQ3JELGtGQUF5RDtBQUN6RCxrSEFBd0Y7QUFDeEYsc0VBQThDO0FBRTlDLElBQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDLENBQUMsb0JBQW9CO0FBRXJELElBQU0sU0FBUyxHQUFHLFVBQUMsSUFBVyxJQUEyRCxPQUFBO0lBQ3ZGLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ1AsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CO0NBQ25ELEVBSndGLENBSXhGLENBQUM7QUFFRixJQUFNLFdBQVcsR0FBRyxVQUFDLFNBQWlCLEVBQUUsUUFBZ0I7SUFDaEQsSUFBQSxLQUFBLE9BQXFCLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBUixDQUFRLENBQUMsSUFBQSxFQUE5RCxJQUFJLFFBQUEsRUFBRSxVQUFVLEVBQVYsS0FBSyxtQkFBRyxFQUFFLEtBQThDLENBQUM7SUFFdEUsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksS0FBSyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLFFBQVEsQ0FBQyxFQUFFO1FBQ3BFLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixJQUFNLGVBQWUsR0FBRyxVQUFDLEVBQXlDLEVBQUUsSUFBMEIsRUFBRSxHQUFXOzs7UUFDekcsS0FBb0IsSUFBQSxLQUFBLFNBQUEsQ0FBQSxFQUFFLGFBQUYsRUFBRSx1QkFBRixFQUFFLENBQUUsY0FBYyxLQUFJLEVBQUUsQ0FBQSxnQkFBQSw0QkFBRTtZQUF6QyxJQUFNLEtBQUssV0FBQTtZQUNkLElBQU0sSUFBSSxHQUFHLElBQUEsK0NBQWlDLEVBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1QsU0FBUzthQUNWOztnQkFFRCxLQUFzQixJQUFBLG9CQUFBLFNBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLDBCQUEwQixDQUFDLEVBQUUsQ0FBQSxDQUFBLGdCQUFBLDRCQUFFO29CQUE5RCxJQUFNLE9BQU8sV0FBQTtvQkFDaEIsSUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDdkMsSUFBSSxJQUFJLEVBQUU7d0JBQ1IsT0FBTyxJQUFBLHlCQUFhLEVBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUN2QztpQkFDRjs7Ozs7Ozs7O1NBQ0Y7Ozs7Ozs7OztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsbUJBQWUsVUFBQyxLQUFhLEVBQUUsSUFBMEI7SUFBRSxjQUFjO1NBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztRQUFkLDZCQUFjOztJQUNqRSxJQUFBLEtBQUEsT0FBMkIsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFBLEVBQXpDLEVBQUUsUUFBQSxFQUFFLEdBQUcsUUFBQSxFQUFFLGFBQWEsUUFBbUIsQ0FBQztJQUVqRCxJQUFJO1FBQ0YsT0FBTyxlQUFlLENBQUMsSUFBQSwwQkFBYyxFQUFDLElBQUEsK0JBQWtCLEdBQUUsRUFBRSxFQUFFLEVBQUUsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3hGO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixnQkFBZ0I7S0FDakI7SUFDRCxJQUFJLGFBQWEsS0FBSyxvQkFBb0IsRUFBRTtRQUMxQyxPQUFPLGFBQWEsQ0FBQztLQUN0QjtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWUsR0FBRyxTQUFJLEtBQUsscUJBQWdCLEtBQU8sQ0FBQyxDQUFDO0FBQ3RFLENBQUMsRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vY2tlZERlYnVnRWxlbWVudCB9IGZyb20gJy4uL21vY2stcmVuZGVyL3R5cGVzJztcblxuaW1wb3J0IG1vY2tIZWxwZXJGaW5kIGZyb20gJy4vZmluZC9tb2NrLWhlbHBlci5maW5kJztcbmltcG9ydCBmdW5jR2V0TGFzdEZpeHR1cmUgZnJvbSAnLi9mdW5jLmdldC1sYXN0LWZpeHR1cmUnO1xuaW1wb3J0IGZ1bmNQYXJzZVByb3ZpZGVyVG9rZW5zRGlyZWN0aXZlcyBmcm9tICcuL2Z1bmMucGFyc2UtcHJvdmlkZXItdG9rZW5zLWRpcmVjdGl2ZXMnO1xuaW1wb3J0IG1vY2tIZWxwZXJHZXQgZnJvbSAnLi9tb2NrLWhlbHBlci5nZXQnO1xuXG5jb25zdCBkZWZhdWx0Tm90Rm91bmRWYWx1ZSA9IHt9OyAvLyBzaW11bGF0aW5nIFN5bWJvbFxuXG5jb25zdCBwYXJzZUFyZ3MgPSAoYXJnczogYW55W10pOiBbTW9ja2VkRGVidWdFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZCwgc3RyaW5nLCBhbnldID0+IFtcbiAgYXJnc1swXSxcbiAgYXJnc1sxXSxcbiAgYXJncy5sZW5ndGggPT09IDMgPyBhcmdzWzJdIDogZGVmYXVsdE5vdEZvdW5kVmFsdWUsXG5dO1xuXG5jb25zdCBhdHRyTWF0Y2hlcyA9IChhdHRyaWJ1dGU6IHN0cmluZywgc2VsZWN0b3I6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IFtwcm9wLCBhbGlhcyA9ICcnXSA9IGF0dHJpYnV0ZS5zcGxpdCgnOicsIDIpLm1hcCh2ID0+IHYudHJpbSgpKTtcblxuICBpZiAoKCFhbGlhcyAmJiBwcm9wID09PSBzZWxlY3RvcikgfHwgKCEhYWxpYXMgJiYgYWxpYXMgPT09IHNlbGVjdG9yKSkge1xuICAgIHJldHVybiBwcm9wO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmNvbnN0IGRldGVjdEF0dHJpYnV0ZSA9IChlbDogTW9ja2VkRGVidWdFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZCwgYXR0cjogJ2lucHV0cycgfCAnb3V0cHV0cycsIHNlbDogc3RyaW5nKSA9PiB7XG4gIGZvciAoY29uc3QgdG9rZW4gb2YgZWw/LnByb3ZpZGVyVG9rZW5zIHx8IFtdKSB7XG4gICAgY29uc3QgbWV0YSA9IGZ1bmNQYXJzZVByb3ZpZGVyVG9rZW5zRGlyZWN0aXZlcyhlbCwgdG9rZW4pO1xuICAgIGlmICghbWV0YSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBhdHRyRGVmIG9mIG1ldGFbYXR0cl0gfHwgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gW10pIHtcbiAgICAgIGNvbnN0IHByb3AgPSBhdHRyTWF0Y2hlcyhhdHRyRGVmLCBzZWwpO1xuICAgICAgaWYgKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIG1vY2tIZWxwZXJHZXQoZWwsIHRva2VuKVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBmb3VuZCcpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKGxhYmVsOiBzdHJpbmcsIGF0dHI6ICdpbnB1dHMnIHwgJ291dHB1dHMnLCAuLi5hcmdzOiBhbnlbXSkgPT4ge1xuICBjb25zdCBbZWwsIHNlbCwgbm90Rm91bmRWYWx1ZV0gPSBwYXJzZUFyZ3MoYXJncyk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZGV0ZWN0QXR0cmlidXRlKG1vY2tIZWxwZXJGaW5kKGZ1bmNHZXRMYXN0Rml4dHVyZSgpLCBlbCwgdW5kZWZpbmVkKSwgYXR0ciwgc2VsKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgfVxuICBpZiAobm90Rm91bmRWYWx1ZSAhPT0gZGVmYXVsdE5vdEZvdW5kVmFsdWUpIHtcbiAgICByZXR1cm4gbm90Rm91bmRWYWx1ZTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kICR7c2VsfSAke2xhYmVsfSB2aWEgbmdNb2Nrcy4ke2xhYmVsfWApO1xufTtcbiJdfQ==