{"version":3,"file":"ngrx-effects-testing.js","sources":["../../../../modules/effects/testing/src/testing.ts","../../../../modules/effects/testing/src/ngrx-effects-testing.ts"],"names":[],"mappings":";;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAgB,kBAAkB,CAChC,eAA0D;AACzD,IACD,OAAO;AACT,QAAI,OAAO,EAAE,OAAO;AACpB,QAAI,UAAU,EAAE;AAAQ,YAClB,IAAI,OAAO,eAAe,KAAK,UAAU,EAAE;AACjD,gBAAQ,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;AACnD,aAAO;AACP,YACM,OAAO,IAAI,OAAO,CAAC,eAAe,CAAC,CAAC;AAC1C,SAAK;AACL,QAAI,IAAI,EAAE,EAAE;AACZ,KAAG,CAAC;AACJ;AACA;AC1EA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import { FactoryProvider } from '@angular/core';\nimport { Actions } from '@ngrx/effects';\nimport { defer, Observable } from 'rxjs';\n\nexport function provideMockActions(source: Observable<any>): FactoryProvider;\nexport function provideMockActions(\n  factory: () => Observable<any>\n): FactoryProvider;\n/**\n * @description\n * Creates mock actions provider.\n *\n * @param factoryOrSource Actions' source or source creation function\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```ts\n * describe('Books Effects', () => {\n *   let actions$: Observable<any>;\n *   let effects: BooksEffects;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockActions(() => actions$),\n *         BooksEffects,\n *       ],\n *     });\n *\n *     actions$ = TestBed.inject(Actions);\n *     effects = TestBed.inject(BooksEffects);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```ts\n * describe('Counter Effects', () => {\n *   let injector: Injector;\n *   let actions$: Observable<any>;\n *   let effects: CounterEffects;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockActions(() => actions$),\n *         CounterEffects,\n *       ],\n *     });\n *\n *     actions$ = injector.get(Actions);\n *     effects = injector.get(CounterEffects);\n *   });\n * });\n * ```\n */\nexport function provideMockActions(\n  factoryOrSource: (() => Observable<any>) | Observable<any>\n): FactoryProvider {\n  return {\n    provide: Actions,\n    useFactory: (): Observable<any> => {\n      if (typeof factoryOrSource === 'function') {\n        return new Actions(defer(factoryOrSource));\n      }\n\n      return new Actions(factoryOrSource);\n    },\n    deps: [],\n  };\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}